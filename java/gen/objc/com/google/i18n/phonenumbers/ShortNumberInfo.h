//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/libphonenumber/java/libphonenumber/src/main/java/com/google/i18n/phonenumbers/ShortNumberInfo.java
//

#ifndef _ComGoogleI18nPhonenumbersShortNumberInfo_H_
#define _ComGoogleI18nPhonenumbersShortNumberInfo_H_

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

@class ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;
@class ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum;
@protocol ComGoogleI18nPhonenumbersInternalMatcherApi;
@protocol JavaUtilSet;

/*!
 @brief Methods for getting information about short phone numbers, such as short codes and emergency
 numbers.
 Note that most commercial short numbers are not handled here, but by the
 <code>PhoneNumberUtil</code>.
 @author Shaopeng Jia
 @author David Yonge-Mallo
 */
@interface ComGoogleI18nPhonenumbersShortNumberInfo : NSObject

#pragma mark Public

/*!
 @brief Returns true if the given number, exactly as dialed, might be used to connect to an emergency
 service in the given region.
 <p>
 This method accepts a string, rather than a PhoneNumber, because it needs to distinguish
 cases such as "+1 911" and "911", where the former may not connect to an emergency service in
 all cases but the latter would. This method takes into account cases where the number might
 contain formatting, or might have additional digits appended (when it is okay to do that in
 the specified region).
 @param number the phone number to test
 @param regionCode the region where the phone number is being dialed
 @return whether the number might be used to connect to an emergency service in the given region
 */
- (jboolean)connectsToEmergencyNumberWithNSString:(NSString *)number
                                     withNSString:(NSString *)regionCode;

/*!
 @brief Gets the expected cost category of a short number (however, nothing is implied about its
 validity).
 If the country calling code is unique to a region, this method behaves exactly the
 same as <code>getExpectedCostForRegion(PhoneNumber,String)</code>. However, if the country
 calling code is shared by multiple regions, then it returns the highest cost in the sequence
 PREMIUM_RATE, UNKNOWN_COST, STANDARD_RATE, TOLL_FREE. The reason for the position of
 UNKNOWN_COST in this order is that if a number is UNKNOWN_COST in one region but STANDARD_RATE
 or TOLL_FREE in another, its expected cost cannot be estimated as one of the latter since it
 might be a PREMIUM_RATE number.
 <p>
 For example, if a number is STANDARD_RATE in the US, but TOLL_FREE in Canada, the expected
 cost returned by this method will be STANDARD_RATE, since the NANPA countries share the same
 country calling code.
 <p>
 Note: If the region from which the number is dialed is known, it is highly preferable to call
 <code>getExpectedCostForRegion(PhoneNumber,String)</code> instead.
 @param number the short number for which we want to know the expected cost category
 @return the highest expected cost category of the short number in the region(s) with the given
 country calling code
 */
- (ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum *)getExpectedCostWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number;

/*!
 @brief Gets the expected cost category of a short number when dialed from a region (however, nothing
 is implied about its validity).
 If it is important that the number is valid, then its validity
 must first be checked using <code>isValidShortNumberForRegion</code>. Note that emergency numbers
 are always considered toll-free. Example usage:
 @code
 // The region for which the number was parsed and the region we subsequently check against
  // need not be the same. Here we parse the number in the US and check it for Canada.
  PhoneNumber number = phoneUtil.parse("110", "US");
  ...
  String regionCode = "CA";
  ShortNumberInfo shortInfo = ShortNumberInfo.getInstance();
  if (shortInfo.isValidShortNumberForRegion(shortNumber, regionCode)) 
   ShortNumberCost cost = shortInfo.getExpectedCostForRegion(number, regionCode);
   // Do something with the cost information here.
  
@endcode
 @param number the short number for which we want to know the expected cost category
 @param regionDialingFrom the region from which the number is dialed
 @return the expected cost category for that region of the short number. Returns UNKNOWN_COST if
 the number does not match a cost category. Note that an invalid number may match any cost
 category.
 */
- (ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum *)getExpectedCostForRegionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                                                                  withNSString:(NSString *)regionDialingFrom;

/*!
 @brief Gets the expected cost category of a short number when dialled from a region (however, nothing
 is implied about its validity).
 If it is important that the number is valid, then its validity
 must first be checked using <code>isValidShortNumberForRegion</code>. Note that emergency numbers
 are always considered toll-free. Example usage:
 @code
 ShortNumberInfo shortInfo = ShortNumberInfo.getInstance();
  String shortNumber = "110";
  String regionCode = "FR";
  if (shortInfo.isValidShortNumberForRegion(shortNumber, regionCode)) 
   ShortNumberInfo.ShortNumberCost cost = shortInfo.getExpectedCostForRegion(shortNumber,
       regionCode);
   // Do something with the cost information here.
  
@endcode
 @param shortNumber the short number for which we want to know the expected cost category,
 as a string
 @param regionDialingFrom the region from which the number is dialed
 @return the expected cost category for that region of the short number. Returns UNKNOWN_COST if
 the number does not match a cost category. Note that an invalid number may match any cost
 category.
 */
- (ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum *)getExpectedCostForRegionWithNSString:(NSString *)shortNumber
                                                                                          withNSString:(NSString *)regionDialingFrom;

/*!
 @brief Returns the singleton instance of the ShortNumberInfo.
 */
+ (ComGoogleI18nPhonenumbersShortNumberInfo *)getInstance;

/*!
 @brief Given a valid short number, determines whether it is carrier-specific (however, nothing is
 implied about its validity).
 If it is important that the number is valid, then its validity
 must first be checked using <code>isValidShortNumber</code> or
 <code>isValidShortNumberForRegion</code>.
 @param number the valid short number to check
 @return whether the short number is carrier-specific (assuming the input was a valid short
 number).
 */
- (jboolean)isCarrierSpecificWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number;

/*!
 @brief Returns true if the given number exactly matches an emergency service number in the given
 region.
 <p>
 This method takes into account cases where the number might contain formatting, but doesn't
 allow additional digits to be appended. Note that <code>isEmergencyNumber(number, region)</code>
 implies <code>connectsToEmergencyNumber(number, region)</code>.
 @param number the phone number to test
 @param regionCode the region where the phone number is being dialed
 @return whether the number exactly matches an emergency services number in the given region
 */
- (jboolean)isEmergencyNumberWithNSString:(NSString *)number
                             withNSString:(NSString *)regionCode;

/*!
 @brief Check whether a short number is a possible number.
 If a country calling code is shared by
 multiple regions, this returns true if it's possible in any of them. This provides a more
 lenient check than <code>isValidShortNumber</code>. See <code>isPossibleShortNumberForRegion(PhoneNumber,String)</code>
  for details.
 @param number the short number to check
 @return whether the number is a possible short number
 */
- (jboolean)isPossibleShortNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number;

/*!
 @brief Check whether a short number is a possible number when dialed from the given region.
 This
 provides a more lenient check than <code>isValidShortNumberForRegion</code>.
 @param number the short number to check
 @param regionDialingFrom the region from which the number is dialed
 @return whether the number is a possible short number
 */
- (jboolean)isPossibleShortNumberForRegionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                  withNSString:(NSString *)regionDialingFrom;

/*!
 @brief Check whether a short number is a possible number when dialled from a region, given the number
 in the form of a string, and the region where the number is dialed from.
 This provides a more
 lenient check than <code>isValidShortNumberForRegion</code>.
 @param shortNumber the short number to check as a string
 @param regionDialingFrom the region from which the number is dialed
 @return whether the number is a possible short number
 */
- (jboolean)isPossibleShortNumberForRegionWithNSString:(NSString *)shortNumber
                                          withNSString:(NSString *)regionDialingFrom;

/*!
 @brief Tests whether a short number matches a valid pattern.
 If a country calling code is shared by
 multiple regions, this returns true if it's valid in any of them. Note that this doesn't verify
 the number is actually in use, which is impossible to tell by just looking at the number
 itself. See <code>isValidShortNumberForRegion(PhoneNumber,String)</code> for details.
 @param number the short number for which we want to test the validity
 @return whether the short number matches a valid pattern
 */
- (jboolean)isValidShortNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number;

/*!
 @brief Tests whether a short number matches a valid pattern in a region.
 Note that this doesn't verify
 the number is actually in use, which is impossible to tell by just looking at the number
 itself.
 @param number the short number for which we want to test the validity
 @param regionDialingFrom the region from which the number is dialed
 @return whether the short number matches a valid pattern
 */
- (jboolean)isValidShortNumberForRegionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                               withNSString:(NSString *)regionDialingFrom;

/*!
 @brief Tests whether a short number matches a valid pattern in a region.
 Note that this doesn't verify
 the number is actually in use, which is impossible to tell by just looking at the number
 itself.
 @param shortNumber the short number to check as a string
 @param regionDialingFrom the region from which the number is dialed
 @return whether the short number matches a valid pattern
 */
- (jboolean)isValidShortNumberForRegionWithNSString:(NSString *)shortNumber
                                       withNSString:(NSString *)regionDialingFrom;

#pragma mark Package-Private

- (instancetype)initWithComGoogleI18nPhonenumbersInternalMatcherApi:(id<ComGoogleI18nPhonenumbersInternalMatcherApi>)matcherApi;

/*!
 @brief Gets a valid short number for the specified region.
 @param regionCode the region for which an example short number is needed
 @return a valid short number for the specified region. Returns an empty string when the
 metadata does not contain such information.
 */
- (NSString *)getExampleShortNumberWithNSString:(NSString *)regionCode;

/*!
 @brief Gets a valid short number for the specified cost category.
 @param regionCode the region for which an example short number is needed
 @param cost the cost category of number that is needed
 @return a valid short number for the specified region and cost category. Returns an empty
 string when the metadata does not contain such information, or the cost is UNKNOWN_COST.
 */
- (NSString *)getExampleShortNumberForCostWithNSString:(NSString *)regionCode
withComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum:(ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum *)cost;

/*!
 @brief Convenience method to get a list of what regions the library has metadata for.
 */
- (id<JavaUtilSet>)getSupportedRegions;

@end

J2OBJC_STATIC_INIT(ComGoogleI18nPhonenumbersShortNumberInfo)

FOUNDATION_EXPORT ComGoogleI18nPhonenumbersShortNumberInfo *ComGoogleI18nPhonenumbersShortNumberInfo_getInstance();

FOUNDATION_EXPORT void ComGoogleI18nPhonenumbersShortNumberInfo_initWithComGoogleI18nPhonenumbersInternalMatcherApi_(ComGoogleI18nPhonenumbersShortNumberInfo *self, id<ComGoogleI18nPhonenumbersInternalMatcherApi> matcherApi);

FOUNDATION_EXPORT ComGoogleI18nPhonenumbersShortNumberInfo *new_ComGoogleI18nPhonenumbersShortNumberInfo_initWithComGoogleI18nPhonenumbersInternalMatcherApi_(id<ComGoogleI18nPhonenumbersInternalMatcherApi> matcherApi) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleI18nPhonenumbersShortNumberInfo)

typedef NS_ENUM(NSUInteger, ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCost) {
  ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCost_TOLL_FREE = 0,
  ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCost_STANDARD_RATE = 1,
  ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCost_PREMIUM_RATE = 2,
  ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCost_UNKNOWN_COST = 3,
};

/*!
 @brief Cost categories of short numbers.
 */
@interface ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum : JavaLangEnum < NSCopying >

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_values();

+ (ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum *ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum)

FOUNDATION_EXPORT ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum *ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_values_[];

#define ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_TOLL_FREE ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_values_[ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCost_TOLL_FREE]
J2OBJC_ENUM_CONSTANT_GETTER(ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum, TOLL_FREE)

#define ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_STANDARD_RATE ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_values_[ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCost_STANDARD_RATE]
J2OBJC_ENUM_CONSTANT_GETTER(ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum, STANDARD_RATE)

#define ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_PREMIUM_RATE ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_values_[ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCost_PREMIUM_RATE]
J2OBJC_ENUM_CONSTANT_GETTER(ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum, PREMIUM_RATE)

#define ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_UNKNOWN_COST ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum_values_[ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCost_UNKNOWN_COST]
J2OBJC_ENUM_CONSTANT_GETTER(ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum, UNKNOWN_COST)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleI18nPhonenumbersShortNumberInfo_ShortNumberCostEnum)

#endif // _ComGoogleI18nPhonenumbersShortNumberInfo_H_
