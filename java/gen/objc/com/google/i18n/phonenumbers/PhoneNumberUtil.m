//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/libphonenumber/java/libphonenumber/src/main/java/com/google/i18n/phonenumbers/PhoneNumberUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/i18n/phonenumbers/AsYouTypeFormatter.h"
#include "com/google/i18n/phonenumbers/CountryCodeToRegionCodeMap.h"
#include "com/google/i18n/phonenumbers/MetadataLoader.h"
#include "com/google/i18n/phonenumbers/MetadataSource.h"
#include "com/google/i18n/phonenumbers/MultiFileMetadataSourceImpl.h"
#include "com/google/i18n/phonenumbers/NumberParseException.h"
#include "com/google/i18n/phonenumbers/PhoneNumberMatcher.h"
#include "com/google/i18n/phonenumbers/PhoneNumberUtil.h"
#include "com/google/i18n/phonenumbers/Phonenumber.h"
#include "com/google/i18n/phonenumbers/RegexCache.h"
#include "com/google/i18n/phonenumbers/nano/Phonemetadata.h"
#include "java/io/InputStream.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil () {
 @public
  id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource_;
  id<JavaUtilMap> countryCallingCodeToRegionCodeMap_;
  id<JavaUtilSet> nanpaRegions_;
  ComGoogleI18nPhonenumbersRegexCache *regexCache_;
  id<JavaUtilSet> supportedRegions_;
  id<JavaUtilSet> countryCodesForNonGeographicalRegion_;
}

/*!
 @brief Helper initialiser method to create the regular-expression pattern to match extensions,
 allowing the one-char extension symbols provided by <code>singleExtnSymbols</code>.
 */
+ (NSString *)createExtnPatternWithNSString:(NSString *)singleExtnSymbols;

/*!
 @brief Normalizes a string of characters representing a phone number by replacing all characters found
 in the accompanying map with the values therein, and stripping all other characters if
 removeNonMatches is true.
 @param number                     a string of characters representing a phone number
 @param normalizationReplacements  a mapping of characters to what they should be replaced by in
 the normalized version of the phone number
 @param removeNonMatches           indicates whether characters that are not able to be replaced
 should be stripped from the number. If this is false, they
 will be left unchanged in the number.
 @return the normalized string version of the phone number
 */
+ (NSString *)normalizeHelperWithNSString:(NSString *)number
                          withJavaUtilMap:(id<JavaUtilMap>)normalizationReplacements
                              withBoolean:(jboolean)removeNonMatches;

/*!
 @brief Helper function to check region code is not unknown or null.
 */
- (jboolean)isValidRegionCodeWithNSString:(NSString *)regionCode;

/*!
 @brief Helper function to check the country calling code is valid.
 */
- (jboolean)hasValidCountryCallingCodeWithInt:(jint)countryCallingCode;

- (ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)getMetadataForRegionOrCallingCodeWithInt:(jint)countryCallingCode
                                                                                          withNSString:(NSString *)regionCode;

- (jboolean)rawInputContainsNationalPrefixWithNSString:(NSString *)rawInput
                                          withNSString:(NSString *)nationalPrefix
                                          withNSString:(NSString *)regionCode;

/*!
 @brief Returns true if a number is from a region whose national significant number couldn't contain a
 leading zero, but has the italian_leading_zero field set to true.
 */
- (jboolean)hasUnexpectedItalianLeadingZeroWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number;

- (jboolean)hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number;

/*!
 @brief A helper function that is used by format and formatByPattern.
 */
- (void)prefixNumberWithCountryCallingCodeWithInt:(jint)countryCallingCode
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                        withJavaLangStringBuilder:(JavaLangStringBuilder *)formattedNumber;

- (NSString *)formatNsnWithNSString:(NSString *)number
withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)metadata
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat;

- (NSString *)formatNsnWithNSString:(NSString *)number
withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)metadata
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                       withNSString:(NSString *)carrierCode;

- (NSString *)formatNsnUsingPatternWithNSString:(NSString *)nationalNumber
withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)formattingPattern
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                                   withNSString:(NSString *)carrierCode;

/*!
 @brief Appends the formatted extension of a phone number to formattedNumber, if the phone number had
 an extension specified.
 */
- (void)maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                             withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)metadata
                           withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                                                                withJavaLangStringBuilder:(JavaLangStringBuilder *)formattedNumber;

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)getNumberTypeHelperWithNSString:(NSString *)nationalNumber
                                 withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)metadata;

- (NSString *)getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                      withJavaUtilList:(id<JavaUtilList>)regionCodes;

/*!
 @brief Returns the country calling code for a specific region.
 For example, this would be 1 for the
 United States, and 64 for New Zealand. Assumes the region is already valid.
 @param regionCode  the region that we want to get the country calling code for
 @return the country calling code for the region denoted by regionCode
 @throws IllegalArgumentException if the region is invalid
 */
- (jint)getCountryCodeForValidRegionWithNSString:(NSString *)regionCode;

/*!
 @brief Helper method to check a number against a particular pattern and determine whether it matches,
 or is too short or too long.
 Currently, if a number pattern suggests that numbers of length 7
 and 10 are possible, and a number in between these possible lengths is entered, such as of
 length 8, this will return TOO_LONG.
 */
- (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)testNumberLengthAgainstPatternWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)numberPattern
                                                                                                         withNSString:(NSString *)number;

/*!
 @brief Helper method to check whether a number is too short to be a regular length phone number in a
 region.
 */
- (jboolean)isShorterThanPossibleNormalNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)regionMetadata
                                                                                             withNSString:(NSString *)number;

/*!
 @brief Strips the IDD from the start of the number if present.
 Helper function used by
 maybeStripInternationalPrefixAndNormalize.
 */
- (jboolean)parsePrefixAsIddWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)iddPattern
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)number;

/*!
 @brief Checks to see that the region code used is valid, or if it is not valid, that the number to
 parse starts with a + symbol so that we can attempt to infer the region from the number.
 Returns false if it cannot use the region provided and the region cannot be inferred.
 */
- (jboolean)checkRegionForParsingWithNSString:(NSString *)numberToParse
                                 withNSString:(NSString *)defaultRegion;

/*!
 @brief Parses a string and fills up the phoneNumber.
 This method is the same as the public
 parse() method, with the exception that it allows the default region to be null, for use by
 isNumberMatch(). checkRegion should be set to false if it is permitted for the default region
 to be null or unknown ("ZZ").
 */
- (void)parseHelperWithNSString:(NSString *)numberToParse
                   withNSString:(NSString *)defaultRegion
                    withBoolean:(jboolean)keepRawInput
                    withBoolean:(jboolean)checkRegion
withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber;

/*!
 @brief Converts numberToParse to a form that we can parse and write it to nationalNumber if it is
 written in RFC3966; otherwise extract a possible number out of it and write to nationalNumber.
 */
- (void)buildNationalNumberForParsingWithNSString:(NSString *)numberToParse
                        withJavaLangStringBuilder:(JavaLangStringBuilder *)nationalNumber;

- (jboolean)isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)firstNumber
                                            withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)secondNumber;

@end

J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, metadataSource_, id<ComGoogleI18nPhonenumbersMetadataSource>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, countryCallingCodeToRegionCodeMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, nanpaRegions_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, regexCache_, ComGoogleI18nPhonenumbersRegexCache *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, supportedRegions_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, countryCodesForNonGeographicalRegion_, id<JavaUtilSet>)

inline JavaUtilLoggingLogger *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_logger();
static JavaUtilLoggingLogger *ComGoogleI18nPhonenumbersPhoneNumberUtil_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, logger, JavaUtilLoggingLogger *)

inline jint ComGoogleI18nPhonenumbersPhoneNumberUtil_get_MIN_LENGTH_FOR_NSN();
#define ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN 2
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberUtil, MIN_LENGTH_FOR_NSN, jint)

inline jint ComGoogleI18nPhonenumbersPhoneNumberUtil_get_MAX_INPUT_STRING_LENGTH();
#define ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_INPUT_STRING_LENGTH 250
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberUtil, MAX_INPUT_STRING_LENGTH, jint)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_UNKNOWN_REGION();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION = @"ZZ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, UNKNOWN_REGION, NSString *)

inline jint ComGoogleI18nPhonenumbersPhoneNumberUtil_get_NANPA_COUNTRY_CODE();
#define ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberUtil, NANPA_COUNTRY_CODE, jint)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX = @"3";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX, NSString *)

inline id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_MOBILE_TOKEN_MAPPINGS();
static id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_MOBILE_TOKEN_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, MOBILE_TOKEN_MAPPINGS, id<JavaUtilMap>)

inline jchar ComGoogleI18nPhonenumbersPhoneNumberUtil_get_STAR_SIGN();
#define ComGoogleI18nPhonenumbersPhoneNumberUtil_STAR_SIGN '*'
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberUtil, STAR_SIGN, jchar)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_RFC3966_EXTN_PREFIX();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_EXTN_PREFIX = @";ext=";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, RFC3966_EXTN_PREFIX, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_RFC3966_PREFIX();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PREFIX = @"tel:";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, RFC3966_PREFIX, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_RFC3966_PHONE_CONTEXT();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PHONE_CONTEXT = @";phone-context=";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, RFC3966_PHONE_CONTEXT, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_RFC3966_ISDN_SUBADDRESS();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_ISDN_SUBADDRESS = @";isub=";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, RFC3966_ISDN_SUBADDRESS, NSString *)

inline id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_DIALLABLE_CHAR_MAPPINGS();
static id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_DIALLABLE_CHAR_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, DIALLABLE_CHAR_MAPPINGS, id<JavaUtilMap>)

inline id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_ALPHA_MAPPINGS();
static id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, ALPHA_MAPPINGS, id<JavaUtilMap>)

inline id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_ALPHA_PHONE_MAPPINGS();
static id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_PHONE_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, ALPHA_PHONE_MAPPINGS, id<JavaUtilMap>)

inline id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_ALL_PLUS_NUMBER_GROUPING_SYMBOLS();
static id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_ALL_PLUS_NUMBER_GROUPING_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, ALL_PLUS_NUMBER_GROUPING_SYMBOLS, id<JavaUtilMap>)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_UNIQUE_INTERNATIONAL_PREFIX();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_UNIQUE_INTERNATIONAL_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, UNIQUE_INTERNATIONAL_PREFIX, JavaUtilRegexPattern *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_DIGITS();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS = @"\\p{Nd}";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, DIGITS, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_ALPHA();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_ALPHA, NSString *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_SEPARATOR_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_SEPARATOR_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, SEPARATOR_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_CAPTURING_DIGIT_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_DIGIT_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, CAPTURING_DIGIT_PATTERN, JavaUtilRegexPattern *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_START_CHAR();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR = @"[+\uff0b\\p{Nd}]";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_START_CHAR, NSString *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_START_CHAR_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_START_CHAR_PATTERN, JavaUtilRegexPattern *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_SECOND_NUMBER_START();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START = @"[\\\\/] *x";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, SECOND_NUMBER_START, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_UNWANTED_END_CHARS();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHARS = @"[[\\P{N}&&\\P{L}]&&[^#]]+$";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, UNWANTED_END_CHARS, NSString *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_ALPHA_PHONE_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA_PHONE_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_ALPHA_PHONE_PATTERN, JavaUtilRegexPattern *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_PHONE_NUMBER();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_PHONE_NUMBER, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_DEFAULT_EXTN_PREFIX();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_DEFAULT_EXTN_PREFIX = @" ext. ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, DEFAULT_EXTN_PREFIX, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_CAPTURING_EXTN_DIGITS();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_EXTN_DIGITS = @"(\\p{Nd}{1,7})";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, CAPTURING_EXTN_DIGITS, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_EXTN_PATTERNS_FOR_PARSING();
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_PARSING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, EXTN_PATTERNS_FOR_PARSING, NSString *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_EXTN_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, EXTN_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_PHONE_NUMBER_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_PHONE_NUMBER_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_FIRST_GROUP_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, FIRST_GROUP_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_NP_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_NP_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, NP_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_FG_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_FG_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, FG_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_CC_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_CC_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, CC_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_FIRST_GROUP_ONLY_PREFIX_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_ONLY_PREFIX_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, FIRST_GROUP_ONLY_PREFIX_PATTERN, JavaUtilRegexPattern *)

inline ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_instance();
inline ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_set_instance(ComGoogleI18nPhonenumbersPhoneNumberUtil *value);
static ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_instance;
J2OBJC_STATIC_FIELD_OBJ(ComGoogleI18nPhonenumbersPhoneNumberUtil, instance, ComGoogleI18nPhonenumbersPhoneNumberUtil *)

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_createExtnPatternWithNSString_(NSString *singleExtnSymbols);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithNSString_withJavaUtilMap_withBoolean_(NSString *number, id<JavaUtilMap> normalizationReplacements, jboolean removeNonMatches);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *regionCode);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode);

__attribute__((unused)) static ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode, NSString *regionCode);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_rawInputContainsNationalPrefixWithNSString_withNSString_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *rawInput, NSString *nationalPrefix, NSString *regionCode);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_hasUnexpectedItalianLeadingZeroWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, JavaLangStringBuilder *formattedNumber);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *number, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *number, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, NSString *carrierCode);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnUsingPatternWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *nationalNumber, ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formattingPattern, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, NSString *carrierCode);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, JavaLangStringBuilder *formattedNumber);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *nationalNumber, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilList_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, id<JavaUtilList> regionCodes);

__attribute__((unused)) static jint ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *regionCode);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthAgainstPatternWithJavaUtilRegexPattern_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, JavaUtilRegexPattern *numberPattern, NSString *number);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isShorterThanPossibleNormalNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *regionMetadata, NSString *number);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_parsePrefixAsIddWithJavaUtilRegexPattern_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, JavaUtilRegexPattern *iddPattern, JavaLangStringBuilder *number);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_checkRegionForParsingWithNSString_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *numberToParse, NSString *defaultRegion);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithNSString_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *numberToParse, NSString *defaultRegion, jboolean keepRawInput, jboolean checkRegion, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_buildNationalNumberForParsingWithNSString_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *numberToParse, JavaLangStringBuilder *nationalNumber);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *firstNumber, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumber);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *self, NSString *__name, jint __ordinal);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1 : ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency < NSCopying >

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                          withNSString:(NSString *)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1 *self, NSString *__name, jint __ordinal);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2 : ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency < NSCopying >

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                          withNSString:(NSString *)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2 *self, NSString *__name, jint __ordinal);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3 : ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency < NSCopying >

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                          withNSString:(NSString *)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3 *self, NSString *__name, jint __ordinal);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1 : NSObject < ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker >

- (jboolean)checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
               withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                          withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                  withNSStringArray:(IOSObjectArray *)expectedNumberGroups;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1_init(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1 *self);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1_init();

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4 : ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency < NSCopying >

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                          withNSString:(NSString *)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4 *self, NSString *__name, jint __ordinal);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1 : NSObject < ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker >

- (jboolean)checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
               withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                          withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                  withNSStringArray:(IOSObjectArray *)expectedNumberGroups;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1_init(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1 *self);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1_init();

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_$1 : NSObject < ComGoogleI18nPhonenumbersMetadataLoader >

- (JavaIoInputStream *)loadMetadataWithNSString:(NSString *)metadataFileName;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_$1)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_$1_init(ComGoogleI18nPhonenumbersPhoneNumberUtil_$1 *self);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_$1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_$1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_$1_init();

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_$2 : NSObject < JavaLangIterable > {
 @public
  ComGoogleI18nPhonenumbersPhoneNumberUtil *this$0_;
  id<JavaLangCharSequence> val$text_;
  NSString *val$defaultRegion_;
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *val$leniency_;
  jlong val$maxTries_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)outer$
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)capture$0
                                                    withNSString:(NSString *)capture$1
           withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)capture$2
                                                        withLong:(jlong)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_$2)

J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil_$2, this$0_, ComGoogleI18nPhonenumbersPhoneNumberUtil *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil_$2, val$text_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil_$2, val$defaultRegion_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil_$2, val$leniency_, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_$2_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil_$2 *self, ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_$2 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_$2_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_$2 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_$2_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3);

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil)

id<ComGoogleI18nPhonenumbersMetadataLoader> ComGoogleI18nPhonenumbersPhoneNumberUtil_DEFAULT_METADATA_LOADER;
NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION = @"-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e";
NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS = @"+\uff0b";
JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN;
JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START_PATTERN;
JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHAR_PATTERN;
NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_MATCHING;
JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_NON_DIGITS_PATTERN;
NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY = @"001";

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil

+ (NSString *)createExtnPatternWithNSString:(NSString *)singleExtnSymbols {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_createExtnPatternWithNSString_(singleExtnSymbols);
}

- (instancetype)initWithComGoogleI18nPhonenumbersMetadataSource:(id<ComGoogleI18nPhonenumbersMetadataSource>)metadataSource
                                                withJavaUtilMap:(id<JavaUtilMap>)countryCallingCodeToRegionCodeMap {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_(self, metadataSource, countryCallingCodeToRegionCodeMap);
  return self;
}

+ (ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)copyNumberFormatWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)other {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_copyNumberFormatWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(other);
}

+ (NSString *)extractPossibleNumberWithNSString:(NSString *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_extractPossibleNumberWithNSString_(number);
}

+ (jboolean)isViablePhoneNumberWithNSString:(NSString *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_isViablePhoneNumberWithNSString_(number);
}

+ (NSString *)normalizeWithNSString:(NSString *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithNSString_(number);
}

+ (void)normalizeWithJavaLangStringBuilder:(JavaLangStringBuilder *)number {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithJavaLangStringBuilder_(number);
}

+ (NSString *)normalizeDigitsOnlyWithNSString:(NSString *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_(number);
}

+ (JavaLangStringBuilder *)normalizeDigitsWithNSString:(NSString *)number
                                           withBoolean:(jboolean)keepNonDigits {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsWithNSString_withBoolean_(number, keepNonDigits);
}

+ (NSString *)normalizeDiallableCharsOnlyWithNSString:(NSString *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDiallableCharsOnlyWithNSString_(number);
}

+ (NSString *)convertAlphaCharactersInNumberWithNSString:(NSString *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_convertAlphaCharactersInNumberWithNSString_(number);
}

- (jint)getLengthOfGeographicalAreaCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:[self getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number]];
  if (metadata == nil) {
    return 0;
  }
  if ([((NSString *) nil_chk(metadata->nationalPrefix_)) isEqual:@""] && ![((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) isItalianLeadingZero]) {
    return 0;
  }
  if (![self isNumberGeographicalWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number]) {
    return 0;
  }
  return [self getLengthOfNationalDestinationCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
}

- (jint)getLengthOfNationalDestinationCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *copiedProto;
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) hasExtension]) {
    copiedProto = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
    [copiedProto mergeFromWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
    [copiedProto clearExtension];
  }
  else {
    copiedProto = number;
  }
  NSString *nationalSignificantNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:copiedProto withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)];
  IOSObjectArray *numberGroups = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_NON_DIGITS_PATTERN)) splitWithJavaLangCharSequence:nationalSignificantNumber];
  if (((IOSObjectArray *) nil_chk(numberGroups))->size_ <= 3) {
    return 0;
  }
  if ([self getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number] == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE)) {
    NSString *mobileToken = ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryMobileTokenWithInt_([number getCountryCode]);
    if (![((NSString *) nil_chk(mobileToken)) isEqual:@""]) {
      return ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(numberGroups, 2))) length]) + ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(numberGroups, 3))) length]);
    }
  }
  return ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(numberGroups, 2))) length]);
}

+ (NSString *)getCountryMobileTokenWithInt:(jint)countryCallingCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryMobileTokenWithInt_(countryCallingCode);
}

+ (NSString *)normalizeHelperWithNSString:(NSString *)number
                          withJavaUtilMap:(id<JavaUtilMap>)normalizationReplacements
                              withBoolean:(jboolean)removeNonMatches {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithNSString_withJavaUtilMap_withBoolean_(number, normalizationReplacements, removeNonMatches);
}

+ (void)setInstanceWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_setInstanceWithComGoogleI18nPhonenumbersPhoneNumberUtil_(util);
}

- (id<JavaUtilSet>)getSupportedRegions {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(supportedRegions_);
}

- (id<JavaUtilSet>)getSupportedGlobalNetworkCallingCodes {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(countryCodesForNonGeographicalRegion_);
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil *)getInstance {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getInstance();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil *)createInstanceWithComGoogleI18nPhonenumbersMetadataSource:(id<ComGoogleI18nPhonenumbersMetadataSource>)metadataSource {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataSource_(metadataSource);
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil *)createInstanceWithComGoogleI18nPhonenumbersMetadataLoader:(id<ComGoogleI18nPhonenumbersMetadataLoader>)metadataLoader {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataLoader_(metadataLoader);
}

+ (jboolean)formattingRuleHasFirstGroupOnlyWithNSString:(NSString *)nationalPrefixFormattingRule {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formattingRuleHasFirstGroupOnlyWithNSString_(nationalPrefixFormattingRule);
}

- (jboolean)isNumberGeographicalWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *numberType = [self getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:phoneNumber];
  return numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE) || numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE);
}

- (jboolean)isValidRegionCodeWithNSString:(NSString *)regionCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCode);
}

- (jboolean)hasValidCountryCallingCodeWithInt:(jint)countryCallingCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode);
}

- (NSString *)formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
          withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat {
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getNationalNumber] == 0 && [number hasRawInput]) {
    NSString *rawInput = [number getRawInput];
    if (((jint) [((NSString *) nil_chk(rawInput)) length]) > 0) {
      return rawInput;
    }
  }
  JavaLangStringBuilder *formattedNumber = create_JavaLangStringBuilder_initWithInt_(20);
  [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:numberFormat withJavaLangStringBuilder:formattedNumber];
  return [formattedNumber description];
}

- (void)formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
    withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                                         withJavaLangStringBuilder:(JavaLangStringBuilder *)formattedNumber {
  [((JavaLangStringBuilder *) nil_chk(formattedNumber)) setLengthWithInt:0];
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, E164)) {
    [formattedNumber appendWithNSString:nationalSignificantNumber];
    ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, E164), formattedNumber);
    return;
  }
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode)) {
    [formattedNumber appendWithNSString:nationalSignificantNumber];
    return;
  }
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, regionCode);
  [formattedNumber appendWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_(self, nationalSignificantNumber, metadata, numberFormat)];
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadata, numberFormat, formattedNumber);
  ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, numberFormat, formattedNumber);
}

- (NSString *)formatByPatternWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                   withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                                                                 withJavaUtilList:(id<JavaUtilList>)userDefinedFormats {
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode)) {
    return nationalSignificantNumber;
  }
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, regionCode);
  JavaLangStringBuilder *formattedNumber = create_JavaLangStringBuilder_initWithInt_(20);
  ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formattingPattern = [self chooseFormattingPatternForNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormatArray:[((id<JavaUtilList>) nil_chk(userDefinedFormats)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[userDefinedFormats size] type:ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_class_()]] withNSString:nationalSignificantNumber];
  if (formattingPattern == nil) {
    [formattedNumber appendWithNSString:nationalSignificantNumber];
  }
  else {
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *numFormatCopy = ComGoogleI18nPhonenumbersPhoneNumberUtil_copyNumberFormatWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(formattingPattern);
    NSString *nationalPrefixFormattingRule = formattingPattern->nationalPrefixFormattingRule_;
    if (((jint) [((NSString *) nil_chk(nationalPrefixFormattingRule)) length]) > 0) {
      NSString *nationalPrefix = ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->nationalPrefix_;
      if (((jint) [((NSString *) nil_chk(nationalPrefix)) length]) > 0) {
        nationalPrefixFormattingRule = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_NP_PATTERN)) matcherWithJavaLangCharSequence:nationalPrefixFormattingRule])) replaceFirstWithNSString:nationalPrefix];
        nationalPrefixFormattingRule = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_FG_PATTERN)) matcherWithJavaLangCharSequence:nationalPrefixFormattingRule])) replaceFirstWithNSString:@"\\$1"];
        JreStrongAssign(&((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(numFormatCopy))->nationalPrefixFormattingRule_, nationalPrefixFormattingRule);
      }
      else {
        JreStrongAssign(&((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(numFormatCopy))->nationalPrefixFormattingRule_, @"");
      }
    }
    [formattedNumber appendWithNSString:[self formatNsnUsingPatternWithNSString:nationalSignificantNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:numFormatCopy withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:numberFormat]];
  }
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadata, numberFormat, formattedNumber);
  ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, numberFormat, formattedNumber);
  return [formattedNumber description];
}

- (NSString *)formatNationalNumberWithCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                         withNSString:(NSString *)carrierCode {
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode)) {
    return nationalSignificantNumber;
  }
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, regionCode);
  JavaLangStringBuilder *formattedNumber = create_JavaLangStringBuilder_initWithInt_(20);
  [formattedNumber appendWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withNSString_(self, nationalSignificantNumber, metadata, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL), carrierCode)];
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadata, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL), formattedNumber);
  ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL), formattedNumber);
  return [formattedNumber description];
}

- (ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)getMetadataForRegionOrCallingCodeWithInt:(jint)countryCallingCode
                                                                                          withNSString:(NSString *)regionCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, regionCode);
}

- (NSString *)formatNationalNumberWithPreferredCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                                  withNSString:(NSString *)fallbackCarrierCode {
  return [self formatNationalNumberWithCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) hasPreferredDomesticCarrierCode] ? [number getPreferredDomesticCarrierCode] : fallbackCarrierCode];
}

- (NSString *)formatNumberForMobileDialingWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                  withNSString:(NSString *)regionCallingFrom
                                                                                   withBoolean:(jboolean)withFormatting {
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode)) {
    return [number hasRawInput] ? [number getRawInput] : @"";
  }
  NSString *formattedNumber = @"";
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *numberNoExt = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk([create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init() mergeFromWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number])) clearExtension];
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *numberType = [self getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt];
  jboolean isValidNumber = (numberType != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN));
  if ([((NSString *) nil_chk(regionCallingFrom)) isEqual:regionCode]) {
    jboolean isFixedLineOrMobile = (numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE)) || (numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE)) || (numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE));
    if ([((NSString *) nil_chk(regionCode)) isEqual:@"CO"] && numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE)) {
      formattedNumber = [self formatNationalNumberWithCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX];
    }
    else if ([regionCode isEqual:@"BR"] && isFixedLineOrMobile) {
      formattedNumber = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(numberNoExt)) hasPreferredDomesticCarrierCode] ? formattedNumber = [self formatNationalNumberWithPreferredCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withNSString:@""] : @"";
    }
    else if (isValidNumber && [regionCode isEqual:@"HU"]) {
      formattedNumber = JreStrcat("$C$", [self getNddPrefixForRegionWithNSString:regionCode withBoolean:true], ' ', [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)]);
    }
    else if (countryCallingCode == ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE) {
      ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *regionMetadata = [self getMetadataForRegionWithNSString:regionCallingFrom];
      if ([self canBeInternationallyDialledWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt] && !ComGoogleI18nPhonenumbersPhoneNumberUtil_isShorterThanPossibleNormalNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withNSString_(self, regionMetadata, [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt])) {
        formattedNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)];
      }
      else {
        formattedNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
      }
    }
    else {
      if (([regionCode isEqual:ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY] || (([regionCode isEqual:@"MX"] || [regionCode isEqual:@"CL"]) && isFixedLineOrMobile)) && [self canBeInternationallyDialledWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt]) {
        formattedNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)];
      }
      else {
        formattedNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
      }
    }
  }
  else if (isValidNumber && [self canBeInternationallyDialledWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt]) {
    return withFormatting ? [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)] : [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, E164)];
  }
  return withFormatting ? formattedNumber : ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDiallableCharsOnlyWithNSString_(formattedNumber);
}

- (NSString *)formatOutOfCountryCallingNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                     withNSString:(NSString *)regionCallingFrom {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCallingFrom)) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$$", @"Trying to format number from invalid region ", regionCallingFrom, @". International formatting applied.")];
    return [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)];
  }
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode)) {
    return nationalSignificantNumber;
  }
  if (countryCallingCode == ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE) {
    if ([self isNANPACountryWithNSString:regionCallingFrom]) {
      return JreStrcat("IC$", countryCallingCode, ' ', [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)]);
    }
  }
  else if (countryCallingCode == ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(self, regionCallingFrom)) {
    return [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
  }
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadataForRegionCallingFrom = [self getMetadataForRegionWithNSString:regionCallingFrom];
  NSString *internationalPrefix = ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadataForRegionCallingFrom))->internationalPrefix_;
  NSString *internationalPrefixForFormatting = @"";
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_UNIQUE_INTERNATIONAL_PREFIX)) matcherWithJavaLangCharSequence:internationalPrefix])) matches]) {
    internationalPrefixForFormatting = internationalPrefix;
  }
  else if (![((NSString *) nil_chk(metadataForRegionCallingFrom->preferredInternationalPrefix_)) isEqual:@""]) {
    internationalPrefixForFormatting = metadataForRegionCallingFrom->preferredInternationalPrefix_;
  }
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadataForRegion = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, regionCode);
  NSString *formattedNationalNumber = ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_(self, nationalSignificantNumber, metadataForRegion, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL));
  JavaLangStringBuilder *formattedNumber = create_JavaLangStringBuilder_initWithNSString_(formattedNationalNumber);
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadataForRegion, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL), formattedNumber);
  if (((jint) [((NSString *) nil_chk(internationalPrefixForFormatting)) length]) > 0) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([formattedNumber insertWithInt:0 withNSString:@" "])) insertWithInt:0 withInt:countryCallingCode])) insertWithInt:0 withNSString:@" "])) insertWithInt:0 withNSString:internationalPrefixForFormatting];
  }
  else {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL), formattedNumber);
  }
  return [formattedNumber description];
}

- (NSString *)formatInOriginalFormatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                            withNSString:(NSString *)regionCallingFrom {
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) hasRawInput] && (ComGoogleI18nPhonenumbersPhoneNumberUtil_hasUnexpectedItalianLeadingZeroWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, number) || !ComGoogleI18nPhonenumbersPhoneNumberUtil_hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, number))) {
    return [number getRawInput];
  }
  if (![number hasCountryCodeSource]) {
    return [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
  }
  NSString *formattedNumber;
  {
    NSString *regionCode;
    NSString *nationalPrefix;
    NSString *nationalFormat;
    ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata;
    NSString *nationalNumber;
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formatRule;
    NSString *candidateNationalPrefixRule;
    jint indexOfFirstGroup;
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *numFormatCopy;
    id<JavaUtilList> numberFormats;
    switch ([[number getCountryCodeSource] ordinal]) {
      case ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource_Enum_FROM_NUMBER_WITH_PLUS_SIGN:
      formattedNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)];
      break;
      case ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource_Enum_FROM_NUMBER_WITH_IDD:
      formattedNumber = [self formatOutOfCountryCallingNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:regionCallingFrom];
      break;
      case ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource_Enum_FROM_NUMBER_WITHOUT_PLUS_SIGN:
      formattedNumber = [((NSString *) nil_chk([self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)])) substring:1];
      break;
      case ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource_Enum_FROM_DEFAULT_COUNTRY:
      default:
      regionCode = [self getRegionCodeForCountryCodeWithInt:[number getCountryCode]];
      nationalPrefix = [self getNddPrefixForRegionWithNSString:regionCode withBoolean:true];
      nationalFormat = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
      if (nationalPrefix == nil || ((jint) [nationalPrefix length]) == 0) {
        formattedNumber = nationalFormat;
        break;
      }
      if (ComGoogleI18nPhonenumbersPhoneNumberUtil_rawInputContainsNationalPrefixWithNSString_withNSString_withNSString_(self, [number getRawInput], nationalPrefix, regionCode)) {
        formattedNumber = nationalFormat;
        break;
      }
      metadata = [self getMetadataForRegionWithNSString:regionCode];
      nationalNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
      formatRule = [self chooseFormattingPatternForNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormatArray:((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->numberFormat_ withNSString:nationalNumber];
      if (formatRule == nil) {
        formattedNumber = nationalFormat;
        break;
      }
      candidateNationalPrefixRule = formatRule->nationalPrefixFormattingRule_;
      indexOfFirstGroup = [((NSString *) nil_chk(candidateNationalPrefixRule)) indexOfString:@"$1"];
      if (indexOfFirstGroup <= 0) {
        formattedNumber = nationalFormat;
        break;
      }
      candidateNationalPrefixRule = [candidateNationalPrefixRule substring:0 endIndex:indexOfFirstGroup];
      candidateNationalPrefixRule = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_(candidateNationalPrefixRule);
      if (((jint) [((NSString *) nil_chk(candidateNationalPrefixRule)) length]) == 0) {
        formattedNumber = nationalFormat;
        break;
      }
      numFormatCopy = ComGoogleI18nPhonenumbersPhoneNumberUtil_copyNumberFormatWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(formatRule);
      JreStrongAssign(&((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(numFormatCopy))->nationalPrefixFormattingRule_, @"");
      numberFormats = create_JavaUtilArrayList_initWithInt_(1);
      [numberFormats addWithId:numFormatCopy];
      formattedNumber = [self formatByPatternWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL) withJavaUtilList:numberFormats];
      break;
    }
  }
  NSString *rawInput = [number getRawInput];
  if (formattedNumber != nil && ((jint) [((NSString *) nil_chk(rawInput)) length]) > 0) {
    NSString *normalizedFormattedNumber = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDiallableCharsOnlyWithNSString_(formattedNumber);
    NSString *normalizedRawInput = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDiallableCharsOnlyWithNSString_(rawInput);
    if (![((NSString *) nil_chk(normalizedFormattedNumber)) isEqual:normalizedRawInput]) {
      formattedNumber = rawInput;
    }
  }
  return formattedNumber;
}

- (jboolean)rawInputContainsNationalPrefixWithNSString:(NSString *)rawInput
                                          withNSString:(NSString *)nationalPrefix
                                          withNSString:(NSString *)regionCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_rawInputContainsNationalPrefixWithNSString_withNSString_withNSString_(self, rawInput, nationalPrefix, regionCode);
}

- (jboolean)hasUnexpectedItalianLeadingZeroWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_hasUnexpectedItalianLeadingZeroWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, number);
}

- (jboolean)hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, number);
}

- (NSString *)formatOutOfCountryKeepingAlphaCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                         withNSString:(NSString *)regionCallingFrom {
  NSString *rawInput = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getRawInput];
  if (((jint) [((NSString *) nil_chk(rawInput)) length]) == 0) {
    return [self formatOutOfCountryCallingNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:regionCallingFrom];
  }
  jint countryCode = [number getCountryCode];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCode)) {
    return rawInput;
  }
  rawInput = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithNSString_withJavaUtilMap_withBoolean_(rawInput, ComGoogleI18nPhonenumbersPhoneNumberUtil_ALL_PLUS_NUMBER_GROUPING_SYMBOLS, true);
  NSString *nationalNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (((jint) [((NSString *) nil_chk(nationalNumber)) length]) > 3) {
    jint firstNationalNumberDigit = [((NSString *) nil_chk(rawInput)) indexOfString:[nationalNumber substring:0 endIndex:3]];
    if (firstNationalNumberDigit != -1) {
      rawInput = [rawInput substring:firstNationalNumberDigit];
    }
  }
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadataForRegionCallingFrom = [self getMetadataForRegionWithNSString:regionCallingFrom];
  if (countryCode == ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE) {
    if ([self isNANPACountryWithNSString:regionCallingFrom]) {
      return JreStrcat("IC$", countryCode, ' ', rawInput);
    }
  }
  else if (metadataForRegionCallingFrom != nil && countryCode == ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(self, regionCallingFrom)) {
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formattingPattern = [self chooseFormattingPatternForNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormatArray:metadataForRegionCallingFrom->numberFormat_ withNSString:nationalNumber];
    if (formattingPattern == nil) {
      return rawInput;
    }
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *newFormat = ComGoogleI18nPhonenumbersPhoneNumberUtil_copyNumberFormatWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(formattingPattern);
    JreStrongAssign(&((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(newFormat))->pattern_, @"(\\d+)(.*)");
    JreStrongAssign(&newFormat->format_, @"$1$2");
    return [self formatNsnUsingPatternWithNSString:rawInput withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:newFormat withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
  }
  NSString *internationalPrefixForFormatting = @"";
  if (metadataForRegionCallingFrom != nil) {
    NSString *internationalPrefix = metadataForRegionCallingFrom->internationalPrefix_;
    internationalPrefixForFormatting = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_UNIQUE_INTERNATIONAL_PREFIX)) matcherWithJavaLangCharSequence:internationalPrefix])) matches] ? internationalPrefix : metadataForRegionCallingFrom->preferredInternationalPrefix_;
  }
  JavaLangStringBuilder *formattedNumber = create_JavaLangStringBuilder_initWithNSString_(rawInput);
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCode];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadataForRegion = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCode, regionCode);
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadataForRegion, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL), formattedNumber);
  if (((jint) [internationalPrefixForFormatting length]) > 0) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([formattedNumber insertWithInt:0 withNSString:@" "])) insertWithInt:0 withInt:countryCode])) insertWithInt:0 withNSString:@" "])) insertWithInt:0 withNSString:internationalPrefixForFormatting];
  }
  else {
    if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCallingFrom)) {
      [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$$", @"Trying to format number from invalid region ", regionCallingFrom, @". International formatting applied.")];
    }
    ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCode, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL), formattedNumber);
  }
  return [formattedNumber description];
}

- (NSString *)getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  JavaLangStringBuilder *nationalNumber = create_JavaLangStringBuilder_init();
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) isItalianLeadingZero]) {
    IOSCharArray *zeros = [IOSCharArray arrayWithLength:[number getNumberOfLeadingZeros]];
    JavaUtilArrays_fillWithCharArray_withChar_(zeros, '0');
    [nationalNumber appendWithNSString:[NSString stringWithCharacters:zeros]];
  }
  [nationalNumber appendWithLong:[number getNationalNumber]];
  return [nationalNumber description];
}

- (void)prefixNumberWithCountryCallingCodeWithInt:(jint)countryCallingCode
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                        withJavaLangStringBuilder:(JavaLangStringBuilder *)formattedNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, numberFormat, formattedNumber);
}

- (NSString *)formatNsnWithNSString:(NSString *)number
withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)metadata
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_(self, number, metadata, numberFormat);
}

- (NSString *)formatNsnWithNSString:(NSString *)number
withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)metadata
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                       withNSString:(NSString *)carrierCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withNSString_(self, number, metadata, numberFormat, carrierCode);
}

- (ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)chooseFormattingPatternForNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormatArray:(IOSObjectArray *)availableFormats
                                                                                                                                                 withNSString:(NSString *)nationalNumber {
  {
    IOSObjectArray *a__ = availableFormats;
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *numFormat = *b__++;
      jint size = ((IOSObjectArray *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(numFormat))->leadingDigitsPattern_))->size_;
      if (size == 0 || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:IOSObjectArray_Get(numFormat->leadingDigitsPattern_, size - 1)])) matcherWithJavaLangCharSequence:nationalNumber])) lookingAt]) {
        JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:numFormat->pattern_])) matcherWithJavaLangCharSequence:nationalNumber];
        if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
          return numFormat;
        }
      }
    }
  }
  return nil;
}

- (NSString *)formatNsnUsingPatternWithNSString:(NSString *)nationalNumber
withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)formattingPattern
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnUsingPatternWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withNSString_(self, nationalNumber, formattingPattern, numberFormat, nil);
}

- (NSString *)formatNsnUsingPatternWithNSString:(NSString *)nationalNumber
withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)formattingPattern
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                                   withNSString:(NSString *)carrierCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnUsingPatternWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withNSString_(self, nationalNumber, formattingPattern, numberFormat, carrierCode);
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)getExampleNumberWithNSString:(NSString *)regionCode {
  return [self getExampleNumberForTypeWithNSString:regionCode withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE)];
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)getExampleNumberForTypeWithNSString:(NSString *)regionCode
                             withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)type {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCode)) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", @"Invalid or unknown region code provided: ", regionCode)];
    return nil;
  }
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *desc = [self getNumberDescByTypeWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:[self getMetadataForRegionWithNSString:regionCode] withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:type];
  @try {
    if (![((NSString *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *) nil_chk(desc))->exampleNumber_)) isEqual:@""]) {
      return [self parseWithNSString:desc->exampleNumber_ withNSString:regionCode];
    }
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:[((ComGoogleI18nPhonenumbersNumberParseException *) nil_chk(e)) description]];
  }
  return nil;
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)getExampleNumberForNonGeoEntityWithInt:(jint)countryCallingCode {
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = [self getMetadataForNonGeographicalRegionWithInt:countryCallingCode];
  if (metadata != nil) {
    ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *desc = metadata->generalDesc_;
    @try {
      if (![((NSString *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *) nil_chk(desc))->exampleNumber_)) isEqual:@""]) {
        return [self parseWithNSString:JreStrcat("CI$", '+', countryCallingCode, desc->exampleNumber_) withNSString:@"ZZ"];
      }
    }
    @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:[((ComGoogleI18nPhonenumbersNumberParseException *) nil_chk(e)) description]];
    }
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$I", @"Invalid or unknown country calling code provided: ", countryCallingCode)];
  }
  return nil;
}

- (void)maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                             withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)metadata
                           withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                                                                withJavaLangStringBuilder:(JavaLangStringBuilder *)formattedNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadata, numberFormat, formattedNumber);
}

- (ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *)getNumberDescByTypeWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)metadata
                                                                                   withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)type {
  switch ([type ordinal]) {
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_PREMIUM_RATE:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->premiumRate_;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_TOLL_FREE:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->tollFree_;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_MOBILE:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->mobile_;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_FIXED_LINE:
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_FIXED_LINE_OR_MOBILE:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->fixedLine_;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_SHARED_COST:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->sharedCost_;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_VOIP:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->voip_;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_PERSONAL_NUMBER:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->personalNumber_;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_PAGER:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->pager_;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_UAN:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->uan_;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_VOICEMAIL:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->voicemail_;
    default:
    return ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->generalDesc_;
  }
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  NSString *regionCode = [self getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode], regionCode);
  if (metadata == nil) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN);
  }
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_(self, nationalSignificantNumber, metadata);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)getNumberTypeHelperWithNSString:(NSString *)nationalNumber
                                 withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)metadata {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_(self, nationalNumber, metadata);
}

- (ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)getMetadataForRegionWithNSString:(NSString *)regionCode {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCode)) {
    return nil;
  }
  return [((id<ComGoogleI18nPhonenumbersMetadataSource>) nil_chk(metadataSource_)) getMetadataForRegionWithNSString:regionCode];
}

- (ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)getMetadataForNonGeographicalRegionWithInt:(jint)countryCallingCode {
  if (![((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)]) {
    return nil;
  }
  return [((id<ComGoogleI18nPhonenumbersMetadataSource>) nil_chk(metadataSource_)) getMetadataForNonGeographicalRegionWithInt:countryCallingCode];
}

- (jboolean)isNumberPossibleForDescWithNSString:(NSString *)nationalNumber
withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *)numberDesc {
  JavaUtilRegexMatcher *possibleNumberPatternMatcher = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *) nil_chk(numberDesc))->possibleNumberPattern_])) matcherWithJavaLangCharSequence:nationalNumber];
  return [((JavaUtilRegexMatcher *) nil_chk(possibleNumberPatternMatcher)) matches];
}

- (jboolean)isNumberMatchingDescWithNSString:(NSString *)nationalNumber
withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *)numberDesc {
  JavaUtilRegexMatcher *nationalNumberPatternMatcher = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *) nil_chk(numberDesc))->nationalNumberPattern_])) matcherWithJavaLangCharSequence:nationalNumber];
  return [self isNumberPossibleForDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:numberDesc] && [((JavaUtilRegexMatcher *) nil_chk(nationalNumberPatternMatcher)) matches];
}

- (jboolean)isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  NSString *regionCode = [self getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  return [self isValidNumberForRegionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:regionCode];
}

- (jboolean)isValidNumberForRegionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                          withNSString:(NSString *)regionCode {
  jint countryCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCode, regionCode);
  if ((metadata == nil) || (![((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY)) isEqual:regionCode] && countryCode != ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(self, regionCode))) {
    return false;
  }
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_(self, nationalSignificantNumber, metadata) != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN);
}

- (NSString *)getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  jint countryCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  id<JavaUtilList> regions = [((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) getWithId:JavaLangInteger_valueOfWithInt_(countryCode)];
  if (regions == nil) {
    NSString *numberString = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:JreStrcat("$I$$", @"Missing/invalid country_code (", countryCode, @") for number ", numberString)];
    return nil;
  }
  if ([regions size] == 1) {
    return [regions getWithInt:0];
  }
  else {
    return ComGoogleI18nPhonenumbersPhoneNumberUtil_getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilList_(self, number, regions);
  }
}

- (NSString *)getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                      withJavaUtilList:(id<JavaUtilList>)regionCodes {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilList_(self, number, regionCodes);
}

- (NSString *)getRegionCodeForCountryCodeWithInt:(jint)countryCallingCode {
  id<JavaUtilList> regionCodes = [((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) getWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)];
  return regionCodes == nil ? ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION : [regionCodes getWithInt:0];
}

- (id<JavaUtilList>)getRegionCodesForCountryCodeWithInt:(jint)countryCallingCode {
  id<JavaUtilList> regionCodes = [((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) getWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)];
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(regionCodes == nil ? create_JavaUtilArrayList_initWithInt_(0) : (id) regionCodes);
}

- (jint)getCountryCodeForRegionWithNSString:(NSString *)regionCode {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCode)) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$$", @"Invalid or missing region code (", ((regionCode == nil) ? @"null" : regionCode), @") provided.")];
    return 0;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(self, regionCode);
}

- (jint)getCountryCodeForValidRegionWithNSString:(NSString *)regionCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(self, regionCode);
}

- (NSString *)getNddPrefixForRegionWithNSString:(NSString *)regionCode
                                    withBoolean:(jboolean)stripNonDigits {
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:regionCode];
  if (metadata == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$$", @"Invalid or missing region code (", ((regionCode == nil) ? @"null" : regionCode), @") provided.")];
    return nil;
  }
  NSString *nationalPrefix = metadata->nationalPrefix_;
  if (((jint) [((NSString *) nil_chk(nationalPrefix)) length]) == 0) {
    return nil;
  }
  if (stripNonDigits) {
    nationalPrefix = [nationalPrefix replace:@"~" withSequence:@""];
  }
  return nationalPrefix;
}

- (jboolean)isNANPACountryWithNSString:(NSString *)regionCode {
  return [((id<JavaUtilSet>) nil_chk(nanpaRegions_)) containsWithId:regionCode];
}

- (jboolean)isLeadingZeroPossibleWithInt:(jint)countryCallingCode {
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *mainMetadataForCallingCode = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, [self getRegionCodeForCountryCodeWithInt:countryCallingCode]);
  if (mainMetadataForCallingCode == nil) {
    return false;
  }
  return mainMetadataForCallingCode->leadingZeroPossible_;
}

- (jboolean)isAlphaNumberWithNSString:(NSString *)number {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isViablePhoneNumberWithNSString_(number)) {
    return false;
  }
  JavaLangStringBuilder *strippedNumber = create_JavaLangStringBuilder_initWithNSString_(number);
  [self maybeStripExtensionWithJavaLangStringBuilder:strippedNumber];
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA_PHONE_PATTERN)) matcherWithJavaLangCharSequence:strippedNumber])) matches];
}

- (jboolean)isPossibleNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  return [self isPossibleNumberWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number] == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)testNumberLengthAgainstPatternWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)numberPattern
                                                                                                         withNSString:(NSString *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthAgainstPatternWithJavaUtilRegexPattern_withNSString_(self, numberPattern, number);
}

- (jboolean)isShorterThanPossibleNormalNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)regionMetadata
                                                                                             withNSString:(NSString *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_isShorterThanPossibleNormalNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withNSString_(self, regionMetadata, number);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)isPossibleNumberWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  NSString *nationalNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  jint countryCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCode)) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, INVALID_COUNTRY_CODE);
  }
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCode];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCode, regionCode);
  JavaUtilRegexPattern *possibleNumberPattern = [((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->generalDesc_))->possibleNumberPattern_];
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthAgainstPatternWithJavaUtilRegexPattern_withNSString_(self, possibleNumberPattern, nationalNumber);
}

- (jboolean)isPossibleNumberWithNSString:(NSString *)number
                            withNSString:(NSString *)regionDialingFrom {
  @try {
    return [self isPossibleNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:[self parseWithNSString:number withNSString:regionDialingFrom]];
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    return false;
  }
}

- (jboolean)truncateTooLongNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  if ([self isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number]) {
    return true;
  }
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *numberCopy = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
  [numberCopy mergeFromWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  jlong nationalNumber = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getNationalNumber];
  do {
    nationalNumber /= 10;
    [numberCopy setNationalNumberWithLong:nationalNumber];
    if ([self isPossibleNumberWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberCopy] == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_SHORT) || nationalNumber == 0) {
      return false;
    }
  }
  while (![self isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberCopy]);
  [number setNationalNumberWithLong:nationalNumber];
  return true;
}

- (ComGoogleI18nPhonenumbersAsYouTypeFormatter *)getAsYouTypeFormatterWithNSString:(NSString *)regionCode {
  return create_ComGoogleI18nPhonenumbersAsYouTypeFormatter_initWithNSString_(regionCode);
}

- (jint)extractCountryCodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)fullNumber
                          withJavaLangStringBuilder:(JavaLangStringBuilder *)nationalNumber {
  if (([((JavaLangStringBuilder *) nil_chk(fullNumber)) length] == 0) || ([fullNumber charAtWithInt:0] == '0')) {
    return 0;
  }
  jint potentialCountryCode;
  jint numberLength = [fullNumber length];
  for (jint i = 1; i <= ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_COUNTRY_CODE && i <= numberLength; i++) {
    potentialCountryCode = JavaLangInteger_parseIntWithNSString_([fullNumber substringWithInt:0 withInt:i]);
    if ([((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(potentialCountryCode)]) {
      [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithNSString:[fullNumber substringWithInt:i]];
      return potentialCountryCode;
    }
  }
  return 0;
}

- (jint)maybeExtractCountryCodeWithNSString:(NSString *)number
withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)defaultRegionMetadata
                  withJavaLangStringBuilder:(JavaLangStringBuilder *)nationalNumber
                                withBoolean:(jboolean)keepRawInput
withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  if (((jint) [((NSString *) nil_chk(number)) length]) == 0) {
    return 0;
  }
  JavaLangStringBuilder *fullNumber = create_JavaLangStringBuilder_initWithNSString_(number);
  NSString *possibleCountryIddPrefix = @"NonMatch";
  if (defaultRegionMetadata != nil) {
    possibleCountryIddPrefix = defaultRegionMetadata->internationalPrefix_;
  }
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource *countryCodeSource = [self maybeStripInternationalPrefixAndNormalizeWithJavaLangStringBuilder:fullNumber withNSString:possibleCountryIddPrefix];
  if (keepRawInput) {
    [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeSourceWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource:countryCodeSource];
  }
  if (countryCodeSource != JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_DEFAULT_COUNTRY)) {
    if ([fullNumber length] <= ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN) {
      @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, TOO_SHORT_AFTER_IDD), @"Phone number had an IDD, but after this was not long enough to be a viable phone number.");
    }
    jint potentialCountryCode = [self extractCountryCodeWithJavaLangStringBuilder:fullNumber withJavaLangStringBuilder:nationalNumber];
    if (potentialCountryCode != 0) {
      [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeWithInt:potentialCountryCode];
      return potentialCountryCode;
    }
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE), @"Country calling code supplied was not recognised.");
  }
  else if (defaultRegionMetadata != nil) {
    jint defaultCountryCode = defaultRegionMetadata->countryCode_;
    NSString *defaultCountryCodeString = NSString_valueOfInt_(defaultCountryCode);
    NSString *normalizedNumber = [fullNumber description];
    if ([((NSString *) nil_chk(normalizedNumber)) hasPrefix:defaultCountryCodeString]) {
      JavaLangStringBuilder *potentialNationalNumber = create_JavaLangStringBuilder_initWithNSString_([normalizedNumber substring:((jint) [((NSString *) nil_chk(defaultCountryCodeString)) length])]);
      ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *generalDesc = defaultRegionMetadata->generalDesc_;
      JavaUtilRegexPattern *validNumberPattern = [((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *) nil_chk(generalDesc))->nationalNumberPattern_];
      [self maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:potentialNationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:defaultRegionMetadata withJavaLangStringBuilder:nil];
      JavaUtilRegexPattern *possibleNumberPattern = [regexCache_ getPatternForRegexWithNSString:generalDesc->possibleNumberPattern_];
      if ((![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(validNumberPattern)) matcherWithJavaLangCharSequence:fullNumber])) matches] && [((JavaUtilRegexMatcher *) nil_chk([validNumberPattern matcherWithJavaLangCharSequence:potentialNationalNumber])) matches]) || ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthAgainstPatternWithJavaUtilRegexPattern_withNSString_(self, possibleNumberPattern, [fullNumber description]) == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_LONG)) {
        [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithJavaLangCharSequence:potentialNationalNumber];
        if (keepRawInput) {
          [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeSourceWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource:JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_NUMBER_WITHOUT_PLUS_SIGN)];
        }
        [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeWithInt:defaultCountryCode];
        return defaultCountryCode;
      }
    }
  }
  [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeWithInt:0];
  return 0;
}

- (jboolean)parsePrefixAsIddWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)iddPattern
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_parsePrefixAsIddWithJavaUtilRegexPattern_withJavaLangStringBuilder_(self, iddPattern, number);
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource *)maybeStripInternationalPrefixAndNormalizeWithJavaLangStringBuilder:(JavaLangStringBuilder *)number
                                                                                                                              withNSString:(NSString *)possibleIddPrefix {
  if ([((JavaLangStringBuilder *) nil_chk(number)) length] == 0) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_DEFAULT_COUNTRY);
  }
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) lookingAt]) {
    [number delete__WithInt:0 withInt:[m end]];
    ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithJavaLangStringBuilder_(number);
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_NUMBER_WITH_PLUS_SIGN);
  }
  JavaUtilRegexPattern *iddPattern = [((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:possibleIddPrefix];
  ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithJavaLangStringBuilder_(number);
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_parsePrefixAsIddWithJavaUtilRegexPattern_withJavaLangStringBuilder_(self, iddPattern, number) ? JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_NUMBER_WITH_IDD) : JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_DEFAULT_COUNTRY);
}

- (jboolean)maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)number
               withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)metadata
                                                  withJavaLangStringBuilder:(JavaLangStringBuilder *)carrierCode {
  jint numberLength = [((JavaLangStringBuilder *) nil_chk(number)) length];
  NSString *possibleNationalPrefix = ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->nationalPrefixForParsing_;
  if (numberLength == 0 || ((jint) [((NSString *) nil_chk(possibleNationalPrefix)) length]) == 0) {
    return false;
  }
  JavaUtilRegexMatcher *prefixMatcher = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:possibleNationalPrefix])) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(prefixMatcher)) lookingAt]) {
    JavaUtilRegexPattern *nationalNumberRule = [regexCache_ getPatternForRegexWithNSString:((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *) nil_chk(metadata->generalDesc_))->nationalNumberPattern_];
    jboolean isViableOriginalNumber = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(nationalNumberRule)) matcherWithJavaLangCharSequence:number])) matches];
    jint numOfGroups = [prefixMatcher groupCount];
    NSString *transformRule = metadata->nationalPrefixTransformRule_;
    if (transformRule == nil || ((jint) [transformRule length]) == 0 || [prefixMatcher groupWithInt:numOfGroups] == nil) {
      if (isViableOriginalNumber && ![((JavaUtilRegexMatcher *) nil_chk([nationalNumberRule matcherWithJavaLangCharSequence:[number substringWithInt:[prefixMatcher end]]])) matches]) {
        return false;
      }
      if (carrierCode != nil && numOfGroups > 0 && [prefixMatcher groupWithInt:numOfGroups] != nil) {
        [carrierCode appendWithNSString:[prefixMatcher groupWithInt:1]];
      }
      [number delete__WithInt:0 withInt:[prefixMatcher end]];
      return true;
    }
    else {
      JavaLangStringBuilder *transformedNumber = create_JavaLangStringBuilder_initWithJavaLangCharSequence_(number);
      [transformedNumber replaceWithInt:0 withInt:numberLength withNSString:[prefixMatcher replaceFirstWithNSString:transformRule]];
      if (isViableOriginalNumber && ![((JavaUtilRegexMatcher *) nil_chk([nationalNumberRule matcherWithJavaLangCharSequence:[transformedNumber description]])) matches]) {
        return false;
      }
      if (carrierCode != nil && numOfGroups > 1) {
        [carrierCode appendWithNSString:[prefixMatcher groupWithInt:1]];
      }
      [number replaceWithInt:0 withInt:[number length] withNSString:[transformedNumber description]];
      return true;
    }
  }
  return false;
}

- (NSString *)maybeStripExtensionWithJavaLangStringBuilder:(JavaLangStringBuilder *)number {
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERN)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) find] && ComGoogleI18nPhonenumbersPhoneNumberUtil_isViablePhoneNumberWithNSString_([((JavaLangStringBuilder *) nil_chk(number)) substringWithInt:0 withInt:[m start]])) {
    for (jint i = 1, length = [m groupCount]; i <= length; i++) {
      if ([m groupWithInt:i] != nil) {
        NSString *extension = [m groupWithInt:i];
        [((JavaLangStringBuilder *) nil_chk(number)) delete__WithInt:[m start] withInt:[number length]];
        return extension;
      }
    }
  }
  return @"";
}

- (jboolean)checkRegionForParsingWithNSString:(NSString *)numberToParse
                                 withNSString:(NSString *)defaultRegion {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_checkRegionForParsingWithNSString_withNSString_(self, numberToParse, defaultRegion);
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)parseWithNSString:(NSString *)numberToParse
                                                           withNSString:(NSString *)defaultRegion {
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
  [self parseWithNSString:numberToParse withNSString:defaultRegion withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:phoneNumber];
  return phoneNumber;
}

- (void)parseWithNSString:(NSString *)numberToParse
             withNSString:(NSString *)defaultRegion
withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithNSString_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, numberToParse, defaultRegion, false, true, phoneNumber);
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)parseAndKeepRawInputWithNSString:(NSString *)numberToParse
                                                                          withNSString:(NSString *)defaultRegion {
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
  [self parseAndKeepRawInputWithNSString:numberToParse withNSString:defaultRegion withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:phoneNumber];
  return phoneNumber;
}

- (void)parseAndKeepRawInputWithNSString:(NSString *)numberToParse
                            withNSString:(NSString *)defaultRegion
withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithNSString_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, numberToParse, defaultRegion, true, true, phoneNumber);
}

- (id<JavaLangIterable>)findNumbersWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                               withNSString:(NSString *)defaultRegion {
  return [self findNumbersWithJavaLangCharSequence:text withNSString:defaultRegion withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, VALID) withLong:JavaLangLong_MAX_VALUE];
}

- (id<JavaLangIterable>)findNumbersWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                               withNSString:(NSString *)defaultRegion
      withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)leniency
                                                   withLong:(jlong)maxTries {
  return create_ComGoogleI18nPhonenumbersPhoneNumberUtil_$2_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(self, text, defaultRegion, leniency, maxTries);
}

+ (void)setItalianLeadingZerosForPhoneNumberWithNSString:(NSString *)nationalNumber
    withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_setItalianLeadingZerosForPhoneNumberWithNSString_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(nationalNumber, phoneNumber);
}

- (void)parseHelperWithNSString:(NSString *)numberToParse
                   withNSString:(NSString *)defaultRegion
                    withBoolean:(jboolean)keepRawInput
                    withBoolean:(jboolean)checkRegion
withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithNSString_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, numberToParse, defaultRegion, keepRawInput, checkRegion, phoneNumber);
}

- (void)buildNationalNumberForParsingWithNSString:(NSString *)numberToParse
                        withJavaLangStringBuilder:(JavaLangStringBuilder *)nationalNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_buildNationalNumberForParsingWithNSString_withJavaLangStringBuilder_(self, numberToParse, nationalNumber);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *)isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)firstNumberIn
                                                                     withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)secondNumberIn {
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *firstNumber = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
  [firstNumber mergeFromWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumberIn];
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumber = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
  [secondNumber mergeFromWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberIn];
  [firstNumber clearRawInput];
  [firstNumber clearCountryCodeSource];
  [firstNumber clearPreferredDomesticCarrierCode];
  [secondNumber clearRawInput];
  [secondNumber clearCountryCodeSource];
  [secondNumber clearPreferredDomesticCarrierCode];
  if ([firstNumber hasExtension] && ((jint) [((NSString *) nil_chk([firstNumber getExtension])) length]) == 0) {
    [firstNumber clearExtension];
  }
  if ([secondNumber hasExtension] && ((jint) [((NSString *) nil_chk([secondNumber getExtension])) length]) == 0) {
    [secondNumber clearExtension];
  }
  if ([firstNumber hasExtension] && [secondNumber hasExtension] && ![((NSString *) nil_chk([firstNumber getExtension])) isEqual:[secondNumber getExtension]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NO_MATCH);
  }
  jint firstNumberCountryCode = [firstNumber getCountryCode];
  jint secondNumberCountryCode = [secondNumber getCountryCode];
  if (firstNumberCountryCode != 0 && secondNumberCountryCode != 0) {
    if ([firstNumber exactlySameAsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumber]) {
      return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, EXACT_MATCH);
    }
    else if (firstNumberCountryCode == secondNumberCountryCode && ComGoogleI18nPhonenumbersPhoneNumberUtil_isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, firstNumber, secondNumber)) {
      return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, SHORT_NSN_MATCH);
    }
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NO_MATCH);
  }
  [firstNumber setCountryCodeWithInt:secondNumberCountryCode];
  if ([firstNumber exactlySameAsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumber]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NSN_MATCH);
  }
  if (ComGoogleI18nPhonenumbersPhoneNumberUtil_isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, firstNumber, secondNumber)) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, SHORT_NSN_MATCH);
  }
  return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NO_MATCH);
}

- (jboolean)isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)firstNumber
                                            withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)secondNumber {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, firstNumber, secondNumber);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *)isNumberMatchWithNSString:(NSString *)firstNumber
                                                                     withNSString:(NSString *)secondNumber {
  @try {
    ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *firstNumberAsProto = [self parseWithNSString:firstNumber withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION];
    return [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumberAsProto withNSString:secondNumber];
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    if ([((ComGoogleI18nPhonenumbersNumberParseException *) nil_chk(e)) getErrorType] == JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE)) {
      @try {
        ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumberAsProto = [self parseWithNSString:secondNumber withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION];
        return [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberAsProto withNSString:firstNumber];
      }
      @catch (ComGoogleI18nPhonenumbersNumberParseException *e2) {
        if ([((ComGoogleI18nPhonenumbersNumberParseException *) nil_chk(e2)) getErrorType] == JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE)) {
          @try {
            ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *firstNumberProto = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
            ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumberProto = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
            ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithNSString_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, firstNumber, nil, false, false, firstNumberProto);
            ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithNSString_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, secondNumber, nil, false, false, secondNumberProto);
            return [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumberProto withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberProto];
          }
          @catch (ComGoogleI18nPhonenumbersNumberParseException *e3) {
          }
        }
      }
    }
  }
  return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NOT_A_NUMBER);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *)isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)firstNumber
                                                                                                             withNSString:(NSString *)secondNumber {
  @try {
    ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumberAsProto = [self parseWithNSString:secondNumber withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION];
    return [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumber withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberAsProto];
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    if ([((ComGoogleI18nPhonenumbersNumberParseException *) nil_chk(e)) getErrorType] == JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE)) {
      NSString *firstNumberRegion = [self getRegionCodeForCountryCodeWithInt:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(firstNumber)) getCountryCode]];
      @try {
        if (![((NSString *) nil_chk(firstNumberRegion)) isEqual:ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION]) {
          ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumberWithFirstNumberRegion = [self parseWithNSString:secondNumber withNSString:firstNumberRegion];
          ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *match = [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumber withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberWithFirstNumberRegion];
          if (match == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, EXACT_MATCH)) {
            return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NSN_MATCH);
          }
          return match;
        }
        else {
          ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumberProto = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
          ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithNSString_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, secondNumber, nil, false, false, secondNumberProto);
          return [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumber withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberProto];
        }
      }
      @catch (ComGoogleI18nPhonenumbersNumberParseException *e2) {
      }
    }
  }
  return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NOT_A_NUMBER);
}

- (jboolean)canBeInternationallyDialledWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:[self getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number]];
  if (metadata == nil) {
    return true;
  }
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  return ![self isNumberMatchingDescWithNSString:nationalSignificantNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->noInternationalDialling_];
}

- (jboolean)isMobileNumberPortableRegionWithNSString:(NSString *)regionCode {
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:regionCode];
  if (metadata == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", @"Invalid or unknown region code provided: ", regionCode)];
    return false;
  }
  return metadata->mobileNumberPortableRegion_;
}

- (void)dealloc {
  RELEASE_(metadataSource_);
  RELEASE_(countryCallingCodeToRegionCodeMap_);
  RELEASE_(nanpaRegions_);
  RELEASE_(regexCache_);
  RELEASE_(supportedRegions_);
  RELEASE_(countryCodesForNonGeographicalRegion_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat;", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 7, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x8, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 13, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x28, 23, 24, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 25, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 26, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil;", 0x29, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil;", 0x9, 27, 28, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil;", 0x9, 27, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 30, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 31, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 32, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 33, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 36, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 37, 38, -1, 39, -1, -1 },
    { NULL, "LNSString;", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 44, 41, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 47, 41, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 48, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 49, 50, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 51, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 52, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 53, 41, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 54, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 56, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 57, 58, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 57, 59, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat;", 0x0, 60, 61, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 62, 63, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 62, 64, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 65, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 66, 67, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 68, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 70, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc;", 0x0, 71, 72, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", 0x1, 73, 16, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", 0x2, 74, 75, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;", 0x0, 76, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;", 0x0, 77, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 78, 79, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 80, 79, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 81, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 82, 41, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 83, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 84, 85, -1, 86, -1, -1 },
    { NULL, "LNSString;", 0x1, 87, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 88, 19, -1, 89, -1, -1 },
    { NULL, "I", 0x1, 90, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 91, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 92, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 93, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 94, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 95, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 96, 16, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", 0x2, 97, 98, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 99, 100, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", 0x1, 101, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 96, 102, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 103, 16, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersAsYouTypeFormatter;", 0x1, 104, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 105, 106, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 107, 108, 109, -1, -1, -1 },
    { NULL, "Z", 0x2, 110, 111, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource;", 0x0, 112, 113, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 114, 115, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 116, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 117, 102, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 118, 102, 109, -1, -1, -1 },
    { NULL, "V", 0x1, 118, 119, 109, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 120, 102, 109, -1, -1, -1 },
    { NULL, "V", 0x1, 120, 119, 109, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 121, 122, -1, 123, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 121, 124, -1, 125, -1, -1 },
    { NULL, "V", 0x8, 126, 127, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 128, 129, 109, -1, -1, -1 },
    { NULL, "V", 0x2, 130, 131, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", 0x1, 132, 133, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 134, 133, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", 0x1, 132, 102, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", 0x1, 132, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 135, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 136, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createExtnPatternWithNSString:);
  methods[1].selector = @selector(initWithComGoogleI18nPhonenumbersMetadataSource:withJavaUtilMap:);
  methods[2].selector = @selector(copyNumberFormatWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:);
  methods[3].selector = @selector(extractPossibleNumberWithNSString:);
  methods[4].selector = @selector(isViablePhoneNumberWithNSString:);
  methods[5].selector = @selector(normalizeWithNSString:);
  methods[6].selector = @selector(normalizeWithJavaLangStringBuilder:);
  methods[7].selector = @selector(normalizeDigitsOnlyWithNSString:);
  methods[8].selector = @selector(normalizeDigitsWithNSString:withBoolean:);
  methods[9].selector = @selector(normalizeDiallableCharsOnlyWithNSString:);
  methods[10].selector = @selector(convertAlphaCharactersInNumberWithNSString:);
  methods[11].selector = @selector(getLengthOfGeographicalAreaCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[12].selector = @selector(getLengthOfNationalDestinationCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[13].selector = @selector(getCountryMobileTokenWithInt:);
  methods[14].selector = @selector(normalizeHelperWithNSString:withJavaUtilMap:withBoolean:);
  methods[15].selector = @selector(setInstanceWithComGoogleI18nPhonenumbersPhoneNumberUtil:);
  methods[16].selector = @selector(getSupportedRegions);
  methods[17].selector = @selector(getSupportedGlobalNetworkCallingCodes);
  methods[18].selector = @selector(getInstance);
  methods[19].selector = @selector(createInstanceWithComGoogleI18nPhonenumbersMetadataSource:);
  methods[20].selector = @selector(createInstanceWithComGoogleI18nPhonenumbersMetadataLoader:);
  methods[21].selector = @selector(formattingRuleHasFirstGroupOnlyWithNSString:);
  methods[22].selector = @selector(isNumberGeographicalWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[23].selector = @selector(isValidRegionCodeWithNSString:);
  methods[24].selector = @selector(hasValidCountryCallingCodeWithInt:);
  methods[25].selector = @selector(formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:);
  methods[26].selector = @selector(formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withJavaLangStringBuilder:);
  methods[27].selector = @selector(formatByPatternWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withJavaUtilList:);
  methods[28].selector = @selector(formatNationalNumberWithCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[29].selector = @selector(getMetadataForRegionOrCallingCodeWithInt:withNSString:);
  methods[30].selector = @selector(formatNationalNumberWithPreferredCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[31].selector = @selector(formatNumberForMobileDialingWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withBoolean:);
  methods[32].selector = @selector(formatOutOfCountryCallingNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[33].selector = @selector(formatInOriginalFormatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[34].selector = @selector(rawInputContainsNationalPrefixWithNSString:withNSString:withNSString:);
  methods[35].selector = @selector(hasUnexpectedItalianLeadingZeroWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[36].selector = @selector(hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[37].selector = @selector(formatOutOfCountryKeepingAlphaCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[38].selector = @selector(getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[39].selector = @selector(prefixNumberWithCountryCallingCodeWithInt:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withJavaLangStringBuilder:);
  methods[40].selector = @selector(formatNsnWithNSString:withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:);
  methods[41].selector = @selector(formatNsnWithNSString:withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withNSString:);
  methods[42].selector = @selector(chooseFormattingPatternForNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormatArray:withNSString:);
  methods[43].selector = @selector(formatNsnUsingPatternWithNSString:withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:);
  methods[44].selector = @selector(formatNsnUsingPatternWithNSString:withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withNSString:);
  methods[45].selector = @selector(getExampleNumberWithNSString:);
  methods[46].selector = @selector(getExampleNumberForTypeWithNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:);
  methods[47].selector = @selector(getExampleNumberForNonGeoEntityWithInt:);
  methods[48].selector = @selector(maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withJavaLangStringBuilder:);
  methods[49].selector = @selector(getNumberDescByTypeWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:);
  methods[50].selector = @selector(getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[51].selector = @selector(getNumberTypeHelperWithNSString:withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:);
  methods[52].selector = @selector(getMetadataForRegionWithNSString:);
  methods[53].selector = @selector(getMetadataForNonGeographicalRegionWithInt:);
  methods[54].selector = @selector(isNumberPossibleForDescWithNSString:withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:);
  methods[55].selector = @selector(isNumberMatchingDescWithNSString:withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:);
  methods[56].selector = @selector(isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[57].selector = @selector(isValidNumberForRegionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[58].selector = @selector(getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[59].selector = @selector(getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaUtilList:);
  methods[60].selector = @selector(getRegionCodeForCountryCodeWithInt:);
  methods[61].selector = @selector(getRegionCodesForCountryCodeWithInt:);
  methods[62].selector = @selector(getCountryCodeForRegionWithNSString:);
  methods[63].selector = @selector(getCountryCodeForValidRegionWithNSString:);
  methods[64].selector = @selector(getNddPrefixForRegionWithNSString:withBoolean:);
  methods[65].selector = @selector(isNANPACountryWithNSString:);
  methods[66].selector = @selector(isLeadingZeroPossibleWithInt:);
  methods[67].selector = @selector(isAlphaNumberWithNSString:);
  methods[68].selector = @selector(isPossibleNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[69].selector = @selector(testNumberLengthAgainstPatternWithJavaUtilRegexPattern:withNSString:);
  methods[70].selector = @selector(isShorterThanPossibleNormalNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:withNSString:);
  methods[71].selector = @selector(isPossibleNumberWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[72].selector = @selector(isPossibleNumberWithNSString:withNSString:);
  methods[73].selector = @selector(truncateTooLongNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[74].selector = @selector(getAsYouTypeFormatterWithNSString:);
  methods[75].selector = @selector(extractCountryCodeWithJavaLangStringBuilder:withJavaLangStringBuilder:);
  methods[76].selector = @selector(maybeExtractCountryCodeWithNSString:withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:withJavaLangStringBuilder:withBoolean:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[77].selector = @selector(parsePrefixAsIddWithJavaUtilRegexPattern:withJavaLangStringBuilder:);
  methods[78].selector = @selector(maybeStripInternationalPrefixAndNormalizeWithJavaLangStringBuilder:withNSString:);
  methods[79].selector = @selector(maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:withJavaLangStringBuilder:);
  methods[80].selector = @selector(maybeStripExtensionWithJavaLangStringBuilder:);
  methods[81].selector = @selector(checkRegionForParsingWithNSString:withNSString:);
  methods[82].selector = @selector(parseWithNSString:withNSString:);
  methods[83].selector = @selector(parseWithNSString:withNSString:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[84].selector = @selector(parseAndKeepRawInputWithNSString:withNSString:);
  methods[85].selector = @selector(parseAndKeepRawInputWithNSString:withNSString:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[86].selector = @selector(findNumbersWithJavaLangCharSequence:withNSString:);
  methods[87].selector = @selector(findNumbersWithJavaLangCharSequence:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:withLong:);
  methods[88].selector = @selector(setItalianLeadingZerosForPhoneNumberWithNSString:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[89].selector = @selector(parseHelperWithNSString:withNSString:withBoolean:withBoolean:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[90].selector = @selector(buildNationalNumberForParsingWithNSString:withJavaLangStringBuilder:);
  methods[91].selector = @selector(isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[92].selector = @selector(isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[93].selector = @selector(isNumberMatchWithNSString:withNSString:);
  methods[94].selector = @selector(isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[95].selector = @selector(canBeInternationallyDialledWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[96].selector = @selector(isMobileNumberPortableRegionWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_METADATA_LOADER", "LComGoogleI18nPhonenumbersMetadataLoader;", .constantValue.asLong = 0, 0x18, -1, 137, -1, -1 },
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 138, -1, -1 },
    { "REGEX_FLAGS", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_REGEX_FLAGS, 0x18, -1, -1, -1, -1 },
    { "MIN_LENGTH_FOR_NSN", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN, 0x1a, -1, -1, -1, -1 },
    { "MAX_LENGTH_FOR_NSN", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_FOR_NSN, 0x18, -1, -1, -1, -1 },
    { "MAX_LENGTH_COUNTRY_CODE", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_COUNTRY_CODE, 0x18, -1, -1, -1, -1 },
    { "MAX_INPUT_STRING_LENGTH", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_INPUT_STRING_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "UNKNOWN_REGION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 139, -1, -1 },
    { "NANPA_COUNTRY_CODE", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE, 0x1a, -1, -1, -1, -1 },
    { "COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 140, -1, -1 },
    { "MOBILE_TOKEN_MAPPINGS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 141, 142, -1 },
    { "PLUS_SIGN", "C", .constantValue.asUnichar = ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN, 0x18, -1, -1, -1, -1 },
    { "STAR_SIGN", "C", .constantValue.asUnichar = ComGoogleI18nPhonenumbersPhoneNumberUtil_STAR_SIGN, 0x1a, -1, -1, -1, -1 },
    { "RFC3966_EXTN_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 143, -1, -1 },
    { "RFC3966_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 144, -1, -1 },
    { "RFC3966_PHONE_CONTEXT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 145, -1, -1 },
    { "RFC3966_ISDN_SUBADDRESS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 146, -1, -1 },
    { "DIALLABLE_CHAR_MAPPINGS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 147, 148, -1 },
    { "ALPHA_MAPPINGS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 149, 148, -1 },
    { "ALPHA_PHONE_MAPPINGS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 150, 148, -1 },
    { "ALL_PLUS_NUMBER_GROUPING_SYMBOLS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 151, 148, -1 },
    { "UNIQUE_INTERNATIONAL_PREFIX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 152, -1, -1 },
    { "VALID_PUNCTUATION", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 153, -1, -1 },
    { "DIGITS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 154, -1, -1 },
    { "VALID_ALPHA", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 155, -1, -1 },
    { "PLUS_CHARS", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 156, -1, -1 },
    { "PLUS_CHARS_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 157, -1, -1 },
    { "SEPARATOR_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 158, -1, -1 },
    { "CAPTURING_DIGIT_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 159, -1, -1 },
    { "VALID_START_CHAR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 160, -1, -1 },
    { "VALID_START_CHAR_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 161, -1, -1 },
    { "SECOND_NUMBER_START", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 162, -1, -1 },
    { "SECOND_NUMBER_START_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 163, -1, -1 },
    { "UNWANTED_END_CHARS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 164, -1, -1 },
    { "UNWANTED_END_CHAR_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 165, -1, -1 },
    { "VALID_ALPHA_PHONE_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 166, -1, -1 },
    { "VALID_PHONE_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 167, -1, -1 },
    { "DEFAULT_EXTN_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 168, -1, -1 },
    { "CAPTURING_EXTN_DIGITS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 169, -1, -1 },
    { "EXTN_PATTERNS_FOR_PARSING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 170, -1, -1 },
    { "EXTN_PATTERNS_FOR_MATCHING", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 171, -1, -1 },
    { "EXTN_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 172, -1, -1 },
    { "VALID_PHONE_NUMBER_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 173, -1, -1 },
    { "NON_DIGITS_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 174, -1, -1 },
    { "FIRST_GROUP_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 175, -1, -1 },
    { "NP_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 176, -1, -1 },
    { "FG_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 177, -1, -1 },
    { "CC_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 178, -1, -1 },
    { "FIRST_GROUP_ONLY_PREFIX_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 179, -1, -1 },
    { "instance", "LComGoogleI18nPhonenumbersPhoneNumberUtil;", .constantValue.asLong = 0, 0xa, -1, 180, -1, -1 },
    { "REGION_CODE_FOR_NON_GEO_ENTITY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 181, -1, -1 },
    { "metadataSource_", "LComGoogleI18nPhonenumbersMetadataSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "countryCallingCodeToRegionCodeMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 182, -1 },
    { "nanpaRegions_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 183, -1 },
    { "regexCache_", "LComGoogleI18nPhonenumbersRegexCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "supportedRegions_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 183, -1 },
    { "countryCodesForNonGeographicalRegion_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 184, -1 },
  };
  static const void *ptrTable[] = { "createExtnPattern", "LNSString;", "LComGoogleI18nPhonenumbersMetadataSource;LJavaUtilMap;", "(Lcom/google/i18n/phonenumbers/MetadataSource;Ljava/util/Map<Ljava/lang/Integer;Ljava/util/List<Ljava/lang/String;>;>;)V", "copyNumberFormat", "LComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat;", "extractPossibleNumber", "isViablePhoneNumber", "normalize", "LJavaLangStringBuilder;", "normalizeDigitsOnly", "normalizeDigits", "LNSString;Z", "normalizeDiallableCharsOnly", "convertAlphaCharactersInNumber", "getLengthOfGeographicalAreaCode", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "getLengthOfNationalDestinationCode", "getCountryMobileToken", "I", "normalizeHelper", "LNSString;LJavaUtilMap;Z", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/Character;Ljava/lang/Character;>;Z)Ljava/lang/String;", "setInstance", "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "()Ljava/util/Set<Ljava/lang/String;>;", "()Ljava/util/Set<Ljava/lang/Integer;>;", "createInstance", "LComGoogleI18nPhonenumbersMetadataSource;", "LComGoogleI18nPhonenumbersMetadataLoader;", "formattingRuleHasFirstGroupOnly", "isNumberGeographical", "isValidRegionCode", "hasValidCountryCallingCode", "format", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LJavaLangStringBuilder;", "formatByPattern", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LJavaUtilList;", "(Lcom/google/i18n/phonenumbers/Phonenumber$PhoneNumber;Lcom/google/i18n/phonenumbers/PhoneNumberUtil$PhoneNumberFormat;Ljava/util/List<Lcom/google/i18n/phonenumbers/nano/Phonemetadata$NumberFormat;>;)Ljava/lang/String;", "formatNationalNumberWithCarrierCode", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LNSString;", "getMetadataForRegionOrCallingCode", "ILNSString;", "formatNationalNumberWithPreferredCarrierCode", "formatNumberForMobileDialing", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LNSString;Z", "formatOutOfCountryCallingNumber", "formatInOriginalFormat", "rawInputContainsNationalPrefix", "LNSString;LNSString;LNSString;", "hasUnexpectedItalianLeadingZero", "hasFormattingPatternForNumber", "formatOutOfCountryKeepingAlphaChars", "getNationalSignificantNumber", "prefixNumberWithCountryCallingCode", "ILComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LJavaLangStringBuilder;", "formatNsn", "LNSString;LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", "LNSString;LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LNSString;", "chooseFormattingPatternForNumber", "[LComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat;LNSString;", "formatNsnUsingPattern", "LNSString;LComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", "LNSString;LComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LNSString;", "getExampleNumber", "getExampleNumberForType", "LNSString;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", "getExampleNumberForNonGeoEntity", "maybeAppendFormattedExtension", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LJavaLangStringBuilder;", "getNumberDescByType", "LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", "getNumberType", "getNumberTypeHelper", "LNSString;LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;", "getMetadataForRegion", "getMetadataForNonGeographicalRegion", "isNumberPossibleForDesc", "LNSString;LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc;", "isNumberMatchingDesc", "isValidNumber", "isValidNumberForRegion", "getRegionCodeForNumber", "getRegionCodeForNumberFromRegionList", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaUtilList;", "(Lcom/google/i18n/phonenumbers/Phonenumber$PhoneNumber;Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", "getRegionCodeForCountryCode", "getRegionCodesForCountryCode", "(I)Ljava/util/List<Ljava/lang/String;>;", "getCountryCodeForRegion", "getCountryCodeForValidRegion", "getNddPrefixForRegion", "isNANPACountry", "isLeadingZeroPossible", "isAlphaNumber", "isPossibleNumber", "testNumberLengthAgainstPattern", "LJavaUtilRegexPattern;LNSString;", "isShorterThanPossibleNormalNumber", "LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;LNSString;", "isPossibleNumberWithReason", "LNSString;LNSString;", "truncateTooLongNumber", "getAsYouTypeFormatter", "extractCountryCode", "LJavaLangStringBuilder;LJavaLangStringBuilder;", "maybeExtractCountryCode", "LNSString;LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;LJavaLangStringBuilder;ZLComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "LComGoogleI18nPhonenumbersNumberParseException;", "parsePrefixAsIdd", "LJavaUtilRegexPattern;LJavaLangStringBuilder;", "maybeStripInternationalPrefixAndNormalize", "LJavaLangStringBuilder;LNSString;", "maybeStripNationalPrefixAndCarrierCode", "LJavaLangStringBuilder;LComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata;LJavaLangStringBuilder;", "maybeStripExtension", "checkRegionForParsing", "parse", "LNSString;LNSString;LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "parseAndKeepRawInput", "findNumbers", "LJavaLangCharSequence;LNSString;", "(Ljava/lang/CharSequence;Ljava/lang/String;)Ljava/lang/Iterable<Lcom/google/i18n/phonenumbers/PhoneNumberMatch;>;", "LJavaLangCharSequence;LNSString;LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;J", "(Ljava/lang/CharSequence;Ljava/lang/String;Lcom/google/i18n/phonenumbers/PhoneNumberUtil$Leniency;J)Ljava/lang/Iterable<Lcom/google/i18n/phonenumbers/PhoneNumberMatch;>;", "setItalianLeadingZerosForPhoneNumber", "LNSString;LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "parseHelper", "LNSString;LNSString;ZZLComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "buildNationalNumberForParsing", "LNSString;LJavaLangStringBuilder;", "isNumberMatch", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "isNationalNumberSuffixOfTheOther", "canBeInternationallyDialled", "isMobileNumberPortableRegion", &ComGoogleI18nPhonenumbersPhoneNumberUtil_DEFAULT_METADATA_LOADER, &ComGoogleI18nPhonenumbersPhoneNumberUtil_logger, &ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION, &ComGoogleI18nPhonenumbersPhoneNumberUtil_COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX, &ComGoogleI18nPhonenumbersPhoneNumberUtil_MOBILE_TOKEN_MAPPINGS, "Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/String;>;", &ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_EXTN_PREFIX, &ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PREFIX, &ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PHONE_CONTEXT, &ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_ISDN_SUBADDRESS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_DIALLABLE_CHAR_MAPPINGS, "Ljava/util/Map<Ljava/lang/Character;Ljava/lang/Character;>;", &ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_PHONE_MAPPINGS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_ALL_PLUS_NUMBER_GROUPING_SYMBOLS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_UNIQUE_INTERNATIONAL_PREFIX, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, &ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA, &ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_SEPARATOR_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_DIGIT_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START, &ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHARS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHAR_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA_PHONE_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER, &ComGoogleI18nPhonenumbersPhoneNumberUtil_DEFAULT_EXTN_PREFIX, &ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_EXTN_DIGITS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_PARSING, &ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_MATCHING, &ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_NON_DIGITS_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_NP_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_FG_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_CC_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_ONLY_PREFIX_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_instance, &ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY, "Ljava/util/Map<Ljava/lang/Integer;Ljava/util/List<Ljava/lang/String;>;>;", "Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/Set<Ljava/lang/Integer;>;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil = { "PhoneNumberUtil", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x1, 97, 57, -1, 185, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil class]) {
    JreStrongAssignAndConsume(&ComGoogleI18nPhonenumbersPhoneNumberUtil_DEFAULT_METADATA_LOADER, new_ComGoogleI18nPhonenumbersPhoneNumberUtil_$1_init());
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_logger, JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleI18nPhonenumbersPhoneNumberUtil_class_() getName]));
    {
      JavaUtilHashMap *mobileTokenMap = create_JavaUtilHashMap_init();
      [mobileTokenMap putWithId:JavaLangInteger_valueOfWithInt_(52) withId:@"1"];
      [mobileTokenMap putWithId:JavaLangInteger_valueOfWithInt_(54) withId:@"9"];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_MOBILE_TOKEN_MAPPINGS, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(mobileTokenMap));
      JavaUtilHashMap *asciiDigitMappings = create_JavaUtilHashMap_init();
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('0') withId:JavaLangCharacter_valueOfWithChar_('0')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('1') withId:JavaLangCharacter_valueOfWithChar_('1')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('2') withId:JavaLangCharacter_valueOfWithChar_('2')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('3') withId:JavaLangCharacter_valueOfWithChar_('3')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('4') withId:JavaLangCharacter_valueOfWithChar_('4')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('5') withId:JavaLangCharacter_valueOfWithChar_('5')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('6') withId:JavaLangCharacter_valueOfWithChar_('6')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('7') withId:JavaLangCharacter_valueOfWithChar_('7')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('8') withId:JavaLangCharacter_valueOfWithChar_('8')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('9') withId:JavaLangCharacter_valueOfWithChar_('9')];
      JavaUtilHashMap *alphaMap = create_JavaUtilHashMap_initWithInt_(40);
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('A') withId:JavaLangCharacter_valueOfWithChar_('2')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('B') withId:JavaLangCharacter_valueOfWithChar_('2')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('C') withId:JavaLangCharacter_valueOfWithChar_('2')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('D') withId:JavaLangCharacter_valueOfWithChar_('3')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('E') withId:JavaLangCharacter_valueOfWithChar_('3')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('F') withId:JavaLangCharacter_valueOfWithChar_('3')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('G') withId:JavaLangCharacter_valueOfWithChar_('4')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('H') withId:JavaLangCharacter_valueOfWithChar_('4')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('I') withId:JavaLangCharacter_valueOfWithChar_('4')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('J') withId:JavaLangCharacter_valueOfWithChar_('5')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('K') withId:JavaLangCharacter_valueOfWithChar_('5')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('L') withId:JavaLangCharacter_valueOfWithChar_('5')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('M') withId:JavaLangCharacter_valueOfWithChar_('6')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('N') withId:JavaLangCharacter_valueOfWithChar_('6')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('O') withId:JavaLangCharacter_valueOfWithChar_('6')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('P') withId:JavaLangCharacter_valueOfWithChar_('7')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('Q') withId:JavaLangCharacter_valueOfWithChar_('7')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('R') withId:JavaLangCharacter_valueOfWithChar_('7')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('S') withId:JavaLangCharacter_valueOfWithChar_('7')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('T') withId:JavaLangCharacter_valueOfWithChar_('8')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('U') withId:JavaLangCharacter_valueOfWithChar_('8')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('V') withId:JavaLangCharacter_valueOfWithChar_('8')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('W') withId:JavaLangCharacter_valueOfWithChar_('9')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('X') withId:JavaLangCharacter_valueOfWithChar_('9')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('Y') withId:JavaLangCharacter_valueOfWithChar_('9')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('Z') withId:JavaLangCharacter_valueOfWithChar_('9')];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(alphaMap));
      JavaUtilHashMap *combinedMap = create_JavaUtilHashMap_initWithInt_(100);
      [combinedMap putAllWithJavaUtilMap:ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS];
      [combinedMap putAllWithJavaUtilMap:asciiDigitMappings];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_PHONE_MAPPINGS, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(combinedMap));
      JavaUtilHashMap *diallableCharMap = create_JavaUtilHashMap_init();
      [diallableCharMap putAllWithJavaUtilMap:asciiDigitMappings];
      [diallableCharMap putWithId:JavaLangCharacter_valueOfWithChar_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN) withId:JavaLangCharacter_valueOfWithChar_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN)];
      [diallableCharMap putWithId:JavaLangCharacter_valueOfWithChar_('*') withId:JavaLangCharacter_valueOfWithChar_('*')];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_DIALLABLE_CHAR_MAPPINGS, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(diallableCharMap));
      JavaUtilHashMap *allPlusNumberGroupings = create_JavaUtilHashMap_init();
      for (JavaLangCharacter *boxed__ in nil_chk([((id<JavaUtilMap>) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS)) keySet])) {
        jchar c = [((JavaLangCharacter *) nil_chk(boxed__)) charValue];
        [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(JavaLangCharacter_toLowerCaseWithChar_(c)) withId:JavaLangCharacter_valueOfWithChar_(c)];
        [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(c) withId:JavaLangCharacter_valueOfWithChar_(c)];
      }
      [allPlusNumberGroupings putAllWithJavaUtilMap:asciiDigitMappings];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_('-') withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0xff0d) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2010) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2011) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2012) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2013) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2014) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2015) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2212) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_('/') withId:JavaLangCharacter_valueOfWithChar_('/')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0xff0f) withId:JavaLangCharacter_valueOfWithChar_('/')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(' ') withId:JavaLangCharacter_valueOfWithChar_(' ')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x3000) withId:JavaLangCharacter_valueOfWithChar_(' ')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2060) withId:JavaLangCharacter_valueOfWithChar_(' ')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_('.') withId:JavaLangCharacter_valueOfWithChar_('.')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0xff0e) withId:JavaLangCharacter_valueOfWithChar_('.')];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_ALL_PLUS_NUMBER_GROUPING_SYMBOLS, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(allPlusNumberGroupings));
    }
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_UNIQUE_INTERNATIONAL_PREFIX, JavaUtilRegexPattern_compileWithNSString_(@"[\\d]+(?:[~\u2053\u223c\uff5e][\\d]+)?"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA, JreStrcat("$$", [((NSString *) nil_chk(JavaUtilArrays_toStringWithNSObjectArray_([((id<JavaUtilSet>) nil_chk([ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS keySet])) toArray]))) replaceAll:@"[, \\[\\]]" withReplacement:@""], [((NSString *) nil_chk([((NSString *) nil_chk(JavaUtilArrays_toStringWithNSObjectArray_([((id<JavaUtilSet>) nil_chk([ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS keySet])) toArray]))) lowercaseString])) replaceAll:@"[, \\[\\]]" withReplacement:@""]));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$$", '[', ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS, @"]+")));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_SEPARATOR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$$", '[', ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, @"]+")));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_DIGIT_PATTERN, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$C", '(', ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, ')')));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START_PATTERN, JavaUtilRegexPattern_compileWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHAR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHARS));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA_PHONE_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(?:.*?[A-Za-z]){3}.*"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER, JreStrcat("$CI$$$$C$$$$C$$$", ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, '{', ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN, @"}|[", ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS, @"]*+(?:[", ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, ComGoogleI18nPhonenumbersPhoneNumberUtil_STAR_SIGN, @"]*", ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, @"){3,}[", ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, ComGoogleI18nPhonenumbersPhoneNumberUtil_STAR_SIGN, ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA, ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, @"]*"));
    {
      NSString *singleExtnSymbolsForMatching = @"x\uff58#\uff03~\uff5e";
      NSString *singleExtnSymbolsForParsing = JreStrcat("C$", ',', singleExtnSymbolsForMatching);
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_PARSING, ComGoogleI18nPhonenumbersPhoneNumberUtil_createExtnPatternWithNSString_(singleExtnSymbolsForParsing));
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_MATCHING, ComGoogleI18nPhonenumbersPhoneNumberUtil_createExtnPatternWithNSString_(singleExtnSymbolsForMatching));
    }
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERN, JavaUtilRegexPattern_compileWithNSString_withInt_(JreStrcat("$$$", @"(?:", ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_PARSING, @")$"), ComGoogleI18nPhonenumbersPhoneNumberUtil_REGEX_FLAGS));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER_PATTERN, JavaUtilRegexPattern_compileWithNSString_withInt_(JreStrcat("$$$$", ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER, @"(?:", ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_PARSING, @")?"), ComGoogleI18nPhonenumbersPhoneNumberUtil_REGEX_FLAGS));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_NON_DIGITS_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(\\D+)"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(\\$\\d)"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_NP_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"\\$NP"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_FG_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"\\$FG"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_CC_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"\\$CC"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_ONLY_PREFIX_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"\\(?\\$1\\)?"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_instance, nil);
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil)
  }
}

@end

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_createExtnPatternWithNSString_(NSString *singleExtnSymbols) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return (JreStrcat("$$$$$$$$$", ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_EXTN_PREFIX, ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_EXTN_DIGITS, @"|[ \u00a0\\t,]*(?:e?xt(?:ensi(?:o\u0301?|\u00f3))?n?|\uff45?\uff58\uff54\uff4e?|[", singleExtnSymbols, @"]|int|anexo|\uff49\uff4e\uff54)[:\\.\uff0e]?[ \u00a0\\t,-]*", ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_EXTN_DIGITS, @"#?|[- ]+(", ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, @"{1,5})#"));
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource, id<JavaUtilMap> countryCallingCodeToRegionCodeMap) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->nanpaRegions_, new_JavaUtilHashSet_initWithInt_(35));
  JreStrongAssignAndConsume(&self->regexCache_, new_ComGoogleI18nPhonenumbersRegexCache_initWithInt_(100));
  JreStrongAssignAndConsume(&self->supportedRegions_, new_JavaUtilHashSet_initWithInt_(320));
  JreStrongAssignAndConsume(&self->countryCodesForNonGeographicalRegion_, new_JavaUtilHashSet_init());
  JreStrongAssign(&self->metadataSource_, metadataSource);
  JreStrongAssign(&self->countryCallingCodeToRegionCodeMap_, countryCallingCodeToRegionCodeMap);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap)) entrySet])) {
    id<JavaUtilList> regionCodes = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    if ([((id<JavaUtilList>) nil_chk(regionCodes)) size] == 1 && [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY)) isEqual:[regionCodes getWithInt:0]]) {
      [self->countryCodesForNonGeographicalRegion_ addWithId:[entry_ getKey]];
    }
    else {
      [self->supportedRegions_ addAllWithJavaUtilCollection:regionCodes];
    }
  }
  if ([self->supportedRegions_ removeWithId:ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY]) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"invalid metadata (country calling code was mapped to the non-geo entity as well as specific region(s))"];
  }
  [self->nanpaRegions_ addAllWithJavaUtilCollection:[countryCallingCodeToRegionCodeMap getWithId:JavaLangInteger_valueOfWithInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE)]];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_(id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource, id<JavaUtilMap> countryCallingCodeToRegionCodeMap) {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil, initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_, metadataSource, countryCallingCodeToRegionCodeMap)
}

ComGoogleI18nPhonenumbersPhoneNumberUtil *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_(id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource, id<JavaUtilMap> countryCallingCodeToRegionCodeMap) {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil, initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_, metadataSource, countryCallingCodeToRegionCodeMap)
}

ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *ComGoogleI18nPhonenumbersPhoneNumberUtil_copyNumberFormatWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *other) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *copy_ = create_ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_init();
  JreStrongAssign(&copy_->pattern_, ((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(other))->pattern_);
  JreStrongAssign(&copy_->format_, other->format_);
  jint leadingDigitsPatternSize = ((IOSObjectArray *) nil_chk(other->leadingDigitsPattern_))->size_;
  JreStrongAssignAndConsume(&copy_->leadingDigitsPattern_, [IOSObjectArray newArrayWithLength:leadingDigitsPatternSize type:NSString_class_()]);
  for (jint i = 0; i < leadingDigitsPatternSize; i++) {
    IOSObjectArray_Set(copy_->leadingDigitsPattern_, i, IOSObjectArray_Get(other->leadingDigitsPattern_, i));
  }
  JreStrongAssign(&copy_->nationalPrefixFormattingRule_, other->nationalPrefixFormattingRule_);
  JreStrongAssign(&copy_->domesticCarrierCodeFormattingRule_, other->domesticCarrierCodeFormattingRule_);
  copy_->nationalPrefixOptionalWhenFormatting_ = other->nationalPrefixOptionalWhenFormatting_;
  return copy_;
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_extractPossibleNumberWithNSString_(NSString *number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR_PATTERN)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    number = [((NSString *) nil_chk(number)) substring:[m start]];
    JavaUtilRegexMatcher *trailingCharsMatcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHAR_PATTERN)) matcherWithJavaLangCharSequence:number];
    if ([((JavaUtilRegexMatcher *) nil_chk(trailingCharsMatcher)) find]) {
      number = [((NSString *) nil_chk(number)) substring:0 endIndex:[trailingCharsMatcher start]];
      [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER) withNSString:JreStrcat("$$", @"Stripped trailing characters: ", number)];
    }
    JavaUtilRegexMatcher *secondNumber = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START_PATTERN)) matcherWithJavaLangCharSequence:number];
    if ([((JavaUtilRegexMatcher *) nil_chk(secondNumber)) find]) {
      number = [((NSString *) nil_chk(number)) substring:0 endIndex:[secondNumber start]];
    }
    return number;
  }
  else {
    return @"";
  }
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isViablePhoneNumberWithNSString_(NSString *number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  if (((jint) [((NSString *) nil_chk(number)) length]) < ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN) {
    return false;
  }
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER_PATTERN)) matcherWithJavaLangCharSequence:number];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) matches];
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithNSString_(NSString *number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA_PHONE_PATTERN)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithNSString_withJavaUtilMap_withBoolean_(number, ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_PHONE_MAPPINGS, true);
  }
  else {
    return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_(number);
  }
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithJavaLangStringBuilder_(JavaLangStringBuilder *number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  NSString *normalizedNumber = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithNSString_([((JavaLangStringBuilder *) nil_chk(number)) description]);
  [number replaceWithInt:0 withInt:[number length] withNSString:normalizedNumber];
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_(NSString *number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return [((JavaLangStringBuilder *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsWithNSString_withBoolean_(number, false))) description];
}

JavaLangStringBuilder *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsWithNSString_withBoolean_(NSString *number, jboolean keepNonDigits) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  JavaLangStringBuilder *normalizedDigits = create_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(number)) length]));
  {
    IOSCharArray *a__ = [number toCharArray];
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar c = *b__++;
      jint digit = JavaLangCharacter_digitWithChar_withInt_(c, 10);
      if (digit != -1) {
        [normalizedDigits appendWithInt:digit];
      }
      else if (keepNonDigits) {
        [normalizedDigits appendWithChar:c];
      }
    }
  }
  return normalizedDigits;
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDiallableCharsOnlyWithNSString_(NSString *number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithNSString_withJavaUtilMap_withBoolean_(number, ComGoogleI18nPhonenumbersPhoneNumberUtil_DIALLABLE_CHAR_MAPPINGS, true);
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_convertAlphaCharactersInNumberWithNSString_(NSString *number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithNSString_withJavaUtilMap_withBoolean_(number, ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_PHONE_MAPPINGS, false);
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryMobileTokenWithInt_(jint countryCallingCode) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  if ([((id<JavaUtilMap>) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_MOBILE_TOKEN_MAPPINGS)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)]) {
    return [ComGoogleI18nPhonenumbersPhoneNumberUtil_MOBILE_TOKEN_MAPPINGS getWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)];
  }
  return @"";
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithNSString_withJavaUtilMap_withBoolean_(NSString *number, id<JavaUtilMap> normalizationReplacements, jboolean removeNonMatches) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  JavaLangStringBuilder *normalizedNumber = create_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(number)) length]));
  for (jint i = 0; i < ((jint) [number length]); i++) {
    jchar character = [number charAtWithInt:i];
    JavaLangCharacter *newDigit = [((id<JavaUtilMap>) nil_chk(normalizationReplacements)) getWithId:JavaLangCharacter_valueOfWithChar_(JavaLangCharacter_toUpperCaseWithChar_(character))];
    if (newDigit != nil) {
      [normalizedNumber appendWithId:newDigit];
    }
    else if (!removeNonMatches) {
      [normalizedNumber appendWithChar:character];
    }
  }
  return [normalizedNumber description];
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_setInstanceWithComGoogleI18nPhonenumbersPhoneNumberUtil_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  @synchronized(ComGoogleI18nPhonenumbersPhoneNumberUtil_class_()) {
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_instance, util);
  }
}

ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_getInstance() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  @synchronized(ComGoogleI18nPhonenumbersPhoneNumberUtil_class_()) {
    if (ComGoogleI18nPhonenumbersPhoneNumberUtil_instance == nil) {
      ComGoogleI18nPhonenumbersPhoneNumberUtil_setInstanceWithComGoogleI18nPhonenumbersPhoneNumberUtil_(ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataLoader_(ComGoogleI18nPhonenumbersPhoneNumberUtil_DEFAULT_METADATA_LOADER));
    }
    return ComGoogleI18nPhonenumbersPhoneNumberUtil_instance;
  }
}

ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataSource_(id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  if (metadataSource == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"metadataSource could not be null.");
  }
  return create_ComGoogleI18nPhonenumbersPhoneNumberUtil_initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_(metadataSource, ComGoogleI18nPhonenumbersCountryCodeToRegionCodeMap_getCountryCodeToRegionCodeMap());
}

ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataLoader_(id<ComGoogleI18nPhonenumbersMetadataLoader> metadataLoader) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  if (metadataLoader == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"metadataLoader could not be null.");
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataSource_(create_ComGoogleI18nPhonenumbersMultiFileMetadataSourceImpl_initWithComGoogleI18nPhonenumbersMetadataLoader_(metadataLoader));
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_formattingRuleHasFirstGroupOnlyWithNSString_(NSString *nationalPrefixFormattingRule) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return ((jint) [((NSString *) nil_chk(nationalPrefixFormattingRule)) length]) == 0 || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_ONLY_PREFIX_PATTERN)) matcherWithJavaLangCharSequence:nationalPrefixFormattingRule])) matches];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *regionCode) {
  return regionCode != nil && [((id<JavaUtilSet>) nil_chk(self->supportedRegions_)) containsWithId:regionCode];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode) {
  return [((id<JavaUtilMap>) nil_chk(self->countryCallingCodeToRegionCodeMap_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)];
}

ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode, NSString *regionCode) {
  return [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY)) isEqual:regionCode] ? [self getMetadataForNonGeographicalRegionWithInt:countryCallingCode] : [self getMetadataForRegionWithNSString:regionCode];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_rawInputContainsNationalPrefixWithNSString_withNSString_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *rawInput, NSString *nationalPrefix, NSString *regionCode) {
  NSString *normalizedNationalNumber = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_(rawInput);
  if ([((NSString *) nil_chk(normalizedNationalNumber)) hasPrefix:nationalPrefix]) {
    @try {
      return [self isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:[self parseWithNSString:[normalizedNationalNumber substring:((jint) [((NSString *) nil_chk(nationalPrefix)) length])] withNSString:regionCode]];
    }
    @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
      return false;
    }
  }
  return false;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_hasUnexpectedItalianLeadingZeroWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number) {
  return [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) isItalianLeadingZero] && ![self isLeadingZeroPossibleWithInt:[number getCountryCode]];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number) {
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  NSString *phoneNumberRegion = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, phoneNumberRegion);
  if (metadata == nil) {
    return false;
  }
  NSString *nationalNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formatRule = [self chooseFormattingPatternForNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormatArray:metadata->numberFormat_ withNSString:nationalNumber];
  return formatRule != nil;
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, JavaLangStringBuilder *formattedNumber) {
  switch ([numberFormat ordinal]) {
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_Enum_E164:
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) insertWithInt:0 withInt:countryCallingCode])) insertWithInt:0 withChar:ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN];
    return;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_Enum_INTERNATIONAL:
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) insertWithInt:0 withNSString:@" "])) insertWithInt:0 withInt:countryCallingCode])) insertWithInt:0 withChar:ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN];
    return;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_Enum_RFC3966:
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) insertWithInt:0 withNSString:@"-"])) insertWithInt:0 withInt:countryCallingCode])) insertWithInt:0 withChar:ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN])) insertWithInt:0 withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PREFIX];
    return;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_Enum_NATIONAL:
    default:
    return;
  }
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *number, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat) {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withNSString_(self, number, metadata, numberFormat, nil);
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *number, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, NSString *carrierCode) {
  IOSObjectArray *intlNumberFormats = ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->intlNumberFormat_;
  IOSObjectArray *availableFormats = (((IOSObjectArray *) nil_chk(intlNumberFormats))->size_ == 0 || numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)) ? metadata->numberFormat_ : metadata->intlNumberFormat_;
  ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formattingPattern = [self chooseFormattingPatternForNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormatArray:availableFormats withNSString:number];
  return (formattingPattern == nil) ? number : ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnUsingPatternWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withNSString_(self, number, formattingPattern, numberFormat, carrierCode);
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnUsingPatternWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *nationalNumber, ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formattingPattern, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, NSString *carrierCode) {
  NSString *numberFormatRule = ((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(formattingPattern))->format_;
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:formattingPattern->pattern_])) matcherWithJavaLangCharSequence:nationalNumber];
  NSString *formattedNationalNumber = @"";
  if (numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL) && carrierCode != nil && ((jint) [carrierCode length]) > 0 && ((jint) [((NSString *) nil_chk(formattingPattern->domesticCarrierCodeFormattingRule_)) length]) > 0) {
    NSString *carrierCodeFormattingRule = formattingPattern->domesticCarrierCodeFormattingRule_;
    carrierCodeFormattingRule = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_CC_PATTERN)) matcherWithJavaLangCharSequence:carrierCodeFormattingRule])) replaceFirstWithNSString:carrierCode];
    numberFormatRule = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_PATTERN)) matcherWithJavaLangCharSequence:numberFormatRule])) replaceFirstWithNSString:carrierCodeFormattingRule];
    formattedNationalNumber = [((JavaUtilRegexMatcher *) nil_chk(m)) replaceAllWithNSString:numberFormatRule];
  }
  else {
    NSString *nationalPrefixFormattingRule = formattingPattern->nationalPrefixFormattingRule_;
    if (numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL) && nationalPrefixFormattingRule != nil && ((jint) [nationalPrefixFormattingRule length]) > 0) {
      JavaUtilRegexMatcher *firstGroupMatcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_PATTERN)) matcherWithJavaLangCharSequence:numberFormatRule];
      formattedNationalNumber = [((JavaUtilRegexMatcher *) nil_chk(m)) replaceAllWithNSString:[((JavaUtilRegexMatcher *) nil_chk(firstGroupMatcher)) replaceFirstWithNSString:nationalPrefixFormattingRule]];
    }
    else {
      formattedNationalNumber = [((JavaUtilRegexMatcher *) nil_chk(m)) replaceAllWithNSString:numberFormatRule];
    }
  }
  if (numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, RFC3966)) {
    JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_SEPARATOR_PATTERN)) matcherWithJavaLangCharSequence:formattedNationalNumber];
    if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) lookingAt]) {
      formattedNationalNumber = [matcher replaceFirstWithNSString:@""];
    }
    formattedNationalNumber = [((JavaUtilRegexMatcher *) nil_chk([matcher resetWithJavaLangCharSequence:formattedNationalNumber])) replaceAllWithNSString:@"-"];
  }
  return formattedNationalNumber;
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, JavaLangStringBuilder *formattedNumber) {
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) hasExtension] && ((jint) [((NSString *) nil_chk([number getExtension])) length]) > 0) {
    if (numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, RFC3966)) {
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) appendWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_EXTN_PREFIX])) appendWithNSString:[number getExtension]];
    }
    else {
      if (![((NSString *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->preferredExtnPrefix_)) isEqual:@""]) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) appendWithNSString:metadata->preferredExtnPrefix_])) appendWithNSString:[number getExtension]];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) appendWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_DEFAULT_EXTN_PREFIX])) appendWithNSString:[number getExtension]];
      }
    }
  }
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *nationalNumber, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata) {
  if (![self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->generalDesc_]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->premiumRate_]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PREMIUM_RATE);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->tollFree_]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, TOLL_FREE);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->sharedCost_]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, SHARED_COST);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->voip_]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, VOIP);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->personalNumber_]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PERSONAL_NUMBER);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->pager_]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PAGER);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->uan_]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UAN);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->voicemail_]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, VOICEMAIL);
  }
  jboolean isFixedLine = [self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->fixedLine_];
  if (isFixedLine) {
    if (metadata->sameMobileAndFixedLinePattern_) {
      return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE);
    }
    else if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->mobile_]) {
      return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE);
    }
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE);
  }
  if (!metadata->sameMobileAndFixedLinePattern_ && [self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc:metadata->mobile_]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE);
  }
  return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN);
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilList_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, id<JavaUtilList> regionCodes) {
  NSString *nationalNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  for (NSString * __strong regionCode in nil_chk(regionCodes)) {
    ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:regionCode];
    if (![((NSString *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->leadingDigits_)) isEqual:@""]) {
      if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:metadata->leadingDigits_])) matcherWithJavaLangCharSequence:nationalNumber])) lookingAt]) {
        return regionCode;
      }
    }
    else if (ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_(self, nationalNumber, metadata) != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN)) {
      return regionCode;
    }
  }
  return nil;
}

jint ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *regionCode) {
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:regionCode];
  if (metadata == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid region code: ", regionCode));
  }
  return metadata->countryCode_;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthAgainstPatternWithJavaUtilRegexPattern_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, JavaUtilRegexPattern *numberPattern, NSString *number) {
  JavaUtilRegexMatcher *numberMatcher = [((JavaUtilRegexPattern *) nil_chk(numberPattern)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(numberMatcher)) matches]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE);
  }
  if ([numberMatcher lookingAt]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_LONG);
  }
  else {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_SHORT);
  }
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isShorterThanPossibleNormalNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *regionMetadata, NSString *number) {
  JavaUtilRegexPattern *possibleNumberPattern = [((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneNumberDesc *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(regionMetadata))->generalDesc_))->possibleNumberPattern_];
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthAgainstPatternWithJavaUtilRegexPattern_withNSString_(self, possibleNumberPattern, number) == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_SHORT);
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_parsePrefixAsIddWithJavaUtilRegexPattern_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, JavaUtilRegexPattern *iddPattern, JavaLangStringBuilder *number) {
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(iddPattern)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) lookingAt]) {
    jint matchEnd = [m end];
    JavaUtilRegexMatcher *digitMatcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_DIGIT_PATTERN)) matcherWithJavaLangCharSequence:[((JavaLangStringBuilder *) nil_chk(number)) substringWithInt:matchEnd]];
    if ([((JavaUtilRegexMatcher *) nil_chk(digitMatcher)) find]) {
      NSString *normalizedGroup = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_([digitMatcher groupWithInt:1]);
      if ([((NSString *) nil_chk(normalizedGroup)) isEqual:@"0"]) {
        return false;
      }
    }
    [number delete__WithInt:0 withInt:matchEnd];
    return true;
  }
  return false;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_checkRegionForParsingWithNSString_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *numberToParse, NSString *defaultRegion) {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, defaultRegion)) {
    if ((numberToParse == nil) || (((jint) [((NSString *) nil_chk(numberToParse)) length]) == 0) || ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN)) matcherWithJavaLangCharSequence:numberToParse])) lookingAt]) {
      return false;
    }
  }
  return true;
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_setItalianLeadingZerosForPhoneNumberWithNSString_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(NSString *nationalNumber, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  if (((jint) [((NSString *) nil_chk(nationalNumber)) length]) > 1 && [nationalNumber charAtWithInt:0] == '0') {
    [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setItalianLeadingZeroWithBoolean:true];
    jint numberOfLeadingZeros = 1;
    while (numberOfLeadingZeros < ((jint) [nationalNumber length]) - 1 && [nationalNumber charAtWithInt:numberOfLeadingZeros] == '0') {
      numberOfLeadingZeros++;
    }
    if (numberOfLeadingZeros != 1) {
      [phoneNumber setNumberOfLeadingZerosWithInt:numberOfLeadingZeros];
    }
  }
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithNSString_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *numberToParse, NSString *defaultRegion, jboolean keepRawInput, jboolean checkRegion, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber) {
  if (numberToParse == nil) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, NOT_A_NUMBER), @"The phone number supplied was null.");
  }
  else if (((jint) [numberToParse length]) > ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_INPUT_STRING_LENGTH) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, TOO_LONG), @"The string supplied was too long to parse.");
  }
  JavaLangStringBuilder *nationalNumber = create_JavaLangStringBuilder_init();
  ComGoogleI18nPhonenumbersPhoneNumberUtil_buildNationalNumberForParsingWithNSString_withJavaLangStringBuilder_(self, numberToParse, nationalNumber);
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isViablePhoneNumberWithNSString_([nationalNumber description])) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, NOT_A_NUMBER), @"The string supplied did not seem to be a phone number.");
  }
  if (checkRegion && !ComGoogleI18nPhonenumbersPhoneNumberUtil_checkRegionForParsingWithNSString_withNSString_(self, [nationalNumber description], defaultRegion)) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE), @"Missing or invalid default region.");
  }
  if (keepRawInput) {
    [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setRawInputWithNSString:numberToParse];
  }
  NSString *extension = [self maybeStripExtensionWithJavaLangStringBuilder:nationalNumber];
  if (((jint) [((NSString *) nil_chk(extension)) length]) > 0) {
    [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setExtensionWithNSString:extension];
  }
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *regionMetadata = [self getMetadataForRegionWithNSString:defaultRegion];
  JavaLangStringBuilder *normalizedNationalNumber = create_JavaLangStringBuilder_init();
  jint countryCode = 0;
  @try {
    countryCode = [self maybeExtractCountryCodeWithNSString:[nationalNumber description] withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:regionMetadata withJavaLangStringBuilder:normalizedNationalNumber withBoolean:keepRawInput withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:phoneNumber];
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN)) matcherWithJavaLangCharSequence:[nationalNumber description]];
    if ([((ComGoogleI18nPhonenumbersNumberParseException *) nil_chk(e)) getErrorType] == JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE) && [((JavaUtilRegexMatcher *) nil_chk(matcher)) lookingAt]) {
      countryCode = [self maybeExtractCountryCodeWithNSString:[nationalNumber substringWithInt:[((JavaUtilRegexMatcher *) nil_chk(matcher)) end]] withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:regionMetadata withJavaLangStringBuilder:normalizedNationalNumber withBoolean:keepRawInput withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:phoneNumber];
      if (countryCode == 0) {
        @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE), @"Could not interpret numbers after plus-sign.");
      }
    }
    else {
      @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_([e getErrorType], [e getMessage]);
    }
  }
  if (countryCode != 0) {
    NSString *phoneNumberRegion = [self getRegionCodeForCountryCodeWithInt:countryCode];
    if (![((NSString *) nil_chk(phoneNumberRegion)) isEqual:defaultRegion]) {
      regionMetadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCode, phoneNumberRegion);
    }
  }
  else {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithJavaLangStringBuilder_(nationalNumber);
    [normalizedNationalNumber appendWithJavaLangCharSequence:nationalNumber];
    if (defaultRegion != nil) {
      countryCode = ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(regionMetadata))->countryCode_;
      [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeWithInt:countryCode];
    }
    else if (keepRawInput) {
      [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) clearCountryCodeSource];
    }
  }
  if ([normalizedNationalNumber length] < ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, TOO_SHORT_NSN), @"The string supplied is too short to be a phone number.");
  }
  if (regionMetadata != nil) {
    JavaLangStringBuilder *carrierCode = create_JavaLangStringBuilder_init();
    JavaLangStringBuilder *potentialNationalNumber = create_JavaLangStringBuilder_initWithJavaLangCharSequence_(normalizedNationalNumber);
    [self maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:potentialNationalNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:regionMetadata withJavaLangStringBuilder:carrierCode];
    if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isShorterThanPossibleNormalNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_withNSString_(self, regionMetadata, [potentialNationalNumber description])) {
      normalizedNationalNumber = potentialNationalNumber;
      if (keepRawInput) {
        [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setPreferredDomesticCarrierCodeWithNSString:[carrierCode description]];
      }
    }
  }
  jint lengthOfNationalNumber = [normalizedNationalNumber length];
  if (lengthOfNationalNumber < ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, TOO_SHORT_NSN), @"The string supplied is too short to be a phone number.");
  }
  if (lengthOfNationalNumber > ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_FOR_NSN) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, TOO_LONG), @"The string supplied is too long to be a phone number.");
  }
  ComGoogleI18nPhonenumbersPhoneNumberUtil_setItalianLeadingZerosForPhoneNumberWithNSString_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_([normalizedNationalNumber description], phoneNumber);
  [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setNationalNumberWithLong:JavaLangLong_parseLongWithNSString_([normalizedNationalNumber description])];
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_buildNationalNumberForParsingWithNSString_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *numberToParse, JavaLangStringBuilder *nationalNumber) {
  jint indexOfPhoneContext = [((NSString *) nil_chk(numberToParse)) indexOfString:ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PHONE_CONTEXT];
  if (indexOfPhoneContext > 0) {
    jint phoneContextStart = indexOfPhoneContext + ((jint) [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PHONE_CONTEXT)) length]);
    if ([numberToParse charAtWithInt:phoneContextStart] == ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN) {
      jint phoneContextEnd = [numberToParse indexOf:';' fromIndex:phoneContextStart];
      if (phoneContextEnd > 0) {
        [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithNSString:[numberToParse substring:phoneContextStart endIndex:phoneContextEnd]];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithNSString:[numberToParse substring:phoneContextStart]];
      }
    }
    jint indexOfRfc3966Prefix = [numberToParse indexOfString:ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PREFIX];
    jint indexOfNationalNumber = (indexOfRfc3966Prefix >= 0) ? indexOfRfc3966Prefix + ((jint) [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PREFIX)) length]) : 0;
    [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithNSString:[numberToParse substring:indexOfNationalNumber endIndex:indexOfPhoneContext]];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_extractPossibleNumberWithNSString_(numberToParse)];
  }
  jint indexOfIsdn = [nationalNumber indexOfWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_ISDN_SUBADDRESS];
  if (indexOfIsdn > 0) {
    [nationalNumber delete__WithInt:indexOfIsdn withInt:[nationalNumber length]];
  }
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *firstNumber, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumber) {
  NSString *firstNumberNationalNumber = NSString_valueOfLong_([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(firstNumber)) getNationalNumber]);
  NSString *secondNumberNationalNumber = NSString_valueOfLong_([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(secondNumber)) getNationalNumber]);
  return [((NSString *) nil_chk(firstNumberNationalNumber)) hasSuffix:secondNumberNationalNumber] || [((NSString *) nil_chk(secondNumberNationalNumber)) hasSuffix:firstNumberNationalNumber];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat)

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values_[4];

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "E164", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "INTERNATIONAL", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "NATIONAL", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "RFC3966", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, E164), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, RFC3966), "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$PhoneNumberFormat;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat = { "PhoneNumberFormat", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"E164", @"INTERNATIONAL", @"NATIONAL", @"RFC3966",
    };
    for (jint i = 0; i < 4; i++) {
      (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values_ count:4 type:ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initialize();
  for (int i = 0; i < 4; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *e = ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType)

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values_[12];

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIXED_LINE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "MOBILE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "FIXED_LINE_OR_MOBILE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "TOLL_FREE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "PREMIUM_RATE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "SHARED_COST", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "VOIP", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "PERSONAL_NUMBER", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "PAGER", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "UAN", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "VOICEMAIL", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "UNKNOWN", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, TOLL_FREE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PREMIUM_RATE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, SHARED_COST), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, VOIP), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PERSONAL_NUMBER), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PAGER), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UAN), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, VOICEMAIL), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN), "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$PhoneNumberType;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType = { "PhoneNumberType", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x4019, 2, 12, 14, -1, -1, 15, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 12 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"FIXED_LINE", @"MOBILE", @"FIXED_LINE_OR_MOBILE", @"TOLL_FREE", @"PREMIUM_RATE", @"SHARED_COST", @"VOIP", @"PERSONAL_NUMBER", @"PAGER", @"UAN", @"VOICEMAIL", @"UNKNOWN",
    };
    for (jint i = 0; i < 12; i++) {
      (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values_ count:12 type:ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initialize();
  for (int i = 0; i < 12; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *e = ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initialize();
  if (ordinal >= 12) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType)

ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values_[5];

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_A_NUMBER", "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "NO_MATCH", "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SHORT_NSN_MATCH", "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "NSN_MATCH", "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "EXACT_MATCH", "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NOT_A_NUMBER), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NO_MATCH), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, SHORT_NSN_MATCH), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NSN_MATCH), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, EXACT_MATCH), "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$MatchType;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType = { "MatchType", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x4019, 2, 5, 7, -1, -1, 8, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"NOT_A_NUMBER", @"NO_MATCH", @"SHORT_NSN_MATCH", @"NSN_MATCH", @"EXACT_MATCH",
    };
    for (jint i = 0; i < 5; i++) {
      (ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values_ count:5 type:ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initialize();
  for (int i = 0; i < 5; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *e = ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult)

ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values_[4];

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IS_POSSIBLE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "INVALID_COUNTRY_CODE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "TOO_SHORT", "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "TOO_LONG", "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, INVALID_COUNTRY_CODE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_SHORT), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_LONG), "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$ValidationResult;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult = { "ValidationResult", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"IS_POSSIBLE", @"INVALID_COUNTRY_CODE", @"TOO_SHORT", @"TOO_LONG",
    };
    for (jint i = 0; i < 4; i++) {
      (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values_ count:4 type:ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initialize();
  for (int i = 0; i < 4; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *e = ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency)

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values_[4];

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                          withNSString:(NSString *)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x400, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "POSSIBLE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "VALID", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "STRICT_GROUPING", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "EXACT_GROUPING", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "verify", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LNSString;LComGoogleI18nPhonenumbersPhoneNumberUtil;", "valueOf", "LNSString;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, POSSIBLE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, VALID), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, STRICT_GROUPING), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, EXACT_GROUPING), "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$Leniency;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency = { "Leniency", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x4409, 3, 4, 8, -1, -1, 9, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency class]) {
    size_t allocSize = 0;
    size_t objSize_POSSIBLE = class_getInstanceSize([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1 class]);
    allocSize += objSize_POSSIBLE;
    size_t objSize_VALID = class_getInstanceSize([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2 class]);
    allocSize += objSize_VALID;
    size_t objSize_STRICT_GROUPING = class_getInstanceSize([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3 class]);
    allocSize += objSize_STRICT_GROUPING;
    size_t objSize_EXACT_GROUPING = class_getInstanceSize([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4 class]);
    allocSize += objSize_EXACT_GROUPING;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, POSSIBLE) = e = objc_constructInstance([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1 class], (void *)ptr), ptr += objSize_POSSIBLE);
    ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1_initWithNSString_withInt_(e, @"POSSIBLE", 0);
    (JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, VALID) = e = objc_constructInstance([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2 class], (void *)ptr), ptr += objSize_VALID);
    ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2_initWithNSString_withInt_(e, @"VALID", 1);
    (JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, STRICT_GROUPING) = e = objc_constructInstance([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3 class], (void *)ptr), ptr += objSize_STRICT_GROUPING);
    ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_initWithNSString_withInt_(e, @"STRICT_GROUPING", 2);
    (JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, EXACT_GROUPING) = e = objc_constructInstance([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4 class], (void *)ptr), ptr += objSize_EXACT_GROUPING);
    ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_initWithNSString_withInt_(e, @"EXACT_GROUPING", 3);
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values_ count:4 type:ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initialize();
  for (int i = 0; i < 4; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *e = ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency)

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                          withNSString:(NSString *)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  return [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isPossibleNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verify", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LNSString;LComGoogleI18nPhonenumbersPhoneNumberUtil;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$1 *self, NSString *__name, jint __ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                          withNSString:(NSString *)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  if (![((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number] || !ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, candidate, util)) {
    return false;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, util);
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verify", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LNSString;LComGoogleI18nPhonenumbersPhoneNumberUtil;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$2 *self, NSString *__name, jint __ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                          withNSString:(NSString *)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  if (![((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number] || !ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, candidate, util) || ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_(number, candidate) || !ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, util)) {
    return false;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker_(number, candidate, util, create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1_init());
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verify", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LNSString;LComGoogleI18nPhonenumbersPhoneNumberUtil;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3 *self, NSString *__name, jint __ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1

- (jboolean)checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
               withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                          withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                  withNSStringArray:(IOSObjectArray *)expectedNumberGroups {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(util, number, normalizedCandidate, expectedNumberGroups);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangStringBuilder:withNSStringArray:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkGroups", "LComGoogleI18nPhonenumbersPhoneNumberUtil;LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaLangStringBuilder;[LNSString;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3;", "verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1_init(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1 *self) {
  NSObject_init(self);
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1_init() {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1, init)
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$3_$1, init)
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                          withNSString:(NSString *)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  if (![((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number] || !ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, candidate, util) || ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_(number, candidate) || !ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, util)) {
    return false;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker_(number, candidate, util, create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1_init());
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verify", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LNSString;LComGoogleI18nPhonenumbersPhoneNumberUtil;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4 *self, NSString *__name, jint __ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1

- (jboolean)checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
               withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                          withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                  withNSStringArray:(IOSObjectArray *)expectedNumberGroups {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(util, number, normalizedCandidate, expectedNumberGroups);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangStringBuilder:withNSStringArray:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkGroups", "LComGoogleI18nPhonenumbersPhoneNumberUtil;LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaLangStringBuilder;[LNSString;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4;", "verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1_init(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1 *self) {
  NSObject_init(self);
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1_init() {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1, init)
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_$4_$1, init)
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_$1

- (JavaIoInputStream *)loadMetadataWithNSString:(NSString *)metadataFileName {
  return [ComGoogleI18nPhonenumbersPhoneNumberUtil_class_() getResourceAsStream:metadataFileName];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaIoInputStream;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(loadMetadataWithNSString:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "loadMetadata", "LNSString;", "LComGoogleI18nPhonenumbersPhoneNumberUtil;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_$1 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_$1;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_$1_init(ComGoogleI18nPhonenumbersPhoneNumberUtil_$1 *self) {
  NSObject_init(self);
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_$1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_$1_init() {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_$1, init)
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_$1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_$1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_$1, init)
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_$2

- (id<JavaUtilIterator>)iterator {
  return create_ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(this$0_, val$text_, val$defaultRegion_, val$leniency_, val$maxTries_);
}

- (instancetype)initWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)outer$
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)capture$0
                                                    withNSString:(NSString *)capture$1
           withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)capture$2
                                                        withLong:(jlong)capture$3 {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_$2_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(self, outer$, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$text_);
  RELEASE_(val$defaultRegion_);
  RELEASE_(val$leniency_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithComGoogleI18nPhonenumbersPhoneNumberUtil:withJavaLangCharSequence:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleI18nPhonenumbersPhoneNumberUtil;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$text_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$defaultRegion_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$leniency_", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$maxTries_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lcom/google/i18n/phonenumbers/PhoneNumberMatch;>;", "LComGoogleI18nPhonenumbersPhoneNumberUtil;LJavaLangCharSequence;LNSString;LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;J", "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "findNumbersWithJavaLangCharSequence:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:withLong:", "Ljava/lang/Object;Ljava/lang/Iterable<Lcom/google/i18n/phonenumbers/PhoneNumberMatch;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_$2 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x8008, 2, 5, 2, -1, 3, 4, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_$2;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_$2_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil_$2 *self, ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$text_, capture$0);
  JreStrongAssign(&self->val$defaultRegion_, capture$1);
  JreStrongAssign(&self->val$leniency_, capture$2);
  self->val$maxTries_ = capture$3;
  NSObject_init(self);
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_$2 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_$2_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3) {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_$2, initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_, outer$, capture$0, capture$1, capture$2, capture$3)
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_$2 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_$2_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3) {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_$2, initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_, outer$, capture$0, capture$1, capture$2, capture$3)
}
