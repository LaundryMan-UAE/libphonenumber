//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/libphonenumber/java/libphonenumber/src/main/java/com/google/i18n/phonenumbers/PhoneNumberUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/i18n/phonenumbers/AsYouTypeFormatter.h"
#include "com/google/i18n/phonenumbers/CountryCodeToRegionCodeMap.h"
#include "com/google/i18n/phonenumbers/MetadataLoader.h"
#include "com/google/i18n/phonenumbers/MetadataManager.h"
#include "com/google/i18n/phonenumbers/MetadataSource.h"
#include "com/google/i18n/phonenumbers/MultiFileMetadataSourceImpl.h"
#include "com/google/i18n/phonenumbers/NumberParseException.h"
#include "com/google/i18n/phonenumbers/PhoneNumberMatcher.h"
#include "com/google/i18n/phonenumbers/PhoneNumberUtil.h"
#include "com/google/i18n/phonenumbers/Phonemetadata.h"
#include "com/google/i18n/phonenumbers/Phonenumber.h"
#include "com/google/i18n/phonenumbers/internal/MatcherApi.h"
#include "com/google/i18n/phonenumbers/internal/RegexBasedMatcher.h"
#include "com/google/i18n/phonenumbers/internal/RegexCache.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/TreeSet.h"
#include "java/util/function/Consumer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil () {
 @public
  id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource_;
  id<JavaUtilMap> countryCallingCodeToRegionCodeMap_;
  id<ComGoogleI18nPhonenumbersInternalMatcherApi> matcherApi_;
  id<JavaUtilSet> nanpaRegions_;
  ComGoogleI18nPhonenumbersInternalRegexCache *regexCache_;
  id<JavaUtilSet> supportedRegions_;
  id<JavaUtilSet> countryCodesForNonGeographicalRegion_;
}

/*!
 @brief Helper initialiser method to create the regular-expression pattern to match extensions,
  allowing the one-char extension symbols provided by <code>singleExtnSymbols</code>.
 */
+ (NSString *)createExtnPatternWithNSString:(NSString *)singleExtnSymbols;

/*!
 @brief Normalizes a string of characters representing a phone number by replacing all characters found
  in the accompanying map with the values therein, and stripping all other characters if
  removeNonMatches is true.
 @param number a string of characters representing a phone number
 @param normalizationReplacements a mapping of characters to what they should be replaced by in      the normalized version of the phone number
 @param removeNonMatches indicates whether characters that are not able to be replaced should      be stripped from the number. If this is false, they will be left unchanged in the number.
 @return the normalized string version of the phone number
 */
+ (NSString *)normalizeHelperWithJavaLangCharSequence:(id<JavaLangCharSequence>)number
                                      withJavaUtilMap:(id<JavaUtilMap>)normalizationReplacements
                                          withBoolean:(jboolean)removeNonMatches;

/*!
 @brief Returns true if there is any possible number data set for a particular PhoneNumberDesc.
 */
+ (jboolean)descHasPossibleNumberDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *)desc;

/*!
 @brief Returns true if there is any data set for a particular PhoneNumberDesc.
 */
+ (jboolean)descHasDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *)desc;

/*!
 @brief Returns the types we have metadata for based on the PhoneMetadata object passed in, which must
  be non-null.
 */
- (id<JavaUtilSet>)getSupportedTypesForMetadataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata;

/*!
 @brief Create a new <code>PhoneNumberUtil</code> instance to carry out international phone number
  formatting, parsing, or validation.The instance is loaded with all metadata by
  using the metadataSource specified.
 <p>This method should only be used in the rare case in which you want to manage your own
  metadata loading. Calling this method multiple times is very expensive, as each time
  a new instance is created from scratch. When in doubt, use <code>getInstance</code>.
 @param metadataSource customized metadata source. This should not be null
 @return a PhoneNumberUtil instance
 */
+ (ComGoogleI18nPhonenumbersPhoneNumberUtil *)createInstanceWithComGoogleI18nPhonenumbersMetadataSource:(id<ComGoogleI18nPhonenumbersMetadataSource>)metadataSource;

/*!
 @brief Helper function to check region code is not unknown or null.
 */
- (jboolean)isValidRegionCodeWithNSString:(NSString *)regionCode;

/*!
 @brief Helper function to check the country calling code is valid.
 */
- (jboolean)hasValidCountryCallingCodeWithInt:(jint)countryCallingCode;

- (ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)getMetadataForRegionOrCallingCodeWithInt:(jint)countryCallingCode
                                                                                      withNSString:(NSString *)regionCode;

- (jboolean)rawInputContainsNationalPrefixWithNSString:(NSString *)rawInput
                                          withNSString:(NSString *)nationalPrefix
                                          withNSString:(NSString *)regionCode;

- (jboolean)hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number;

/*!
 @brief A helper function that is used by format and formatByPattern.
 */
- (void)prefixNumberWithCountryCallingCodeWithInt:(jint)countryCallingCode
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                        withJavaLangStringBuilder:(JavaLangStringBuilder *)formattedNumber;

- (NSString *)formatNsnWithNSString:(NSString *)number
withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat;

- (NSString *)formatNsnWithNSString:(NSString *)number
withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
           withJavaLangCharSequence:(id<JavaLangCharSequence>)carrierCode;

- (NSString *)formatNsnUsingPatternWithNSString:(NSString *)nationalNumber
withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *)formattingPattern
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                       withJavaLangCharSequence:(id<JavaLangCharSequence>)carrierCode;

/*!
 @brief Appends the formatted extension of a phone number to formattedNumber, if the phone number had
  an extension specified.
 */
- (void)maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                 withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata
                           withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                                                                withJavaLangStringBuilder:(JavaLangStringBuilder *)formattedNumber;

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)getNumberTypeHelperWithNSString:(NSString *)nationalNumber
                                     withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata;

- (NSString *)getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                      withJavaUtilList:(id<JavaUtilList>)regionCodes;

/*!
 @brief Returns the country calling code for a specific region.For example, this would be 1 for the
  United States, and 64 for New Zealand.
 Assumes the region is already valid.
 @param regionCode the region that we want to get the country calling code for
 @return the country calling code for the region denoted by regionCode
 @throw IllegalArgumentExceptionif the region is invalid
 */
- (jint)getCountryCodeForValidRegionWithNSString:(NSString *)regionCode;

/*!
 @brief Helper method to check a number against possible lengths for this region, based on the metadata
  being passed in, and determine whether it matches, or is too short or too long.
 */
- (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)testNumberLengthWithJavaLangCharSequence:(id<JavaLangCharSequence>)number
                                               withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata;

/*!
 @brief Helper method to check a number against possible lengths for this number type, and determine
  whether it matches, or is too short or too long.
 */
- (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)testNumberLengthWithJavaLangCharSequence:(id<JavaLangCharSequence>)number
                                               withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata
                                           withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)type;

/*!
 @brief Strips the IDD from the start of the number if present.Helper function used by
  maybeStripInternationalPrefixAndNormalize.
 */
- (jboolean)parsePrefixAsIddWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)iddPattern
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)number;

/*!
 @brief Checks to see that the region code used is valid, or if it is not valid, that the number to
  parse starts with a + symbol so that we can attempt to infer the region from the number.
 Returns false if it cannot use the region provided and the region cannot be inferred.
 */
- (jboolean)checkRegionForParsingWithJavaLangCharSequence:(id<JavaLangCharSequence>)numberToParse
                                             withNSString:(NSString *)defaultRegion;

/*!
 @brief Parses a string and fills up the phoneNumber.This method is the same as the public
  parse() method, with the exception that it allows the default region to be null, for use by
  isNumberMatch(). checkRegion should be set to false if it is permitted for the default region
  to be null or unknown ("ZZ").
 Note if any new field is added to this method that should always be filled in, even when
  keepRawInput is false, it should also be handled in the copyCoreFieldsOnly() method.
 */
- (void)parseHelperWithJavaLangCharSequence:(id<JavaLangCharSequence>)numberToParse
                               withNSString:(NSString *)defaultRegion
                                withBoolean:(jboolean)keepRawInput
                                withBoolean:(jboolean)checkRegion
withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber;

/*!
 @brief Converts numberToParse to a form that we can parse and write it to nationalNumber if it is
  written in RFC3966; otherwise extract a possible number out of it and write to nationalNumber.
 */
- (void)buildNationalNumberForParsingWithNSString:(NSString *)numberToParse
                        withJavaLangStringBuilder:(JavaLangStringBuilder *)nationalNumber;

/*!
 @brief Returns a new phone number containing only the fields needed to uniquely identify a phone
  number, rather than any fields that capture the context in which the phone number was created.
 These fields correspond to those set in parse() rather than parseAndKeepRawInput().
 */
+ (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)copyCoreFieldsOnlyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumberIn OBJC_METHOD_FAMILY_NONE;

- (jboolean)isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)firstNumber
                                            withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)secondNumber;

@end

J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, metadataSource_, id<ComGoogleI18nPhonenumbersMetadataSource>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, countryCallingCodeToRegionCodeMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, matcherApi_, id<ComGoogleI18nPhonenumbersInternalMatcherApi>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, nanpaRegions_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, regexCache_, ComGoogleI18nPhonenumbersInternalRegexCache *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, supportedRegions_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberUtil, countryCodesForNonGeographicalRegion_, id<JavaUtilSet>)

inline JavaUtilLoggingLogger *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_logger(void);
static JavaUtilLoggingLogger *ComGoogleI18nPhonenumbersPhoneNumberUtil_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, logger, JavaUtilLoggingLogger *)

inline jint ComGoogleI18nPhonenumbersPhoneNumberUtil_get_MIN_LENGTH_FOR_NSN(void);
#define ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN 2
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberUtil, MIN_LENGTH_FOR_NSN, jint)

inline jint ComGoogleI18nPhonenumbersPhoneNumberUtil_get_MAX_INPUT_STRING_LENGTH(void);
#define ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_INPUT_STRING_LENGTH 250
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberUtil, MAX_INPUT_STRING_LENGTH, jint)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_UNKNOWN_REGION(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION = @"ZZ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, UNKNOWN_REGION, NSString *)

inline jint ComGoogleI18nPhonenumbersPhoneNumberUtil_get_NANPA_COUNTRY_CODE(void);
#define ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberUtil, NANPA_COUNTRY_CODE, jint)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX = @"3";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX, NSString *)

inline id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_MOBILE_TOKEN_MAPPINGS(void);
static id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_MOBILE_TOKEN_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, MOBILE_TOKEN_MAPPINGS, id<JavaUtilMap>)

inline id<JavaUtilSet> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_GEO_MOBILE_COUNTRIES_WITHOUT_MOBILE_AREA_CODES(void);
static id<JavaUtilSet> ComGoogleI18nPhonenumbersPhoneNumberUtil_GEO_MOBILE_COUNTRIES_WITHOUT_MOBILE_AREA_CODES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, GEO_MOBILE_COUNTRIES_WITHOUT_MOBILE_AREA_CODES, id<JavaUtilSet>)

inline id<JavaUtilSet> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_GEO_MOBILE_COUNTRIES(void);
static id<JavaUtilSet> ComGoogleI18nPhonenumbersPhoneNumberUtil_GEO_MOBILE_COUNTRIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, GEO_MOBILE_COUNTRIES, id<JavaUtilSet>)

inline jchar ComGoogleI18nPhonenumbersPhoneNumberUtil_get_STAR_SIGN(void);
#define ComGoogleI18nPhonenumbersPhoneNumberUtil_STAR_SIGN '*'
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberUtil, STAR_SIGN, jchar)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_RFC3966_EXTN_PREFIX(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_EXTN_PREFIX = @";ext=";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, RFC3966_EXTN_PREFIX, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_RFC3966_PREFIX(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PREFIX = @"tel:";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, RFC3966_PREFIX, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_RFC3966_PHONE_CONTEXT(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PHONE_CONTEXT = @";phone-context=";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, RFC3966_PHONE_CONTEXT, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_RFC3966_ISDN_SUBADDRESS(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_ISDN_SUBADDRESS = @";isub=";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, RFC3966_ISDN_SUBADDRESS, NSString *)

inline id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_DIALLABLE_CHAR_MAPPINGS(void);
static id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_DIALLABLE_CHAR_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, DIALLABLE_CHAR_MAPPINGS, id<JavaUtilMap>)

inline id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_ALPHA_MAPPINGS(void);
static id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, ALPHA_MAPPINGS, id<JavaUtilMap>)

inline id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_ALPHA_PHONE_MAPPINGS(void);
static id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_PHONE_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, ALPHA_PHONE_MAPPINGS, id<JavaUtilMap>)

inline id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_get_ALL_PLUS_NUMBER_GROUPING_SYMBOLS(void);
static id<JavaUtilMap> ComGoogleI18nPhonenumbersPhoneNumberUtil_ALL_PLUS_NUMBER_GROUPING_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, ALL_PLUS_NUMBER_GROUPING_SYMBOLS, id<JavaUtilMap>)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_SINGLE_INTERNATIONAL_PREFIX(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_SINGLE_INTERNATIONAL_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, SINGLE_INTERNATIONAL_PREFIX, JavaUtilRegexPattern *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_DIGITS(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS = @"\\p{Nd}";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, DIGITS, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_ALPHA(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_ALPHA, NSString *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_SEPARATOR_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_SEPARATOR_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, SEPARATOR_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_CAPTURING_DIGIT_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_DIGIT_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, CAPTURING_DIGIT_PATTERN, JavaUtilRegexPattern *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_START_CHAR(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR = @"[+\uff0b\\p{Nd}]";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_START_CHAR, NSString *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_START_CHAR_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_START_CHAR_PATTERN, JavaUtilRegexPattern *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_SECOND_NUMBER_START(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START = @"[\\\\/] *x";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, SECOND_NUMBER_START, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_UNWANTED_END_CHARS(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHARS = @"[[\\P{N}&&\\P{L}]&&[^#]]+$";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, UNWANTED_END_CHARS, NSString *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_ALPHA_PHONE_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA_PHONE_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_ALPHA_PHONE_PATTERN, JavaUtilRegexPattern *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_PHONE_NUMBER(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_PHONE_NUMBER, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_DEFAULT_EXTN_PREFIX(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_DEFAULT_EXTN_PREFIX = @" ext. ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, DEFAULT_EXTN_PREFIX, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_CAPTURING_EXTN_DIGITS(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_EXTN_DIGITS = @"(\\p{Nd}{1,7})";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, CAPTURING_EXTN_DIGITS, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_EXTN_PATTERNS_FOR_PARSING(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_PARSING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, EXTN_PATTERNS_FOR_PARSING, NSString *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_EXTN_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, EXTN_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_PHONE_NUMBER_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, VALID_PHONE_NUMBER_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_FIRST_GROUP_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, FIRST_GROUP_PATTERN, JavaUtilRegexPattern *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_NP_STRING(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_NP_STRING = @"$NP";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, NP_STRING, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_FG_STRING(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_FG_STRING = @"$FG";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, FG_STRING, NSString *)

inline NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_CC_STRING(void);
static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_CC_STRING = @"$CC";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, CC_STRING, NSString *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_FIRST_GROUP_ONLY_PREFIX_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_ONLY_PREFIX_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberUtil, FIRST_GROUP_ONLY_PREFIX_PATTERN, JavaUtilRegexPattern *)

inline ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_get_instance(void);
inline ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_set_instance(ComGoogleI18nPhonenumbersPhoneNumberUtil *value);
static ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_instance;
J2OBJC_STATIC_FIELD_OBJ(ComGoogleI18nPhonenumbersPhoneNumberUtil, instance, ComGoogleI18nPhonenumbersPhoneNumberUtil *)

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_createExtnPatternWithNSString_(NSString *singleExtnSymbols);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithJavaLangCharSequence_withJavaUtilMap_withBoolean_(id<JavaLangCharSequence> number, id<JavaUtilMap> normalizationReplacements, jboolean removeNonMatches);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_descHasPossibleNumberDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_(ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *desc);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_descHasDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_(ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *desc);

__attribute__((unused)) static id<JavaUtilSet> ComGoogleI18nPhonenumbersPhoneNumberUtil_getSupportedTypesForMetadataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataSource_(id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *regionCode);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode, NSString *regionCode);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_rawInputContainsNationalPrefixWithNSString_withNSString_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *rawInput, NSString *nationalPrefix, NSString *regionCode);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, JavaLangStringBuilder *formattedNumber);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *number, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangCharSequence_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *number, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, id<JavaLangCharSequence> carrierCode);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnUsingPatternWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangCharSequence_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *nationalNumber, ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *formattingPattern, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, id<JavaLangCharSequence> carrierCode);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, JavaLangStringBuilder *formattedNumber);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *nationalNumber, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilList_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, id<JavaUtilList> regionCodes);

__attribute__((unused)) static jint ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *regionCode);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, id<JavaLangCharSequence> number, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, id<JavaLangCharSequence> number, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *type);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_parsePrefixAsIddWithJavaUtilRegexPattern_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, JavaUtilRegexPattern *iddPattern, JavaLangStringBuilder *number);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_checkRegionForParsingWithJavaLangCharSequence_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, id<JavaLangCharSequence> numberToParse, NSString *defaultRegion);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithJavaLangCharSequence_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, id<JavaLangCharSequence> numberToParse, NSString *defaultRegion, jboolean keepRawInput, jboolean checkRegion, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_buildNationalNumberForParsingWithNSString_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *numberToParse, JavaLangStringBuilder *nationalNumber);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *ComGoogleI18nPhonenumbersPhoneNumberUtil_copyCoreFieldsOnlyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumberIn);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *firstNumber, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumber);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *self, NSString *__name, jint __ordinal);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1 : ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1 *self, NSString *__name, jint __ordinal);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2 : ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2 *self, NSString *__name, jint __ordinal);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3 : ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3 *self, NSString *__name, jint __ordinal);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1 : NSObject < ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker >

- (instancetype)init;

- (jboolean)checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
               withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                          withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                  withNSStringArray:(IOSObjectArray *)expectedNumberGroups;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1_init(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1 *self);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1_init(void);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4 : ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4 *self, NSString *__name, jint __ordinal);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1 : NSObject < ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker >

- (instancetype)init;

- (jboolean)checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
               withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                          withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                  withNSStringArray:(IOSObjectArray *)expectedNumberGroups;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1_init(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1 *self);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1_init(void);

@interface ComGoogleI18nPhonenumbersPhoneNumberUtil_1 : NSObject < JavaLangIterable > {
 @public
  ComGoogleI18nPhonenumbersPhoneNumberUtil *this$0_;
  id<JavaLangCharSequence> val$text_;
  NSString *val$defaultRegion_;
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *val$leniency_;
  jlong val$maxTries_;
}

- (instancetype)initWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)outer$
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)capture$0
                                                    withNSString:(NSString *)capture$1
           withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)capture$2
                                                        withLong:(jlong)capture$3;

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberUtil_1)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberUtil_1_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil_1 *self, ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_1_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberUtil_1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_1_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3);

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil)

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION = @"-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e";
NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS = @"+\uff0b";
JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN;
JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START_PATTERN;
JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHAR_PATTERN;
NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_MATCHING;
JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberUtil_NON_DIGITS_PATTERN;
NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY = @"001";

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil

+ (NSString *)createExtnPatternWithNSString:(NSString *)singleExtnSymbols {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_createExtnPatternWithNSString_(singleExtnSymbols);
}

- (instancetype)initWithComGoogleI18nPhonenumbersMetadataSource:(id<ComGoogleI18nPhonenumbersMetadataSource>)metadataSource
                                                withJavaUtilMap:(id<JavaUtilMap>)countryCallingCodeToRegionCodeMap {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_(self, metadataSource, countryCallingCodeToRegionCodeMap);
  return self;
}

+ (id<JavaLangCharSequence>)extractPossibleNumberWithJavaLangCharSequence:(id<JavaLangCharSequence>)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_extractPossibleNumberWithJavaLangCharSequence_(number);
}

+ (jboolean)isViablePhoneNumberWithJavaLangCharSequence:(id<JavaLangCharSequence>)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_isViablePhoneNumberWithJavaLangCharSequence_(number);
}

+ (JavaLangStringBuilder *)normalizeWithJavaLangStringBuilder:(JavaLangStringBuilder *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithJavaLangStringBuilder_(number);
}

+ (NSString *)normalizeDigitsOnlyWithJavaLangCharSequence:(id<JavaLangCharSequence>)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithJavaLangCharSequence_(number);
}

+ (JavaLangStringBuilder *)normalizeDigitsWithJavaLangCharSequence:(id<JavaLangCharSequence>)number
                                                       withBoolean:(jboolean)keepNonDigits {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsWithJavaLangCharSequence_withBoolean_(number, keepNonDigits);
}

+ (NSString *)normalizeDiallableCharsOnlyWithJavaLangCharSequence:(id<JavaLangCharSequence>)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDiallableCharsOnlyWithJavaLangCharSequence_(number);
}

+ (NSString *)convertAlphaCharactersInNumberWithJavaLangCharSequence:(id<JavaLangCharSequence>)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_convertAlphaCharactersInNumberWithJavaLangCharSequence_(number);
}

- (jint)getLengthOfGeographicalAreaCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:[self getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number]];
  if (metadata == nil) {
    return 0;
  }
  if (![metadata hasNationalPrefix] && ![((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) isItalianLeadingZero]) {
    return 0;
  }
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *type = [self getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  if (type == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE) && [((id<JavaUtilSet>) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_GEO_MOBILE_COUNTRIES_WITHOUT_MOBILE_AREA_CODES)) containsWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)]) {
    return 0;
  }
  if (![self isNumberGeographicalWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:type withInt:countryCallingCode]) {
    return 0;
  }
  return [self getLengthOfNationalDestinationCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
}

- (jint)getLengthOfNationalDestinationCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *copiedProto;
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) hasExtension]) {
    copiedProto = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
    [copiedProto mergeFromWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
    [copiedProto clearExtension];
  }
  else {
    copiedProto = number;
  }
  NSString *nationalSignificantNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:copiedProto withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)];
  IOSObjectArray *numberGroups = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_NON_DIGITS_PATTERN)) splitWithJavaLangCharSequence:nationalSignificantNumber];
  if (((IOSObjectArray *) nil_chk(numberGroups))->size_ <= 3) {
    return 0;
  }
  if ([self getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number] == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE)) {
    NSString *mobileToken = ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryMobileTokenWithInt_([number getCountryCode]);
    if (![((NSString *) nil_chk(mobileToken)) isEqual:@""]) {
      return [((NSString *) nil_chk(IOSObjectArray_Get(numberGroups, 2))) java_length] + [((NSString *) nil_chk(IOSObjectArray_Get(numberGroups, 3))) java_length];
    }
  }
  return [((NSString *) nil_chk(IOSObjectArray_Get(numberGroups, 2))) java_length];
}

+ (NSString *)getCountryMobileTokenWithInt:(jint)countryCallingCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryMobileTokenWithInt_(countryCallingCode);
}

+ (NSString *)normalizeHelperWithJavaLangCharSequence:(id<JavaLangCharSequence>)number
                                      withJavaUtilMap:(id<JavaUtilMap>)normalizationReplacements
                                          withBoolean:(jboolean)removeNonMatches {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithJavaLangCharSequence_withJavaUtilMap_withBoolean_(number, normalizationReplacements, removeNonMatches);
}

+ (void)setInstanceWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_setInstanceWithComGoogleI18nPhonenumbersPhoneNumberUtil_(util);
}

- (id<JavaUtilSet>)getSupportedRegions {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(supportedRegions_);
}

- (id<JavaUtilSet>)getSupportedGlobalNetworkCallingCodes {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(countryCodesForNonGeographicalRegion_);
}

- (id<JavaUtilSet>)getSupportedCallingCodes {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) keySet]);
}

+ (jboolean)descHasPossibleNumberDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *)desc {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_descHasPossibleNumberDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_(desc);
}

+ (jboolean)descHasDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *)desc {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_descHasDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_(desc);
}

- (id<JavaUtilSet>)getSupportedTypesForMetadataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getSupportedTypesForMetadataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, metadata);
}

- (id<JavaUtilSet>)getSupportedTypesForRegionWithNSString:(NSString *)regionCode {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCode)) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", @"Invalid or unknown region code provided: ", regionCode)];
    return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(create_JavaUtilTreeSet_init());
  }
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:regionCode];
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getSupportedTypesForMetadataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, metadata);
}

- (id<JavaUtilSet>)getSupportedTypesForNonGeoEntityWithInt:(jint)countryCallingCode {
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [self getMetadataForNonGeographicalRegionWithInt:countryCallingCode];
  if (metadata == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$I", @"Unknown country calling code for a non-geographical entity provided: ", countryCallingCode)];
    return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(create_JavaUtilTreeSet_init());
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getSupportedTypesForMetadataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, metadata);
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil *)getInstance {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getInstance();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil *)createInstanceWithComGoogleI18nPhonenumbersMetadataLoader:(id<ComGoogleI18nPhonenumbersMetadataLoader>)metadataLoader {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataLoader_(metadataLoader);
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil *)createInstanceWithComGoogleI18nPhonenumbersMetadataSource:(id<ComGoogleI18nPhonenumbersMetadataSource>)metadataSource {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataSource_(metadataSource);
}

+ (jboolean)formattingRuleHasFirstGroupOnlyWithNSString:(NSString *)nationalPrefixFormattingRule {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formattingRuleHasFirstGroupOnlyWithNSString_(nationalPrefixFormattingRule);
}

- (jboolean)isNumberGeographicalWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  return [self isNumberGeographicalWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:[self getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:phoneNumber] withInt:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) getCountryCode]];
}

- (jboolean)isNumberGeographicalWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)phoneNumberType
                                                                                     withInt:(jint)countryCallingCode {
  return phoneNumberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE) || phoneNumberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE) || ([((id<JavaUtilSet>) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_GEO_MOBILE_COUNTRIES)) containsWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)] && phoneNumberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE));
}

- (jboolean)isValidRegionCodeWithNSString:(NSString *)regionCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCode);
}

- (jboolean)hasValidCountryCallingCodeWithInt:(jint)countryCallingCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode);
}

- (NSString *)formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
          withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat {
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getNationalNumber] == 0 && [number hasRawInput]) {
    NSString *rawInput = [number getRawInput];
    if ([((NSString *) nil_chk(rawInput)) java_length] > 0) {
      return rawInput;
    }
  }
  JavaLangStringBuilder *formattedNumber = create_JavaLangStringBuilder_initWithInt_(20);
  [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:numberFormat withJavaLangStringBuilder:formattedNumber];
  return [formattedNumber description];
}

- (void)formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
    withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                                         withJavaLangStringBuilder:(JavaLangStringBuilder *)formattedNumber {
  [((JavaLangStringBuilder *) nil_chk(formattedNumber)) setLengthWithInt:0];
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, E164)) {
    [formattedNumber appendWithNSString:nationalSignificantNumber];
    ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, E164), formattedNumber);
    return;
  }
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode)) {
    [formattedNumber appendWithNSString:nationalSignificantNumber];
    return;
  }
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, regionCode);
  [formattedNumber appendWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_(self, nationalSignificantNumber, metadata, numberFormat)];
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadata, numberFormat, formattedNumber);
  ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, numberFormat, formattedNumber);
}

- (NSString *)formatByPatternWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                   withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                                                                 withJavaUtilList:(id<JavaUtilList>)userDefinedFormats {
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode)) {
    return nationalSignificantNumber;
  }
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, regionCode);
  JavaLangStringBuilder *formattedNumber = create_JavaLangStringBuilder_initWithInt_(20);
  ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *formattingPattern = [self chooseFormattingPatternForNumberWithJavaUtilList:userDefinedFormats withNSString:nationalSignificantNumber];
  if (formattingPattern == nil) {
    [formattedNumber appendWithNSString:nationalSignificantNumber];
  }
  else {
    ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_Builder *numFormatCopy = ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_newBuilder();
    [((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_Builder *) nil_chk(numFormatCopy)) mergeFromWithComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:formattingPattern];
    NSString *nationalPrefixFormattingRule = [formattingPattern getNationalPrefixFormattingRule];
    if ([((NSString *) nil_chk(nationalPrefixFormattingRule)) java_length] > 0) {
      NSString *nationalPrefix = [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getNationalPrefix];
      if ([((NSString *) nil_chk(nationalPrefix)) java_length] > 0) {
        nationalPrefixFormattingRule = [nationalPrefixFormattingRule java_replace:ComGoogleI18nPhonenumbersPhoneNumberUtil_NP_STRING withSequence:nationalPrefix];
        nationalPrefixFormattingRule = [((NSString *) nil_chk(nationalPrefixFormattingRule)) java_replace:ComGoogleI18nPhonenumbersPhoneNumberUtil_FG_STRING withSequence:@"$1"];
        [numFormatCopy setNationalPrefixFormattingRuleWithNSString:nationalPrefixFormattingRule];
      }
      else {
        [numFormatCopy clearNationalPrefixFormattingRule];
      }
    }
    [formattedNumber appendWithNSString:[self formatNsnUsingPatternWithNSString:nationalSignificantNumber withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:numFormatCopy withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:numberFormat]];
  }
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadata, numberFormat, formattedNumber);
  ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, numberFormat, formattedNumber);
  return [formattedNumber description];
}

- (NSString *)formatNationalNumberWithCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                             withJavaLangCharSequence:(id<JavaLangCharSequence>)carrierCode {
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode)) {
    return nationalSignificantNumber;
  }
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, regionCode);
  JavaLangStringBuilder *formattedNumber = create_JavaLangStringBuilder_initWithInt_(20);
  [formattedNumber appendWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangCharSequence_(self, nationalSignificantNumber, metadata, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL), carrierCode)];
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadata, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL), formattedNumber);
  ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL), formattedNumber);
  return [formattedNumber description];
}

- (ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)getMetadataForRegionOrCallingCodeWithInt:(jint)countryCallingCode
                                                                                      withNSString:(NSString *)regionCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, regionCode);
}

- (NSString *)formatNationalNumberWithPreferredCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                      withJavaLangCharSequence:(id<JavaLangCharSequence>)fallbackCarrierCode {
  return [self formatNationalNumberWithCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaLangCharSequence:[((NSString *) nil_chk([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getPreferredDomesticCarrierCode])) java_length] > 0 ? [number getPreferredDomesticCarrierCode] : (id) fallbackCarrierCode];
}

- (NSString *)formatNumberForMobileDialingWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                  withNSString:(NSString *)regionCallingFrom
                                                                                   withBoolean:(jboolean)withFormatting {
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode)) {
    return [number hasRawInput] ? [number getRawInput] : @"";
  }
  NSString *formattedNumber = @"";
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *numberNoExt = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk([create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init() mergeFromWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number])) clearExtension];
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *numberType = [self getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt];
  jboolean isValidNumber = (numberType != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN));
  if ([((NSString *) nil_chk(regionCallingFrom)) isEqual:regionCode]) {
    jboolean isFixedLineOrMobile = (numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE)) || (numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE)) || (numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE));
    if ([((NSString *) nil_chk(regionCode)) isEqual:@"CO"] && numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE)) {
      formattedNumber = [self formatNationalNumberWithCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withJavaLangCharSequence:ComGoogleI18nPhonenumbersPhoneNumberUtil_COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX];
    }
    else if ([regionCode isEqual:@"BR"] && isFixedLineOrMobile) {
      formattedNumber = [((NSString *) nil_chk([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(numberNoExt)) getPreferredDomesticCarrierCode])) java_length] > 0 ? formattedNumber = [self formatNationalNumberWithPreferredCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withJavaLangCharSequence:@""] : @"";
    }
    else if (isValidNumber && [regionCode isEqual:@"HU"]) {
      formattedNumber = JreStrcat("$C$", [self getNddPrefixForRegionWithNSString:regionCode withBoolean:true], ' ', [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)]);
    }
    else if (countryCallingCode == ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE) {
      ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *regionMetadata = [self getMetadataForRegionWithNSString:regionCallingFrom];
      if ([self canBeInternationallyDialledWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt] && ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt], regionMetadata) != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_SHORT)) {
        formattedNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)];
      }
      else {
        formattedNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
      }
    }
    else {
      if (([regionCode isEqual:ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY] || (([regionCode isEqual:@"MX"] || [regionCode isEqual:@"CL"]) && isFixedLineOrMobile)) && [self canBeInternationallyDialledWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt]) {
        formattedNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)];
      }
      else {
        formattedNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
      }
    }
  }
  else if (isValidNumber && [self canBeInternationallyDialledWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt]) {
    return withFormatting ? [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)] : [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberNoExt withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, E164)];
  }
  return withFormatting ? formattedNumber : ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDiallableCharsOnlyWithJavaLangCharSequence_(formattedNumber);
}

- (NSString *)formatOutOfCountryCallingNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                     withNSString:(NSString *)regionCallingFrom {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCallingFrom)) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$$", @"Trying to format number from invalid region ", regionCallingFrom, @". International formatting applied.")];
    return [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)];
  }
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCallingCode)) {
    return nationalSignificantNumber;
  }
  if (countryCallingCode == ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE) {
    if ([self isNANPACountryWithNSString:regionCallingFrom]) {
      return JreStrcat("IC$", countryCallingCode, ' ', [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)]);
    }
  }
  else if (countryCallingCode == ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(self, regionCallingFrom)) {
    return [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
  }
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadataForRegionCallingFrom = [self getMetadataForRegionWithNSString:regionCallingFrom];
  NSString *internationalPrefix = [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadataForRegionCallingFrom)) getInternationalPrefix];
  NSString *internationalPrefixForFormatting = @"";
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_SINGLE_INTERNATIONAL_PREFIX)) matcherWithJavaLangCharSequence:internationalPrefix])) matches]) {
    internationalPrefixForFormatting = internationalPrefix;
  }
  else if ([metadataForRegionCallingFrom hasPreferredInternationalPrefix]) {
    internationalPrefixForFormatting = [metadataForRegionCallingFrom getPreferredInternationalPrefix];
  }
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadataForRegion = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, regionCode);
  NSString *formattedNationalNumber = ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_(self, nationalSignificantNumber, metadataForRegion, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL));
  JavaLangStringBuilder *formattedNumber = create_JavaLangStringBuilder_initWithNSString_(formattedNationalNumber);
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadataForRegion, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL), formattedNumber);
  if ([((NSString *) nil_chk(internationalPrefixForFormatting)) java_length] > 0) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([formattedNumber insertWithInt:0 withNSString:@" "])) insertWithInt:0 withInt:countryCallingCode])) insertWithInt:0 withNSString:@" "])) insertWithInt:0 withNSString:internationalPrefixForFormatting];
  }
  else {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL), formattedNumber);
  }
  return [formattedNumber description];
}

- (NSString *)formatInOriginalFormatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                            withNSString:(NSString *)regionCallingFrom {
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) hasRawInput] && !ComGoogleI18nPhonenumbersPhoneNumberUtil_hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, number)) {
    return [number getRawInput];
  }
  if (![number hasCountryCodeSource]) {
    return [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
  }
  NSString *formattedNumber;
  {
    NSString *regionCode;
    NSString *nationalPrefix;
    NSString *nationalFormat;
    ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata;
    NSString *nationalNumber;
    ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *formatRule;
    NSString *candidateNationalPrefixRule;
    jint indexOfFirstGroup;
    ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_Builder *numFormatCopy;
    id<JavaUtilList> numberFormats;
    switch ([[number getCountryCodeSource] ordinal]) {
      case ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource_Enum_FROM_NUMBER_WITH_PLUS_SIGN:
      formattedNumber = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)];
      break;
      case ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource_Enum_FROM_NUMBER_WITH_IDD:
      formattedNumber = [self formatOutOfCountryCallingNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:regionCallingFrom];
      break;
      case ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource_Enum_FROM_NUMBER_WITHOUT_PLUS_SIGN:
      formattedNumber = [((NSString *) nil_chk([self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL)])) java_substring:1];
      break;
      case ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource_Enum_FROM_DEFAULT_COUNTRY:
      default:
      regionCode = [self getRegionCodeForCountryCodeWithInt:[number getCountryCode]];
      nationalPrefix = [self getNddPrefixForRegionWithNSString:regionCode withBoolean:true];
      nationalFormat = [self formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
      if (nationalPrefix == nil || [nationalPrefix java_length] == 0) {
        formattedNumber = nationalFormat;
        break;
      }
      if (ComGoogleI18nPhonenumbersPhoneNumberUtil_rawInputContainsNationalPrefixWithNSString_withNSString_withNSString_(self, [number getRawInput], nationalPrefix, regionCode)) {
        formattedNumber = nationalFormat;
        break;
      }
      metadata = [self getMetadataForRegionWithNSString:regionCode];
      nationalNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
      formatRule = [self chooseFormattingPatternForNumberWithJavaUtilList:[((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) numberFormats] withNSString:nationalNumber];
      if (formatRule == nil) {
        formattedNumber = nationalFormat;
        break;
      }
      candidateNationalPrefixRule = [formatRule getNationalPrefixFormattingRule];
      indexOfFirstGroup = [((NSString *) nil_chk(candidateNationalPrefixRule)) java_indexOfString:@"$1"];
      if (indexOfFirstGroup <= 0) {
        formattedNumber = nationalFormat;
        break;
      }
      candidateNationalPrefixRule = [candidateNationalPrefixRule java_substring:0 endIndex:indexOfFirstGroup];
      candidateNationalPrefixRule = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithJavaLangCharSequence_(candidateNationalPrefixRule);
      if ([((NSString *) nil_chk(candidateNationalPrefixRule)) java_length] == 0) {
        formattedNumber = nationalFormat;
        break;
      }
      numFormatCopy = ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_newBuilder();
      [((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_Builder *) nil_chk(numFormatCopy)) mergeFromWithComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:formatRule];
      [numFormatCopy clearNationalPrefixFormattingRule];
      numberFormats = create_JavaUtilArrayList_initWithInt_(1);
      [numberFormats addWithId:numFormatCopy];
      formattedNumber = [self formatByPatternWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL) withJavaUtilList:numberFormats];
      break;
    }
  }
  NSString *rawInput = [number getRawInput];
  if (formattedNumber != nil && [((NSString *) nil_chk(rawInput)) java_length] > 0) {
    NSString *normalizedFormattedNumber = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDiallableCharsOnlyWithJavaLangCharSequence_(formattedNumber);
    NSString *normalizedRawInput = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDiallableCharsOnlyWithJavaLangCharSequence_(rawInput);
    if (![((NSString *) nil_chk(normalizedFormattedNumber)) isEqual:normalizedRawInput]) {
      formattedNumber = rawInput;
    }
  }
  return formattedNumber;
}

- (jboolean)rawInputContainsNationalPrefixWithNSString:(NSString *)rawInput
                                          withNSString:(NSString *)nationalPrefix
                                          withNSString:(NSString *)regionCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_rawInputContainsNationalPrefixWithNSString_withNSString_withNSString_(self, rawInput, nationalPrefix, regionCode);
}

- (jboolean)hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, number);
}

- (NSString *)formatOutOfCountryKeepingAlphaCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                         withNSString:(NSString *)regionCallingFrom {
  NSString *rawInput = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getRawInput];
  if ([((NSString *) nil_chk(rawInput)) java_length] == 0) {
    return [self formatOutOfCountryCallingNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:regionCallingFrom];
  }
  jint countryCode = [number getCountryCode];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCode)) {
    return rawInput;
  }
  rawInput = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithJavaLangCharSequence_withJavaUtilMap_withBoolean_(rawInput, ComGoogleI18nPhonenumbersPhoneNumberUtil_ALL_PLUS_NUMBER_GROUPING_SYMBOLS, true);
  NSString *nationalNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if ([((NSString *) nil_chk(nationalNumber)) java_length] > 3) {
    jint firstNationalNumberDigit = [((NSString *) nil_chk(rawInput)) java_indexOfString:[nationalNumber java_substring:0 endIndex:3]];
    if (firstNationalNumberDigit != -1) {
      rawInput = [rawInput java_substring:firstNationalNumberDigit];
    }
  }
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadataForRegionCallingFrom = [self getMetadataForRegionWithNSString:regionCallingFrom];
  if (countryCode == ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE) {
    if ([self isNANPACountryWithNSString:regionCallingFrom]) {
      return JreStrcat("IC$", countryCode, ' ', rawInput);
    }
  }
  else if (metadataForRegionCallingFrom != nil && countryCode == ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(self, regionCallingFrom)) {
    ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *formattingPattern = [self chooseFormattingPatternForNumberWithJavaUtilList:[metadataForRegionCallingFrom numberFormats] withNSString:nationalNumber];
    if (formattingPattern == nil) {
      return rawInput;
    }
    ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_Builder *newFormat = ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_newBuilder();
    [((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_Builder *) nil_chk(newFormat)) mergeFromWithComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:formattingPattern];
    [newFormat setPatternWithNSString:@"(\\d+)(.*)"];
    [newFormat setFormatWithNSString:@"$1$2"];
    return [self formatNsnUsingPatternWithNSString:rawInput withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:newFormat withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)];
  }
  NSString *internationalPrefixForFormatting = @"";
  if (metadataForRegionCallingFrom != nil) {
    NSString *internationalPrefix = [metadataForRegionCallingFrom getInternationalPrefix];
    internationalPrefixForFormatting = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_SINGLE_INTERNATIONAL_PREFIX)) matcherWithJavaLangCharSequence:internationalPrefix])) matches] ? internationalPrefix : [metadataForRegionCallingFrom getPreferredInternationalPrefix];
  }
  JavaLangStringBuilder *formattedNumber = create_JavaLangStringBuilder_initWithNSString_(rawInput);
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCode];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadataForRegion = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCode, regionCode);
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadataForRegion, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL), formattedNumber);
  if ([internationalPrefixForFormatting java_length] > 0) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([formattedNumber insertWithInt:0 withNSString:@" "])) insertWithInt:0 withInt:countryCode])) insertWithInt:0 withNSString:@" "])) insertWithInt:0 withNSString:internationalPrefixForFormatting];
  }
  else {
    if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCallingFrom)) {
      [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$$", @"Trying to format number from invalid region ", regionCallingFrom, @". International formatting applied.")];
    }
    ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCode, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL), formattedNumber);
  }
  return [formattedNumber description];
}

- (NSString *)getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  JavaLangStringBuilder *nationalNumber = create_JavaLangStringBuilder_init();
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) isItalianLeadingZero] && [number getNumberOfLeadingZeros] > 0) {
    IOSCharArray *zeros = [IOSCharArray arrayWithLength:[number getNumberOfLeadingZeros]];
    JavaUtilArrays_fillWithCharArray_withChar_(zeros, '0');
    [nationalNumber appendWithNSString:[NSString java_stringWithCharacters:zeros]];
  }
  [nationalNumber appendWithLong:[number getNationalNumber]];
  return [nationalNumber description];
}

- (void)prefixNumberWithCountryCallingCodeWithInt:(jint)countryCallingCode
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                        withJavaLangStringBuilder:(JavaLangStringBuilder *)formattedNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, countryCallingCode, numberFormat, formattedNumber);
}

- (NSString *)formatNsnWithNSString:(NSString *)number
withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_(self, number, metadata, numberFormat);
}

- (NSString *)formatNsnWithNSString:(NSString *)number
withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
           withJavaLangCharSequence:(id<JavaLangCharSequence>)carrierCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangCharSequence_(self, number, metadata, numberFormat, carrierCode);
}

- (ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *)chooseFormattingPatternForNumberWithJavaUtilList:(id<JavaUtilList>)availableFormats
                                                                                             withNSString:(NSString *)nationalNumber {
  for (ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat * __strong numFormat in nil_chk(availableFormats)) {
    jint size = [((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *) nil_chk(numFormat)) leadingDigitsPatternSize];
    if (size == 0 || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:[numFormat getLeadingDigitsPatternWithInt:size - 1]])) matcherWithJavaLangCharSequence:nationalNumber])) lookingAt]) {
      JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:[numFormat getPattern]])) matcherWithJavaLangCharSequence:nationalNumber];
      if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
        return numFormat;
      }
    }
  }
  return nil;
}

- (NSString *)formatNsnUsingPatternWithNSString:(NSString *)nationalNumber
withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *)formattingPattern
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnUsingPatternWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangCharSequence_(self, nationalNumber, formattingPattern, numberFormat, nil);
}

- (NSString *)formatNsnUsingPatternWithNSString:(NSString *)nationalNumber
withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *)formattingPattern
withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                       withJavaLangCharSequence:(id<JavaLangCharSequence>)carrierCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnUsingPatternWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangCharSequence_(self, nationalNumber, formattingPattern, numberFormat, carrierCode);
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)getExampleNumberWithNSString:(NSString *)regionCode {
  return [self getExampleNumberForTypeWithNSString:regionCode withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE)];
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)getInvalidExampleNumberWithNSString:(NSString *)regionCode {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCode)) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", @"Invalid or unknown region code provided: ", regionCode)];
    return nil;
  }
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *desc = [self getNumberDescByTypeWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:[self getMetadataForRegionWithNSString:regionCode] withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE)];
  if (![((ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *) nil_chk(desc)) hasExampleNumber]) {
    return nil;
  }
  NSString *exampleNumber = [desc getExampleNumber];
  for (jint phoneNumberLength = [((NSString *) nil_chk(exampleNumber)) java_length] - 1; phoneNumberLength >= ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN; phoneNumberLength--) {
    NSString *numberToTry = [exampleNumber java_substring:0 endIndex:phoneNumberLength];
    @try {
      ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *possiblyValidNumber = [self parseWithJavaLangCharSequence:numberToTry withNSString:regionCode];
      if (![self isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:possiblyValidNumber]) {
        return possiblyValidNumber;
      }
    }
    @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    }
  }
  return nil;
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)getExampleNumberForTypeWithNSString:(NSString *)regionCode
                             withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)type {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCode)) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", @"Invalid or unknown region code provided: ", regionCode)];
    return nil;
  }
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *desc = [self getNumberDescByTypeWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:[self getMetadataForRegionWithNSString:regionCode] withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:type];
  @try {
    if ([((ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *) nil_chk(desc)) hasExampleNumber]) {
      return [self parseWithJavaLangCharSequence:[desc getExampleNumber] withNSString:regionCode];
    }
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:[e description]];
  }
  return nil;
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)getExampleNumberForTypeWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)type {
  for (NSString * __strong regionCode in nil_chk([self getSupportedRegions])) {
    ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *exampleNumber = [self getExampleNumberForTypeWithNSString:regionCode withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:type];
    if (exampleNumber != nil) {
      return exampleNumber;
    }
  }
  for (JavaLangInteger *boxed__ in nil_chk([self getSupportedGlobalNetworkCallingCodes])) {
    jint countryCallingCode = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *desc = [self getNumberDescByTypeWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:[self getMetadataForNonGeographicalRegionWithInt:countryCallingCode] withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:type];
    @try {
      if ([((ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *) nil_chk(desc)) hasExampleNumber]) {
        return [self parseWithJavaLangCharSequence:JreStrcat("CI$", '+', countryCallingCode, [desc getExampleNumber]) withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION];
      }
    }
    @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:[e description]];
    }
  }
  return nil;
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)getExampleNumberForNonGeoEntityWithInt:(jint)countryCallingCode {
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [self getMetadataForNonGeographicalRegionWithInt:countryCallingCode];
  if (metadata != nil) {
    for (ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc * __strong desc in nil_chk(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ [metadata getMobile], [metadata getTollFree], [metadata getSharedCost], [metadata getVoip], [metadata getVoicemail], [metadata getUan], [metadata getPremiumRate] } count:7 type:ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_class_()]))) {
      @try {
        if (desc != nil && [desc hasExampleNumber]) {
          return [self parseWithJavaLangCharSequence:JreStrcat("CI$", '+', countryCallingCode, [desc getExampleNumber]) withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION];
        }
      }
      @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:[e description]];
      }
    }
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$I", @"Invalid or unknown country calling code provided: ", countryCallingCode)];
  }
  return nil;
}

- (void)maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                 withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata
                           withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)numberFormat
                                                                withJavaLangStringBuilder:(JavaLangStringBuilder *)formattedNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(self, number, metadata, numberFormat, formattedNumber);
}

- (ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *)getNumberDescByTypeWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata
                                                                           withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)type {
  switch ([type ordinal]) {
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_PREMIUM_RATE:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getPremiumRate];
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_TOLL_FREE:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getTollFree];
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_MOBILE:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getMobile];
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_FIXED_LINE:
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_FIXED_LINE_OR_MOBILE:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getFixedLine];
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_SHARED_COST:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getSharedCost];
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_VOIP:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getVoip];
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_PERSONAL_NUMBER:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getPersonalNumber];
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_PAGER:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getPager];
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_UAN:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getUan];
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_Enum_VOICEMAIL:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getVoicemail];
    default:
    return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getGeneralDesc];
  }
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  NSString *regionCode = [self getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode], regionCode);
  if (metadata == nil) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN);
  }
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, nationalSignificantNumber, metadata);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)getNumberTypeHelperWithNSString:(NSString *)nationalNumber
                                     withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, nationalNumber, metadata);
}

- (ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)getMetadataForRegionWithNSString:(NSString *)regionCode {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCode)) {
    return nil;
  }
  return [((id<ComGoogleI18nPhonenumbersMetadataSource>) nil_chk(metadataSource_)) getMetadataForRegionWithNSString:regionCode];
}

- (ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)getMetadataForNonGeographicalRegionWithInt:(jint)countryCallingCode {
  if (![((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)]) {
    return nil;
  }
  return [((id<ComGoogleI18nPhonenumbersMetadataSource>) nil_chk(metadataSource_)) getMetadataForNonGeographicalRegionWithInt:countryCallingCode];
}

- (jboolean)isNumberMatchingDescWithNSString:(NSString *)nationalNumber
withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *)numberDesc {
  jint actualLength = [((NSString *) nil_chk(nationalNumber)) java_length];
  id<JavaUtilList> possibleLengths = [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *) nil_chk(numberDesc)) getPossibleLengthList];
  if ([((id<JavaUtilList>) nil_chk(possibleLengths)) size] > 0 && ![possibleLengths containsWithId:JavaLangInteger_valueOfWithInt_(actualLength)]) {
    return false;
  }
  return [((id<ComGoogleI18nPhonenumbersInternalMatcherApi>) nil_chk(matcherApi_)) matchNationalNumberWithJavaLangCharSequence:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:numberDesc withBoolean:false];
}

- (jboolean)isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  NSString *regionCode = [self getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  return [self isValidNumberForRegionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:regionCode];
}

- (jboolean)isValidNumberForRegionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                          withNSString:(NSString *)regionCode {
  jint countryCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCode, regionCode);
  if ((metadata == nil) || (![((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY)) isEqual:regionCode] && countryCode != ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(self, regionCode))) {
    return false;
  }
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, nationalSignificantNumber, metadata) != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN);
}

- (NSString *)getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  jint countryCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  id<JavaUtilList> regions = [((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) getWithId:JavaLangInteger_valueOfWithInt_(countryCode)];
  if (regions == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:JreStrcat("$IC", @"Missing/invalid country_code (", countryCode, ')')];
    return nil;
  }
  if ([regions size] == 1) {
    return [regions getWithInt:0];
  }
  else {
    return ComGoogleI18nPhonenumbersPhoneNumberUtil_getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilList_(self, number, regions);
  }
}

- (NSString *)getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                      withJavaUtilList:(id<JavaUtilList>)regionCodes {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilList_(self, number, regionCodes);
}

- (NSString *)getRegionCodeForCountryCodeWithInt:(jint)countryCallingCode {
  id<JavaUtilList> regionCodes = [((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) getWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)];
  return regionCodes == nil ? ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION : [regionCodes getWithInt:0];
}

- (id<JavaUtilList>)getRegionCodesForCountryCodeWithInt:(jint)countryCallingCode {
  id<JavaUtilList> regionCodes = [((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) getWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)];
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(regionCodes == nil ? create_JavaUtilArrayList_initWithInt_(0) : regionCodes);
}

- (jint)getCountryCodeForRegionWithNSString:(NSString *)regionCode {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, regionCode)) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$$", @"Invalid or missing region code (", ((regionCode == nil) ? @"null" : regionCode), @") provided.")];
    return 0;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(self, regionCode);
}

- (jint)getCountryCodeForValidRegionWithNSString:(NSString *)regionCode {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(self, regionCode);
}

- (NSString *)getNddPrefixForRegionWithNSString:(NSString *)regionCode
                                    withBoolean:(jboolean)stripNonDigits {
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:regionCode];
  if (metadata == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$$", @"Invalid or missing region code (", ((regionCode == nil) ? @"null" : regionCode), @") provided.")];
    return nil;
  }
  NSString *nationalPrefix = [metadata getNationalPrefix];
  if ([((NSString *) nil_chk(nationalPrefix)) java_length] == 0) {
    return nil;
  }
  if (stripNonDigits) {
    nationalPrefix = [nationalPrefix java_replace:@"~" withSequence:@""];
  }
  return nationalPrefix;
}

- (jboolean)isNANPACountryWithNSString:(NSString *)regionCode {
  return [((id<JavaUtilSet>) nil_chk(nanpaRegions_)) containsWithId:regionCode];
}

- (jboolean)isAlphaNumberWithJavaLangCharSequence:(id<JavaLangCharSequence>)number {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isViablePhoneNumberWithJavaLangCharSequence_(number)) {
    return false;
  }
  JavaLangStringBuilder *strippedNumber = create_JavaLangStringBuilder_initWithJavaLangCharSequence_(number);
  [self maybeStripExtensionWithJavaLangStringBuilder:strippedNumber];
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA_PHONE_PATTERN)) matcherWithJavaLangCharSequence:strippedNumber])) matches];
}

- (jboolean)isPossibleNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *result = [self isPossibleNumberWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  return result == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE) || result == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE_LOCAL_ONLY);
}

- (jboolean)isPossibleNumberForTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                           withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)type {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *result = [self isPossibleNumberForTypeWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:type];
  return result == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE) || result == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE_LOCAL_ONLY);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)testNumberLengthWithJavaLangCharSequence:(id<JavaLangCharSequence>)number
                                               withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, number, metadata);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)testNumberLengthWithJavaLangCharSequence:(id<JavaLangCharSequence>)number
                                               withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata
                                           withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)type {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(self, number, metadata, type);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)isPossibleNumberWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  return [self isPossibleNumberForTypeWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN)];
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)isPossibleNumberForTypeWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                        withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)type {
  NSString *nationalNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  jint countryCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(self, countryCode)) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, INVALID_COUNTRY_CODE);
  }
  NSString *regionCode = [self getRegionCodeForCountryCodeWithInt:countryCode];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCode, regionCode);
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(self, nationalNumber, metadata, type);
}

- (jboolean)isPossibleNumberWithJavaLangCharSequence:(id<JavaLangCharSequence>)number
                                        withNSString:(NSString *)regionDialingFrom {
  @try {
    return [self isPossibleNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:[self parseWithJavaLangCharSequence:number withNSString:regionDialingFrom]];
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    return false;
  }
}

- (jboolean)truncateTooLongNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  if ([self isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number]) {
    return true;
  }
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *numberCopy = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
  [numberCopy mergeFromWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  jlong nationalNumber = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getNationalNumber];
  do {
    nationalNumber /= 10;
    [numberCopy setNationalNumberWithLong:nationalNumber];
    if ([self isPossibleNumberWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberCopy] == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_SHORT) || nationalNumber == 0) {
      return false;
    }
  }
  while (![self isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:numberCopy]);
  [number setNationalNumberWithLong:nationalNumber];
  return true;
}

- (ComGoogleI18nPhonenumbersAsYouTypeFormatter *)getAsYouTypeFormatterWithNSString:(NSString *)regionCode {
  return create_ComGoogleI18nPhonenumbersAsYouTypeFormatter_initWithNSString_(regionCode);
}

- (jint)extractCountryCodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)fullNumber
                          withJavaLangStringBuilder:(JavaLangStringBuilder *)nationalNumber {
  if (([((JavaLangStringBuilder *) nil_chk(fullNumber)) java_length] == 0) || ([fullNumber charAtWithInt:0] == '0')) {
    return 0;
  }
  jint potentialCountryCode;
  jint numberLength = [fullNumber java_length];
  for (jint i = 1; i <= ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_COUNTRY_CODE && i <= numberLength; i++) {
    potentialCountryCode = JavaLangInteger_parseIntWithNSString_([fullNumber substringWithInt:0 withInt:i]);
    if ([((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(potentialCountryCode)]) {
      [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithNSString:[fullNumber substringWithInt:i]];
      return potentialCountryCode;
    }
  }
  return 0;
}

- (jint)maybeExtractCountryCodeWithJavaLangCharSequence:(id<JavaLangCharSequence>)number
withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)defaultRegionMetadata
                              withJavaLangStringBuilder:(JavaLangStringBuilder *)nationalNumber
                                            withBoolean:(jboolean)keepRawInput
   withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  if ([((id<JavaLangCharSequence>) nil_chk(number)) java_length] == 0) {
    return 0;
  }
  JavaLangStringBuilder *fullNumber = create_JavaLangStringBuilder_initWithJavaLangCharSequence_(number);
  NSString *possibleCountryIddPrefix = @"NonMatch";
  if (defaultRegionMetadata != nil) {
    possibleCountryIddPrefix = [defaultRegionMetadata getInternationalPrefix];
  }
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource *countryCodeSource = [self maybeStripInternationalPrefixAndNormalizeWithJavaLangStringBuilder:fullNumber withNSString:possibleCountryIddPrefix];
  if (keepRawInput) {
    [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeSourceWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource:countryCodeSource];
  }
  if (countryCodeSource != JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_DEFAULT_COUNTRY)) {
    if ([fullNumber java_length] <= ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN) {
      @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, TOO_SHORT_AFTER_IDD), @"Phone number had an IDD, but after this was not long enough to be a viable phone number.");
    }
    jint potentialCountryCode = [self extractCountryCodeWithJavaLangStringBuilder:fullNumber withJavaLangStringBuilder:nationalNumber];
    if (potentialCountryCode != 0) {
      [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeWithInt:potentialCountryCode];
      return potentialCountryCode;
    }
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE), @"Country calling code supplied was not recognised.");
  }
  else if (defaultRegionMetadata != nil) {
    jint defaultCountryCode = [defaultRegionMetadata getCountryCode];
    NSString *defaultCountryCodeString = NSString_java_valueOfInt_(defaultCountryCode);
    NSString *normalizedNumber = [fullNumber description];
    if ([((NSString *) nil_chk(normalizedNumber)) java_hasPrefix:defaultCountryCodeString]) {
      JavaLangStringBuilder *potentialNationalNumber = create_JavaLangStringBuilder_initWithNSString_([normalizedNumber java_substring:[((NSString *) nil_chk(defaultCountryCodeString)) java_length]]);
      ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *generalDesc = [defaultRegionMetadata getGeneralDesc];
      [self maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:potentialNationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:defaultRegionMetadata withJavaLangStringBuilder:nil];
      if ((![((id<ComGoogleI18nPhonenumbersInternalMatcherApi>) nil_chk(matcherApi_)) matchNationalNumberWithJavaLangCharSequence:fullNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:generalDesc withBoolean:false] && [matcherApi_ matchNationalNumberWithJavaLangCharSequence:potentialNationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:generalDesc withBoolean:false]) || ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, fullNumber, defaultRegionMetadata) == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_LONG)) {
        [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithJavaLangCharSequence:potentialNationalNumber];
        if (keepRawInput) {
          [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeSourceWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource:JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_NUMBER_WITHOUT_PLUS_SIGN)];
        }
        [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeWithInt:defaultCountryCode];
        return defaultCountryCode;
      }
    }
  }
  [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeWithInt:0];
  return 0;
}

- (jboolean)parsePrefixAsIddWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)iddPattern
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)number {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_parsePrefixAsIddWithJavaUtilRegexPattern_withJavaLangStringBuilder_(self, iddPattern, number);
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource *)maybeStripInternationalPrefixAndNormalizeWithJavaLangStringBuilder:(JavaLangStringBuilder *)number
                                                                                                                              withNSString:(NSString *)possibleIddPrefix {
  if ([((JavaLangStringBuilder *) nil_chk(number)) java_length] == 0) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_DEFAULT_COUNTRY);
  }
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) lookingAt]) {
    [number delete__WithInt:0 withInt:[m end]];
    ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithJavaLangStringBuilder_(number);
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_NUMBER_WITH_PLUS_SIGN);
  }
  JavaUtilRegexPattern *iddPattern = [((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:possibleIddPrefix];
  ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithJavaLangStringBuilder_(number);
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_parsePrefixAsIddWithJavaUtilRegexPattern_withJavaLangStringBuilder_(self, iddPattern, number) ? JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_NUMBER_WITH_IDD) : JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_DEFAULT_COUNTRY);
}

- (jboolean)maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)number
                   withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:(ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)metadata
                                                  withJavaLangStringBuilder:(JavaLangStringBuilder *)carrierCode {
  jint numberLength = [((JavaLangStringBuilder *) nil_chk(number)) java_length];
  NSString *possibleNationalPrefix = [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getNationalPrefixForParsing];
  if (numberLength == 0 || [((NSString *) nil_chk(possibleNationalPrefix)) java_length] == 0) {
    return false;
  }
  JavaUtilRegexMatcher *prefixMatcher = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:possibleNationalPrefix])) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(prefixMatcher)) lookingAt]) {
    ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *generalDesc = [metadata getGeneralDesc];
    jboolean isViableOriginalNumber = [((id<ComGoogleI18nPhonenumbersInternalMatcherApi>) nil_chk(matcherApi_)) matchNationalNumberWithJavaLangCharSequence:number withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:generalDesc withBoolean:false];
    jint numOfGroups = [prefixMatcher groupCount];
    NSString *transformRule = [metadata getNationalPrefixTransformRule];
    if (transformRule == nil || [transformRule java_length] == 0 || [prefixMatcher groupWithInt:numOfGroups] == nil) {
      if (isViableOriginalNumber && ![matcherApi_ matchNationalNumberWithJavaLangCharSequence:[number substringWithInt:[prefixMatcher end]] withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:generalDesc withBoolean:false]) {
        return false;
      }
      if (carrierCode != nil && numOfGroups > 0 && [prefixMatcher groupWithInt:numOfGroups] != nil) {
        [carrierCode appendWithNSString:[prefixMatcher groupWithInt:1]];
      }
      [number delete__WithInt:0 withInt:[prefixMatcher end]];
      return true;
    }
    else {
      JavaLangStringBuilder *transformedNumber = create_JavaLangStringBuilder_initWithJavaLangCharSequence_(number);
      [transformedNumber replaceWithInt:0 withInt:numberLength withNSString:[prefixMatcher replaceFirstWithNSString:transformRule]];
      if (isViableOriginalNumber && ![matcherApi_ matchNationalNumberWithJavaLangCharSequence:[transformedNumber description] withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:generalDesc withBoolean:false]) {
        return false;
      }
      if (carrierCode != nil && numOfGroups > 1) {
        [carrierCode appendWithNSString:[prefixMatcher groupWithInt:1]];
      }
      [number replaceWithInt:0 withInt:[number java_length] withNSString:[transformedNumber description]];
      return true;
    }
  }
  return false;
}

- (NSString *)maybeStripExtensionWithJavaLangStringBuilder:(JavaLangStringBuilder *)number {
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERN)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) find] && ComGoogleI18nPhonenumbersPhoneNumberUtil_isViablePhoneNumberWithJavaLangCharSequence_([((JavaLangStringBuilder *) nil_chk(number)) substringWithInt:0 withInt:[m start]])) {
    for (jint i = 1, length = [m groupCount]; i <= length; i++) {
      if ([m groupWithInt:i] != nil) {
        NSString *extension = [m groupWithInt:i];
        [((JavaLangStringBuilder *) nil_chk(number)) delete__WithInt:[m start] withInt:[number java_length]];
        return extension;
      }
    }
  }
  return @"";
}

- (jboolean)checkRegionForParsingWithJavaLangCharSequence:(id<JavaLangCharSequence>)numberToParse
                                             withNSString:(NSString *)defaultRegion {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_checkRegionForParsingWithJavaLangCharSequence_withNSString_(self, numberToParse, defaultRegion);
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)numberToParse
                                                                       withNSString:(NSString *)defaultRegion {
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
  [self parseWithJavaLangCharSequence:numberToParse withNSString:defaultRegion withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:phoneNumber];
  return phoneNumber;
}

- (void)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)numberToParse
                         withNSString:(NSString *)defaultRegion
withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithJavaLangCharSequence_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, numberToParse, defaultRegion, false, true, phoneNumber);
}

- (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)parseAndKeepRawInputWithJavaLangCharSequence:(id<JavaLangCharSequence>)numberToParse
                                                                                      withNSString:(NSString *)defaultRegion {
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
  [self parseAndKeepRawInputWithJavaLangCharSequence:numberToParse withNSString:defaultRegion withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:phoneNumber];
  return phoneNumber;
}

- (void)parseAndKeepRawInputWithJavaLangCharSequence:(id<JavaLangCharSequence>)numberToParse
                                        withNSString:(NSString *)defaultRegion
withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithJavaLangCharSequence_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, numberToParse, defaultRegion, true, true, phoneNumber);
}

- (id<JavaLangIterable>)findNumbersWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                               withNSString:(NSString *)defaultRegion {
  return [self findNumbersWithJavaLangCharSequence:text withNSString:defaultRegion withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, VALID) withLong:JavaLangLong_MAX_VALUE];
}

- (id<JavaLangIterable>)findNumbersWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                               withNSString:(NSString *)defaultRegion
      withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)leniency
                                                   withLong:(jlong)maxTries {
  return create_ComGoogleI18nPhonenumbersPhoneNumberUtil_1_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(self, text, defaultRegion, leniency, maxTries);
}

+ (void)setItalianLeadingZerosForPhoneNumberWithJavaLangCharSequence:(id<JavaLangCharSequence>)nationalNumber
                withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_setItalianLeadingZerosForPhoneNumberWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(nationalNumber, phoneNumber);
}

- (void)parseHelperWithJavaLangCharSequence:(id<JavaLangCharSequence>)numberToParse
                               withNSString:(NSString *)defaultRegion
                                withBoolean:(jboolean)keepRawInput
                                withBoolean:(jboolean)checkRegion
withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithJavaLangCharSequence_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, numberToParse, defaultRegion, keepRawInput, checkRegion, phoneNumber);
}

- (void)buildNationalNumberForParsingWithNSString:(NSString *)numberToParse
                        withJavaLangStringBuilder:(JavaLangStringBuilder *)nationalNumber {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_buildNationalNumberForParsingWithNSString_withJavaLangStringBuilder_(self, numberToParse, nationalNumber);
}

+ (ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)copyCoreFieldsOnlyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)phoneNumberIn {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_copyCoreFieldsOnlyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(phoneNumberIn);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *)isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)firstNumberIn
                                                                     withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)secondNumberIn {
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *firstNumber = ComGoogleI18nPhonenumbersPhoneNumberUtil_copyCoreFieldsOnlyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(firstNumberIn);
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumber = ComGoogleI18nPhonenumbersPhoneNumberUtil_copyCoreFieldsOnlyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(secondNumberIn);
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(firstNumber)) hasExtension] && [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(secondNumber)) hasExtension] && ![((NSString *) nil_chk([firstNumber getExtension])) isEqual:[secondNumber getExtension]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NO_MATCH);
  }
  jint firstNumberCountryCode = [firstNumber getCountryCode];
  jint secondNumberCountryCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(secondNumber)) getCountryCode];
  if (firstNumberCountryCode != 0 && secondNumberCountryCode != 0) {
    if ([firstNumber exactlySameAsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumber]) {
      return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, EXACT_MATCH);
    }
    else if (firstNumberCountryCode == secondNumberCountryCode && ComGoogleI18nPhonenumbersPhoneNumberUtil_isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, firstNumber, secondNumber)) {
      return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, SHORT_NSN_MATCH);
    }
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NO_MATCH);
  }
  [firstNumber setCountryCodeWithInt:secondNumberCountryCode];
  if ([firstNumber exactlySameAsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumber]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NSN_MATCH);
  }
  if (ComGoogleI18nPhonenumbersPhoneNumberUtil_isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, firstNumber, secondNumber)) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, SHORT_NSN_MATCH);
  }
  return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NO_MATCH);
}

- (jboolean)isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)firstNumber
                                            withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)secondNumber {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, firstNumber, secondNumber);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *)isNumberMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)firstNumber
                                                                     withJavaLangCharSequence:(id<JavaLangCharSequence>)secondNumber {
  @try {
    ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *firstNumberAsProto = [self parseWithJavaLangCharSequence:firstNumber withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION];
    return [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumberAsProto withJavaLangCharSequence:secondNumber];
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    if ([e getErrorType] == JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE)) {
      @try {
        ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumberAsProto = [self parseWithJavaLangCharSequence:secondNumber withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION];
        return [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberAsProto withJavaLangCharSequence:firstNumber];
      }
      @catch (ComGoogleI18nPhonenumbersNumberParseException *e2) {
        if ([e2 getErrorType] == JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE)) {
          @try {
            ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *firstNumberProto = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
            ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumberProto = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
            ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithJavaLangCharSequence_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, firstNumber, nil, false, false, firstNumberProto);
            ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithJavaLangCharSequence_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, secondNumber, nil, false, false, secondNumberProto);
            return [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumberProto withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberProto];
          }
          @catch (ComGoogleI18nPhonenumbersNumberParseException *e3) {
          }
        }
      }
    }
  }
  return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NOT_A_NUMBER);
}

- (ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *)isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)firstNumber
                                                                                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)secondNumber {
  @try {
    ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumberAsProto = [self parseWithJavaLangCharSequence:secondNumber withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION];
    return [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumber withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberAsProto];
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    if ([e getErrorType] == JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE)) {
      NSString *firstNumberRegion = [self getRegionCodeForCountryCodeWithInt:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(firstNumber)) getCountryCode]];
      @try {
        if (![((NSString *) nil_chk(firstNumberRegion)) isEqual:ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION]) {
          ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumberWithFirstNumberRegion = [self parseWithJavaLangCharSequence:secondNumber withNSString:firstNumberRegion];
          ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *match = [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumber withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberWithFirstNumberRegion];
          if (match == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, EXACT_MATCH)) {
            return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NSN_MATCH);
          }
          return match;
        }
        else {
          ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumberProto = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
          ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithJavaLangCharSequence_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(self, secondNumber, nil, false, false, secondNumberProto);
          return [self isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:firstNumber withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:secondNumberProto];
        }
      }
      @catch (ComGoogleI18nPhonenumbersNumberParseException *e2) {
      }
    }
  }
  return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NOT_A_NUMBER);
}

- (jboolean)canBeInternationallyDialledWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number {
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:[self getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number]];
  if (metadata == nil) {
    return true;
  }
  NSString *nationalSignificantNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  return ![self isNumberMatchingDescWithNSString:nationalSignificantNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getNoInternationalDialling]];
}

- (jboolean)isMobileNumberPortableRegionWithNSString:(NSString *)regionCode {
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:regionCode];
  if (metadata == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", @"Invalid or unknown region code provided: ", regionCode)];
    return false;
  }
  return [metadata isMobileNumberPortableRegion];
}

- (void)dealloc {
  RELEASE_(metadataSource_);
  RELEASE_(countryCallingCodeToRegionCodeMap_);
  RELEASE_(matcherApi_);
  RELEASE_(nanpaRegions_);
  RELEASE_(regexCache_);
  RELEASE_(supportedRegions_);
  RELEASE_(countryCodesForNonGeographicalRegion_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 6, 5, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 9, 5, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x8, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x28, 22, 23, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 24, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 25, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 25, -1, -1 },
    { NULL, "Z", 0xa, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 28, 27, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 29, 30, -1, 31, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 32, 1, -1, 33, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 34, 18, -1, 35, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil;", 0x29, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil;", 0x9, 36, 37, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil;", 0xa, 36, 38, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 39, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 40, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 42, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 43, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 46, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 47, 48, -1, 49, -1, -1 },
    { NULL, "LNSString;", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;", 0x2, 52, 53, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 54, 51, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 59, 58, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 60, 61, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 62, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 63, 58, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 64, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 66, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 67, 68, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 67, 69, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonemetadata_NumberFormat;", 0x0, 70, 71, -1, 72, -1, -1 },
    { NULL, "LNSString;", 0x0, 73, 74, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 73, 75, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 76, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 77, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 78, 79, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 78, 80, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 81, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 83, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc;", 0x0, 84, 85, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", 0x1, 86, 15, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", 0x2, 87, 88, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;", 0x0, 89, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;", 0x0, 90, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 91, 92, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 93, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 94, 58, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 95, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 96, 97, -1, 98, -1, -1 },
    { NULL, "LNSString;", 0x1, 99, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 100, 18, -1, 101, -1, -1 },
    { NULL, "I", 0x1, 102, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 103, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 104, 105, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 106, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 107, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 108, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 109, 110, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", 0x2, 111, 112, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", 0x2, 111, 113, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", 0x1, 114, 15, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", 0x1, 115, 110, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 108, 116, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 117, 15, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersAsYouTypeFormatter;", 0x1, 118, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 119, 120, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 121, 122, 123, -1, -1, -1 },
    { NULL, "Z", 0x2, 124, 125, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource;", 0x0, 126, 127, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 128, 129, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 130, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 131, 116, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 132, 116, 123, -1, -1, -1 },
    { NULL, "V", 0x1, 132, 133, 123, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0x1, 134, 116, 123, -1, -1, -1 },
    { NULL, "V", 0x1, 134, 133, 123, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 135, 116, -1, 136, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 135, 137, -1, 138, -1, -1 },
    { NULL, "V", 0x8, 139, 140, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 141, 142, 123, -1, -1, -1 },
    { NULL, "V", 0x2, 143, 144, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", 0xa, 145, 15, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", 0x1, 146, 147, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 148, 147, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", 0x1, 146, 149, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", 0x1, 146, 51, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 150, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 151, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createExtnPatternWithNSString:);
  methods[1].selector = @selector(initWithComGoogleI18nPhonenumbersMetadataSource:withJavaUtilMap:);
  methods[2].selector = @selector(extractPossibleNumberWithJavaLangCharSequence:);
  methods[3].selector = @selector(isViablePhoneNumberWithJavaLangCharSequence:);
  methods[4].selector = @selector(normalizeWithJavaLangStringBuilder:);
  methods[5].selector = @selector(normalizeDigitsOnlyWithJavaLangCharSequence:);
  methods[6].selector = @selector(normalizeDigitsWithJavaLangCharSequence:withBoolean:);
  methods[7].selector = @selector(normalizeDiallableCharsOnlyWithJavaLangCharSequence:);
  methods[8].selector = @selector(convertAlphaCharactersInNumberWithJavaLangCharSequence:);
  methods[9].selector = @selector(getLengthOfGeographicalAreaCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[10].selector = @selector(getLengthOfNationalDestinationCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[11].selector = @selector(getCountryMobileTokenWithInt:);
  methods[12].selector = @selector(normalizeHelperWithJavaLangCharSequence:withJavaUtilMap:withBoolean:);
  methods[13].selector = @selector(setInstanceWithComGoogleI18nPhonenumbersPhoneNumberUtil:);
  methods[14].selector = @selector(getSupportedRegions);
  methods[15].selector = @selector(getSupportedGlobalNetworkCallingCodes);
  methods[16].selector = @selector(getSupportedCallingCodes);
  methods[17].selector = @selector(descHasPossibleNumberDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:);
  methods[18].selector = @selector(descHasDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:);
  methods[19].selector = @selector(getSupportedTypesForMetadataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:);
  methods[20].selector = @selector(getSupportedTypesForRegionWithNSString:);
  methods[21].selector = @selector(getSupportedTypesForNonGeoEntityWithInt:);
  methods[22].selector = @selector(getInstance);
  methods[23].selector = @selector(createInstanceWithComGoogleI18nPhonenumbersMetadataLoader:);
  methods[24].selector = @selector(createInstanceWithComGoogleI18nPhonenumbersMetadataSource:);
  methods[25].selector = @selector(formattingRuleHasFirstGroupOnlyWithNSString:);
  methods[26].selector = @selector(isNumberGeographicalWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[27].selector = @selector(isNumberGeographicalWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:withInt:);
  methods[28].selector = @selector(isValidRegionCodeWithNSString:);
  methods[29].selector = @selector(hasValidCountryCallingCodeWithInt:);
  methods[30].selector = @selector(formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:);
  methods[31].selector = @selector(formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withJavaLangStringBuilder:);
  methods[32].selector = @selector(formatByPatternWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withJavaUtilList:);
  methods[33].selector = @selector(formatNationalNumberWithCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangCharSequence:);
  methods[34].selector = @selector(getMetadataForRegionOrCallingCodeWithInt:withNSString:);
  methods[35].selector = @selector(formatNationalNumberWithPreferredCarrierCodeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangCharSequence:);
  methods[36].selector = @selector(formatNumberForMobileDialingWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withBoolean:);
  methods[37].selector = @selector(formatOutOfCountryCallingNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[38].selector = @selector(formatInOriginalFormatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[39].selector = @selector(rawInputContainsNationalPrefixWithNSString:withNSString:withNSString:);
  methods[40].selector = @selector(hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[41].selector = @selector(formatOutOfCountryKeepingAlphaCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[42].selector = @selector(getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[43].selector = @selector(prefixNumberWithCountryCallingCodeWithInt:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withJavaLangStringBuilder:);
  methods[44].selector = @selector(formatNsnWithNSString:withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:);
  methods[45].selector = @selector(formatNsnWithNSString:withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withJavaLangCharSequence:);
  methods[46].selector = @selector(chooseFormattingPatternForNumberWithJavaUtilList:withNSString:);
  methods[47].selector = @selector(formatNsnUsingPatternWithNSString:withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:);
  methods[48].selector = @selector(formatNsnUsingPatternWithNSString:withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withJavaLangCharSequence:);
  methods[49].selector = @selector(getExampleNumberWithNSString:);
  methods[50].selector = @selector(getInvalidExampleNumberWithNSString:);
  methods[51].selector = @selector(getExampleNumberForTypeWithNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:);
  methods[52].selector = @selector(getExampleNumberForTypeWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:);
  methods[53].selector = @selector(getExampleNumberForNonGeoEntityWithInt:);
  methods[54].selector = @selector(maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:withJavaLangStringBuilder:);
  methods[55].selector = @selector(getNumberDescByTypeWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:);
  methods[56].selector = @selector(getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[57].selector = @selector(getNumberTypeHelperWithNSString:withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:);
  methods[58].selector = @selector(getMetadataForRegionWithNSString:);
  methods[59].selector = @selector(getMetadataForNonGeographicalRegionWithInt:);
  methods[60].selector = @selector(isNumberMatchingDescWithNSString:withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:);
  methods[61].selector = @selector(isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[62].selector = @selector(isValidNumberForRegionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:);
  methods[63].selector = @selector(getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[64].selector = @selector(getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaUtilList:);
  methods[65].selector = @selector(getRegionCodeForCountryCodeWithInt:);
  methods[66].selector = @selector(getRegionCodesForCountryCodeWithInt:);
  methods[67].selector = @selector(getCountryCodeForRegionWithNSString:);
  methods[68].selector = @selector(getCountryCodeForValidRegionWithNSString:);
  methods[69].selector = @selector(getNddPrefixForRegionWithNSString:withBoolean:);
  methods[70].selector = @selector(isNANPACountryWithNSString:);
  methods[71].selector = @selector(isAlphaNumberWithJavaLangCharSequence:);
  methods[72].selector = @selector(isPossibleNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[73].selector = @selector(isPossibleNumberForTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:);
  methods[74].selector = @selector(testNumberLengthWithJavaLangCharSequence:withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:);
  methods[75].selector = @selector(testNumberLengthWithJavaLangCharSequence:withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:);
  methods[76].selector = @selector(isPossibleNumberWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[77].selector = @selector(isPossibleNumberForTypeWithReasonWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:);
  methods[78].selector = @selector(isPossibleNumberWithJavaLangCharSequence:withNSString:);
  methods[79].selector = @selector(truncateTooLongNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[80].selector = @selector(getAsYouTypeFormatterWithNSString:);
  methods[81].selector = @selector(extractCountryCodeWithJavaLangStringBuilder:withJavaLangStringBuilder:);
  methods[82].selector = @selector(maybeExtractCountryCodeWithJavaLangCharSequence:withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:withJavaLangStringBuilder:withBoolean:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[83].selector = @selector(parsePrefixAsIddWithJavaUtilRegexPattern:withJavaLangStringBuilder:);
  methods[84].selector = @selector(maybeStripInternationalPrefixAndNormalizeWithJavaLangStringBuilder:withNSString:);
  methods[85].selector = @selector(maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:withJavaLangStringBuilder:);
  methods[86].selector = @selector(maybeStripExtensionWithJavaLangStringBuilder:);
  methods[87].selector = @selector(checkRegionForParsingWithJavaLangCharSequence:withNSString:);
  methods[88].selector = @selector(parseWithJavaLangCharSequence:withNSString:);
  methods[89].selector = @selector(parseWithJavaLangCharSequence:withNSString:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[90].selector = @selector(parseAndKeepRawInputWithJavaLangCharSequence:withNSString:);
  methods[91].selector = @selector(parseAndKeepRawInputWithJavaLangCharSequence:withNSString:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[92].selector = @selector(findNumbersWithJavaLangCharSequence:withNSString:);
  methods[93].selector = @selector(findNumbersWithJavaLangCharSequence:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:withLong:);
  methods[94].selector = @selector(setItalianLeadingZerosForPhoneNumberWithJavaLangCharSequence:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[95].selector = @selector(parseHelperWithJavaLangCharSequence:withNSString:withBoolean:withBoolean:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[96].selector = @selector(buildNationalNumberForParsingWithNSString:withJavaLangStringBuilder:);
  methods[97].selector = @selector(copyCoreFieldsOnlyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[98].selector = @selector(isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[99].selector = @selector(isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[100].selector = @selector(isNumberMatchWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[101].selector = @selector(isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangCharSequence:);
  methods[102].selector = @selector(canBeInternationallyDialledWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:);
  methods[103].selector = @selector(isMobileNumberPortableRegionWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 152, -1, -1 },
    { "REGEX_FLAGS", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_REGEX_FLAGS, 0x18, -1, -1, -1, -1 },
    { "MIN_LENGTH_FOR_NSN", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN, 0x1a, -1, -1, -1, -1 },
    { "MAX_LENGTH_FOR_NSN", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_FOR_NSN, 0x18, -1, -1, -1, -1 },
    { "MAX_LENGTH_COUNTRY_CODE", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_COUNTRY_CODE, 0x18, -1, -1, -1, -1 },
    { "MAX_INPUT_STRING_LENGTH", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_INPUT_STRING_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "UNKNOWN_REGION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 153, -1, -1 },
    { "NANPA_COUNTRY_CODE", "I", .constantValue.asInt = ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE, 0x1a, -1, -1, -1, -1 },
    { "COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 154, -1, -1 },
    { "MOBILE_TOKEN_MAPPINGS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 155, 156, -1 },
    { "GEO_MOBILE_COUNTRIES_WITHOUT_MOBILE_AREA_CODES", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 157, 158, -1 },
    { "GEO_MOBILE_COUNTRIES", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 159, 158, -1 },
    { "PLUS_SIGN", "C", .constantValue.asUnichar = ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN, 0x18, -1, -1, -1, -1 },
    { "STAR_SIGN", "C", .constantValue.asUnichar = ComGoogleI18nPhonenumbersPhoneNumberUtil_STAR_SIGN, 0x1a, -1, -1, -1, -1 },
    { "RFC3966_EXTN_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 160, -1, -1 },
    { "RFC3966_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 161, -1, -1 },
    { "RFC3966_PHONE_CONTEXT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 162, -1, -1 },
    { "RFC3966_ISDN_SUBADDRESS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 163, -1, -1 },
    { "DIALLABLE_CHAR_MAPPINGS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 164, 165, -1 },
    { "ALPHA_MAPPINGS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 166, 165, -1 },
    { "ALPHA_PHONE_MAPPINGS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 167, 165, -1 },
    { "ALL_PLUS_NUMBER_GROUPING_SYMBOLS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 168, 165, -1 },
    { "SINGLE_INTERNATIONAL_PREFIX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 169, -1, -1 },
    { "VALID_PUNCTUATION", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 170, -1, -1 },
    { "DIGITS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 171, -1, -1 },
    { "VALID_ALPHA", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 172, -1, -1 },
    { "PLUS_CHARS", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 173, -1, -1 },
    { "PLUS_CHARS_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 174, -1, -1 },
    { "SEPARATOR_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 175, -1, -1 },
    { "CAPTURING_DIGIT_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 176, -1, -1 },
    { "VALID_START_CHAR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 177, -1, -1 },
    { "VALID_START_CHAR_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 178, -1, -1 },
    { "SECOND_NUMBER_START", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 179, -1, -1 },
    { "SECOND_NUMBER_START_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 180, -1, -1 },
    { "UNWANTED_END_CHARS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 181, -1, -1 },
    { "UNWANTED_END_CHAR_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 182, -1, -1 },
    { "VALID_ALPHA_PHONE_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 183, -1, -1 },
    { "VALID_PHONE_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 184, -1, -1 },
    { "DEFAULT_EXTN_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 185, -1, -1 },
    { "CAPTURING_EXTN_DIGITS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 186, -1, -1 },
    { "EXTN_PATTERNS_FOR_PARSING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 187, -1, -1 },
    { "EXTN_PATTERNS_FOR_MATCHING", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 188, -1, -1 },
    { "EXTN_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 189, -1, -1 },
    { "VALID_PHONE_NUMBER_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 190, -1, -1 },
    { "NON_DIGITS_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 191, -1, -1 },
    { "FIRST_GROUP_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 192, -1, -1 },
    { "NP_STRING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 193, -1, -1 },
    { "FG_STRING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 194, -1, -1 },
    { "CC_STRING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 195, -1, -1 },
    { "FIRST_GROUP_ONLY_PREFIX_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 196, -1, -1 },
    { "instance", "LComGoogleI18nPhonenumbersPhoneNumberUtil;", .constantValue.asLong = 0, 0xa, -1, 197, -1, -1 },
    { "REGION_CODE_FOR_NON_GEO_ENTITY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 198, -1, -1 },
    { "metadataSource_", "LComGoogleI18nPhonenumbersMetadataSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "countryCallingCodeToRegionCodeMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 199, -1 },
    { "matcherApi_", "LComGoogleI18nPhonenumbersInternalMatcherApi;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nanpaRegions_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 200, -1 },
    { "regexCache_", "LComGoogleI18nPhonenumbersInternalRegexCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "supportedRegions_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 200, -1 },
    { "countryCodesForNonGeographicalRegion_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 158, -1 },
  };
  static const void *ptrTable[] = { "createExtnPattern", "LNSString;", "LComGoogleI18nPhonenumbersMetadataSource;LJavaUtilMap;", "(Lcom/google/i18n/phonenumbers/MetadataSource;Ljava/util/Map<Ljava/lang/Integer;Ljava/util/List<Ljava/lang/String;>;>;)V", "extractPossibleNumber", "LJavaLangCharSequence;", "isViablePhoneNumber", "normalize", "LJavaLangStringBuilder;", "normalizeDigitsOnly", "normalizeDigits", "LJavaLangCharSequence;Z", "normalizeDiallableCharsOnly", "convertAlphaCharactersInNumber", "getLengthOfGeographicalAreaCode", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "getLengthOfNationalDestinationCode", "getCountryMobileToken", "I", "normalizeHelper", "LJavaLangCharSequence;LJavaUtilMap;Z", "(Ljava/lang/CharSequence;Ljava/util/Map<Ljava/lang/Character;Ljava/lang/Character;>;Z)Ljava/lang/String;", "setInstance", "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "()Ljava/util/Set<Ljava/lang/String;>;", "()Ljava/util/Set<Ljava/lang/Integer;>;", "descHasPossibleNumberData", "LComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc;", "descHasData", "getSupportedTypesForMetadata", "LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;", "(Lcom/google/i18n/phonenumbers/Phonemetadata$PhoneMetadata;)Ljava/util/Set<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$PhoneNumberType;>;", "getSupportedTypesForRegion", "(Ljava/lang/String;)Ljava/util/Set<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$PhoneNumberType;>;", "getSupportedTypesForNonGeoEntity", "(I)Ljava/util/Set<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$PhoneNumberType;>;", "createInstance", "LComGoogleI18nPhonenumbersMetadataLoader;", "LComGoogleI18nPhonenumbersMetadataSource;", "formattingRuleHasFirstGroupOnly", "isNumberGeographical", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;I", "isValidRegionCode", "hasValidCountryCallingCode", "format", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LJavaLangStringBuilder;", "formatByPattern", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LJavaUtilList;", "(Lcom/google/i18n/phonenumbers/Phonenumber$PhoneNumber;Lcom/google/i18n/phonenumbers/PhoneNumberUtil$PhoneNumberFormat;Ljava/util/List<Lcom/google/i18n/phonenumbers/Phonemetadata$NumberFormat;>;)Ljava/lang/String;", "formatNationalNumberWithCarrierCode", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaLangCharSequence;", "getMetadataForRegionOrCallingCode", "ILNSString;", "formatNationalNumberWithPreferredCarrierCode", "formatNumberForMobileDialing", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LNSString;Z", "formatOutOfCountryCallingNumber", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LNSString;", "formatInOriginalFormat", "rawInputContainsNationalPrefix", "LNSString;LNSString;LNSString;", "hasFormattingPatternForNumber", "formatOutOfCountryKeepingAlphaChars", "getNationalSignificantNumber", "prefixNumberWithCountryCallingCode", "ILComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LJavaLangStringBuilder;", "formatNsn", "LNSString;LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", "LNSString;LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LJavaLangCharSequence;", "chooseFormattingPatternForNumber", "LJavaUtilList;LNSString;", "(Ljava/util/List<Lcom/google/i18n/phonenumbers/Phonemetadata$NumberFormat;>;Ljava/lang/String;)Lcom/google/i18n/phonenumbers/Phonemetadata$NumberFormat;", "formatNsnUsingPattern", "LNSString;LComGoogleI18nPhonenumbersPhonemetadata_NumberFormat;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", "LNSString;LComGoogleI18nPhonenumbersPhonemetadata_NumberFormat;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LJavaLangCharSequence;", "getExampleNumber", "getInvalidExampleNumber", "getExampleNumberForType", "LNSString;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", "getExampleNumberForNonGeoEntity", "maybeAppendFormattedExtension", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LJavaLangStringBuilder;", "getNumberDescByType", "LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", "getNumberType", "getNumberTypeHelper", "LNSString;LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;", "getMetadataForRegion", "getMetadataForNonGeographicalRegion", "isNumberMatchingDesc", "LNSString;LComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc;", "isValidNumber", "isValidNumberForRegion", "getRegionCodeForNumber", "getRegionCodeForNumberFromRegionList", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaUtilList;", "(Lcom/google/i18n/phonenumbers/Phonenumber$PhoneNumber;Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", "getRegionCodeForCountryCode", "getRegionCodesForCountryCode", "(I)Ljava/util/List<Ljava/lang/String;>;", "getCountryCodeForRegion", "getCountryCodeForValidRegion", "getNddPrefixForRegion", "LNSString;Z", "isNANPACountry", "isAlphaNumber", "isPossibleNumber", "isPossibleNumberForType", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", "testNumberLength", "LJavaLangCharSequence;LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;", "LJavaLangCharSequence;LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", "isPossibleNumberWithReason", "isPossibleNumberForTypeWithReason", "LJavaLangCharSequence;LNSString;", "truncateTooLongNumber", "getAsYouTypeFormatter", "extractCountryCode", "LJavaLangStringBuilder;LJavaLangStringBuilder;", "maybeExtractCountryCode", "LJavaLangCharSequence;LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;LJavaLangStringBuilder;ZLComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "LComGoogleI18nPhonenumbersNumberParseException;", "parsePrefixAsIdd", "LJavaUtilRegexPattern;LJavaLangStringBuilder;", "maybeStripInternationalPrefixAndNormalize", "LJavaLangStringBuilder;LNSString;", "maybeStripNationalPrefixAndCarrierCode", "LJavaLangStringBuilder;LComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata;LJavaLangStringBuilder;", "maybeStripExtension", "checkRegionForParsing", "parse", "LJavaLangCharSequence;LNSString;LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "parseAndKeepRawInput", "findNumbers", "(Ljava/lang/CharSequence;Ljava/lang/String;)Ljava/lang/Iterable<Lcom/google/i18n/phonenumbers/PhoneNumberMatch;>;", "LJavaLangCharSequence;LNSString;LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;J", "(Ljava/lang/CharSequence;Ljava/lang/String;Lcom/google/i18n/phonenumbers/PhoneNumberUtil$Leniency;J)Ljava/lang/Iterable<Lcom/google/i18n/phonenumbers/PhoneNumberMatch;>;", "setItalianLeadingZerosForPhoneNumber", "LJavaLangCharSequence;LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "parseHelper", "LJavaLangCharSequence;LNSString;ZZLComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "buildNationalNumberForParsing", "LNSString;LJavaLangStringBuilder;", "copyCoreFieldsOnly", "isNumberMatch", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;", "isNationalNumberSuffixOfTheOther", "LJavaLangCharSequence;LJavaLangCharSequence;", "canBeInternationallyDialled", "isMobileNumberPortableRegion", &ComGoogleI18nPhonenumbersPhoneNumberUtil_logger, &ComGoogleI18nPhonenumbersPhoneNumberUtil_UNKNOWN_REGION, &ComGoogleI18nPhonenumbersPhoneNumberUtil_COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX, &ComGoogleI18nPhonenumbersPhoneNumberUtil_MOBILE_TOKEN_MAPPINGS, "Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/String;>;", &ComGoogleI18nPhonenumbersPhoneNumberUtil_GEO_MOBILE_COUNTRIES_WITHOUT_MOBILE_AREA_CODES, "Ljava/util/Set<Ljava/lang/Integer;>;", &ComGoogleI18nPhonenumbersPhoneNumberUtil_GEO_MOBILE_COUNTRIES, &ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_EXTN_PREFIX, &ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PREFIX, &ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PHONE_CONTEXT, &ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_ISDN_SUBADDRESS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_DIALLABLE_CHAR_MAPPINGS, "Ljava/util/Map<Ljava/lang/Character;Ljava/lang/Character;>;", &ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_PHONE_MAPPINGS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_ALL_PLUS_NUMBER_GROUPING_SYMBOLS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_SINGLE_INTERNATIONAL_PREFIX, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, &ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA, &ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_SEPARATOR_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_DIGIT_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START, &ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHARS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHAR_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA_PHONE_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER, &ComGoogleI18nPhonenumbersPhoneNumberUtil_DEFAULT_EXTN_PREFIX, &ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_EXTN_DIGITS, &ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_PARSING, &ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_MATCHING, &ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_NON_DIGITS_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_NP_STRING, &ComGoogleI18nPhonenumbersPhoneNumberUtil_FG_STRING, &ComGoogleI18nPhonenumbersPhoneNumberUtil_CC_STRING, &ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_ONLY_PREFIX_PATTERN, &ComGoogleI18nPhonenumbersPhoneNumberUtil_instance, &ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY, "Ljava/util/Map<Ljava/lang/Integer;Ljava/util/List<Ljava/lang/String;>;>;", "Ljava/util/Set<Ljava/lang/String;>;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil = { "PhoneNumberUtil", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x1, 104, 59, -1, 201, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil class]) {
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_logger, JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleI18nPhonenumbersPhoneNumberUtil_class_() getName]));
    {
      JavaUtilHashMap *mobileTokenMap = create_JavaUtilHashMap_init();
      [mobileTokenMap putWithId:JavaLangInteger_valueOfWithInt_(52) withId:@"1"];
      [mobileTokenMap putWithId:JavaLangInteger_valueOfWithInt_(54) withId:@"9"];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_MOBILE_TOKEN_MAPPINGS, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(mobileTokenMap));
      JavaUtilHashSet *geoMobileCountriesWithoutMobileAreaCodes = create_JavaUtilHashSet_init();
      [geoMobileCountriesWithoutMobileAreaCodes addWithId:JavaLangInteger_valueOfWithInt_(86)];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_GEO_MOBILE_COUNTRIES_WITHOUT_MOBILE_AREA_CODES, JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(geoMobileCountriesWithoutMobileAreaCodes));
      JavaUtilHashSet *geoMobileCountries = create_JavaUtilHashSet_init();
      [geoMobileCountries addWithId:JavaLangInteger_valueOfWithInt_(52)];
      [geoMobileCountries addWithId:JavaLangInteger_valueOfWithInt_(54)];
      [geoMobileCountries addWithId:JavaLangInteger_valueOfWithInt_(55)];
      [geoMobileCountries addWithId:JavaLangInteger_valueOfWithInt_(62)];
      [geoMobileCountries addAllWithJavaUtilCollection:geoMobileCountriesWithoutMobileAreaCodes];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_GEO_MOBILE_COUNTRIES, JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(geoMobileCountries));
      JavaUtilHashMap *asciiDigitMappings = create_JavaUtilHashMap_init();
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('0') withId:JavaLangCharacter_valueOfWithChar_('0')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('1') withId:JavaLangCharacter_valueOfWithChar_('1')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('2') withId:JavaLangCharacter_valueOfWithChar_('2')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('3') withId:JavaLangCharacter_valueOfWithChar_('3')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('4') withId:JavaLangCharacter_valueOfWithChar_('4')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('5') withId:JavaLangCharacter_valueOfWithChar_('5')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('6') withId:JavaLangCharacter_valueOfWithChar_('6')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('7') withId:JavaLangCharacter_valueOfWithChar_('7')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('8') withId:JavaLangCharacter_valueOfWithChar_('8')];
      [asciiDigitMappings putWithId:JavaLangCharacter_valueOfWithChar_('9') withId:JavaLangCharacter_valueOfWithChar_('9')];
      JavaUtilHashMap *alphaMap = create_JavaUtilHashMap_initWithInt_(40);
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('A') withId:JavaLangCharacter_valueOfWithChar_('2')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('B') withId:JavaLangCharacter_valueOfWithChar_('2')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('C') withId:JavaLangCharacter_valueOfWithChar_('2')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('D') withId:JavaLangCharacter_valueOfWithChar_('3')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('E') withId:JavaLangCharacter_valueOfWithChar_('3')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('F') withId:JavaLangCharacter_valueOfWithChar_('3')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('G') withId:JavaLangCharacter_valueOfWithChar_('4')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('H') withId:JavaLangCharacter_valueOfWithChar_('4')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('I') withId:JavaLangCharacter_valueOfWithChar_('4')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('J') withId:JavaLangCharacter_valueOfWithChar_('5')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('K') withId:JavaLangCharacter_valueOfWithChar_('5')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('L') withId:JavaLangCharacter_valueOfWithChar_('5')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('M') withId:JavaLangCharacter_valueOfWithChar_('6')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('N') withId:JavaLangCharacter_valueOfWithChar_('6')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('O') withId:JavaLangCharacter_valueOfWithChar_('6')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('P') withId:JavaLangCharacter_valueOfWithChar_('7')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('Q') withId:JavaLangCharacter_valueOfWithChar_('7')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('R') withId:JavaLangCharacter_valueOfWithChar_('7')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('S') withId:JavaLangCharacter_valueOfWithChar_('7')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('T') withId:JavaLangCharacter_valueOfWithChar_('8')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('U') withId:JavaLangCharacter_valueOfWithChar_('8')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('V') withId:JavaLangCharacter_valueOfWithChar_('8')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('W') withId:JavaLangCharacter_valueOfWithChar_('9')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('X') withId:JavaLangCharacter_valueOfWithChar_('9')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('Y') withId:JavaLangCharacter_valueOfWithChar_('9')];
      [alphaMap putWithId:JavaLangCharacter_valueOfWithChar_('Z') withId:JavaLangCharacter_valueOfWithChar_('9')];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(alphaMap));
      JavaUtilHashMap *combinedMap = create_JavaUtilHashMap_initWithInt_(100);
      [combinedMap putAllWithJavaUtilMap:ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS];
      [combinedMap putAllWithJavaUtilMap:asciiDigitMappings];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_PHONE_MAPPINGS, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(combinedMap));
      JavaUtilHashMap *diallableCharMap = create_JavaUtilHashMap_init();
      [diallableCharMap putAllWithJavaUtilMap:asciiDigitMappings];
      [diallableCharMap putWithId:JavaLangCharacter_valueOfWithChar_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN) withId:JavaLangCharacter_valueOfWithChar_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN)];
      [diallableCharMap putWithId:JavaLangCharacter_valueOfWithChar_('*') withId:JavaLangCharacter_valueOfWithChar_('*')];
      [diallableCharMap putWithId:JavaLangCharacter_valueOfWithChar_('#') withId:JavaLangCharacter_valueOfWithChar_('#')];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_DIALLABLE_CHAR_MAPPINGS, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(diallableCharMap));
      JavaUtilHashMap *allPlusNumberGroupings = create_JavaUtilHashMap_init();
      for (JavaLangCharacter *boxed__ in nil_chk([((id<JavaUtilMap>) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS)) keySet])) {
        jchar c = [((JavaLangCharacter *) nil_chk(boxed__)) charValue];
        [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(JavaLangCharacter_toLowerCaseWithChar_(c)) withId:JavaLangCharacter_valueOfWithChar_(c)];
        [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(c) withId:JavaLangCharacter_valueOfWithChar_(c)];
      }
      [allPlusNumberGroupings putAllWithJavaUtilMap:asciiDigitMappings];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_('-') withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0xff0d) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2010) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2011) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2012) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2013) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2014) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2015) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2212) withId:JavaLangCharacter_valueOfWithChar_('-')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_('/') withId:JavaLangCharacter_valueOfWithChar_('/')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0xff0f) withId:JavaLangCharacter_valueOfWithChar_('/')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(' ') withId:JavaLangCharacter_valueOfWithChar_(' ')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x3000) withId:JavaLangCharacter_valueOfWithChar_(' ')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0x2060) withId:JavaLangCharacter_valueOfWithChar_(' ')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_('.') withId:JavaLangCharacter_valueOfWithChar_('.')];
      [allPlusNumberGroupings putWithId:JavaLangCharacter_valueOfWithChar_(0xff0e) withId:JavaLangCharacter_valueOfWithChar_('.')];
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_ALL_PLUS_NUMBER_GROUPING_SYMBOLS, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(allPlusNumberGroupings));
    }
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_SINGLE_INTERNATIONAL_PREFIX, JavaUtilRegexPattern_compileWithNSString_(@"[\\d]+(?:[~\u2053\u223c\uff5e][\\d]+)?"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA, JreStrcat("$$", [((NSString *) nil_chk(JavaUtilArrays_toStringWithNSObjectArray_([((id<JavaUtilSet>) nil_chk([ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS keySet])) toArray]))) java_replaceAll:@"[, \\[\\]]" withReplacement:@""], [((NSString *) nil_chk([((NSString *) nil_chk(JavaUtilArrays_toStringWithNSObjectArray_([((id<JavaUtilSet>) nil_chk([ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_MAPPINGS keySet])) toArray]))) lowercaseString])) java_replaceAll:@"[, \\[\\]]" withReplacement:@""]));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$$", '[', ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS, @"]+")));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_SEPARATOR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$$", '[', ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, @"]+")));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_DIGIT_PATTERN, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$C", '(', ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, ')')));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START_PATTERN, JavaUtilRegexPattern_compileWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHAR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHARS));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA_PHONE_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(?:.*?[A-Za-z]){3}.*"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER, JreStrcat("$CI$$$$C$$$$C$$$", ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, '{', ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN, @"}|[", ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS, @"]*+(?:[", ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, ComGoogleI18nPhonenumbersPhoneNumberUtil_STAR_SIGN, @"]*", ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, @"){3,}[", ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, ComGoogleI18nPhonenumbersPhoneNumberUtil_STAR_SIGN, ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA, ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, @"]*"));
    {
      NSString *singleExtnSymbolsForMatching = @"x\uff58#\uff03~\uff5e";
      NSString *singleExtnSymbolsForParsing = JreStrcat("$$", @",;", singleExtnSymbolsForMatching);
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_PARSING, ComGoogleI18nPhonenumbersPhoneNumberUtil_createExtnPatternWithNSString_(singleExtnSymbolsForParsing));
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_MATCHING, ComGoogleI18nPhonenumbersPhoneNumberUtil_createExtnPatternWithNSString_(singleExtnSymbolsForMatching));
    }
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERN, JavaUtilRegexPattern_compileWithNSString_withInt_(JreStrcat("$$$", @"(?:", ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_PARSING, @")$"), ComGoogleI18nPhonenumbersPhoneNumberUtil_REGEX_FLAGS));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER_PATTERN, JavaUtilRegexPattern_compileWithNSString_withInt_(JreStrcat("$$$$", ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER, @"(?:", ComGoogleI18nPhonenumbersPhoneNumberUtil_EXTN_PATTERNS_FOR_PARSING, @")?"), ComGoogleI18nPhonenumbersPhoneNumberUtil_REGEX_FLAGS));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_NON_DIGITS_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(\\D+)"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(\\$\\d)"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_ONLY_PREFIX_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"\\(?\\$1\\)?"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_instance, nil);
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil)
  }
}

@end

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_createExtnPatternWithNSString_(NSString *singleExtnSymbols) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return (JreStrcat("$$$$$$$$$", ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_EXTN_PREFIX, ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_EXTN_DIGITS, @"|[ \u00a0\\t,]*(?:e?xt(?:ensi(?:o\u0301?|\u00f3))?n?|\uff45?\uff58\uff54\uff4e?|[", singleExtnSymbols, @"]|int|anexo|\uff49\uff4e\uff54)[:\\.\uff0e]?[ \u00a0\\t,-]*", ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_EXTN_DIGITS, @"#?|[- ]+(", ComGoogleI18nPhonenumbersPhoneNumberUtil_DIGITS, @"{1,5})#"));
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource, id<JavaUtilMap> countryCallingCodeToRegionCodeMap) {
  NSObject_init(self);
  JreStrongAssign(&self->matcherApi_, ComGoogleI18nPhonenumbersInternalRegexBasedMatcher_create());
  JreStrongAssignAndConsume(&self->nanpaRegions_, new_JavaUtilHashSet_initWithInt_(35));
  JreStrongAssignAndConsume(&self->regexCache_, new_ComGoogleI18nPhonenumbersInternalRegexCache_initWithInt_(100));
  JreStrongAssignAndConsume(&self->supportedRegions_, new_JavaUtilHashSet_initWithInt_(320));
  JreStrongAssignAndConsume(&self->countryCodesForNonGeographicalRegion_, new_JavaUtilHashSet_init());
  JreStrongAssign(&self->metadataSource_, metadataSource);
  JreStrongAssign(&self->countryCallingCodeToRegionCodeMap_, countryCallingCodeToRegionCodeMap);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(countryCallingCodeToRegionCodeMap)) entrySet])) {
    id<JavaUtilList> regionCodes = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    if ([((id<JavaUtilList>) nil_chk(regionCodes)) size] == 1 && [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY)) isEqual:[regionCodes getWithInt:0]]) {
      [self->countryCodesForNonGeographicalRegion_ addWithId:[entry_ getKey]];
    }
    else {
      [self->supportedRegions_ addAllWithJavaUtilCollection:regionCodes];
    }
  }
  if ([self->supportedRegions_ removeWithId:ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY]) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"invalid metadata (country calling code was mapped to the non-geo entity as well as specific region(s))"];
  }
  [self->nanpaRegions_ addAllWithJavaUtilCollection:[countryCallingCodeToRegionCodeMap getWithId:JavaLangInteger_valueOfWithInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_NANPA_COUNTRY_CODE)]];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_(id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource, id<JavaUtilMap> countryCallingCodeToRegionCodeMap) {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil, initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_, metadataSource, countryCallingCodeToRegionCodeMap)
}

ComGoogleI18nPhonenumbersPhoneNumberUtil *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_(id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource, id<JavaUtilMap> countryCallingCodeToRegionCodeMap) {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil, initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_, metadataSource, countryCallingCodeToRegionCodeMap)
}

id<JavaLangCharSequence> ComGoogleI18nPhonenumbersPhoneNumberUtil_extractPossibleNumberWithJavaLangCharSequence_(id<JavaLangCharSequence> number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_START_CHAR_PATTERN)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    number = [((id<JavaLangCharSequence>) nil_chk(number)) subSequenceFrom:[m start] to:[number java_length]];
    JavaUtilRegexMatcher *trailingCharsMatcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_UNWANTED_END_CHAR_PATTERN)) matcherWithJavaLangCharSequence:number];
    if ([((JavaUtilRegexMatcher *) nil_chk(trailingCharsMatcher)) find]) {
      number = [((id<JavaLangCharSequence>) nil_chk(number)) subSequenceFrom:0 to:[trailingCharsMatcher start]];
    }
    JavaUtilRegexMatcher *secondNumber = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_SECOND_NUMBER_START_PATTERN)) matcherWithJavaLangCharSequence:number];
    if ([((JavaUtilRegexMatcher *) nil_chk(secondNumber)) find]) {
      number = [((id<JavaLangCharSequence>) nil_chk(number)) subSequenceFrom:0 to:[secondNumber start]];
    }
    return number;
  }
  else {
    return @"";
  }
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isViablePhoneNumberWithJavaLangCharSequence_(id<JavaLangCharSequence> number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  if ([((id<JavaLangCharSequence>) nil_chk(number)) java_length] < ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN) {
    return false;
  }
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PHONE_NUMBER_PATTERN)) matcherWithJavaLangCharSequence:number];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) matches];
}

JavaLangStringBuilder *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithJavaLangStringBuilder_(JavaLangStringBuilder *number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_ALPHA_PHONE_PATTERN)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    [((JavaLangStringBuilder *) nil_chk(number)) replaceWithInt:0 withInt:[number java_length] withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithJavaLangCharSequence_withJavaUtilMap_withBoolean_(number, ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_PHONE_MAPPINGS, true)];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(number)) replaceWithInt:0 withInt:[number java_length] withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithJavaLangCharSequence_(number)];
  }
  return number;
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithJavaLangCharSequence_(id<JavaLangCharSequence> number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return [((JavaLangStringBuilder *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsWithJavaLangCharSequence_withBoolean_(number, false))) description];
}

JavaLangStringBuilder *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsWithJavaLangCharSequence_withBoolean_(id<JavaLangCharSequence> number, jboolean keepNonDigits) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  JavaLangStringBuilder *normalizedDigits = create_JavaLangStringBuilder_initWithInt_([((id<JavaLangCharSequence>) nil_chk(number)) java_length]);
  for (jint i = 0; i < [number java_length]; i++) {
    jchar c = [number charAtWithInt:i];
    jint digit = JavaLangCharacter_digitWithChar_withInt_(c, 10);
    if (digit != -1) {
      [normalizedDigits appendWithInt:digit];
    }
    else if (keepNonDigits) {
      [normalizedDigits appendWithChar:c];
    }
  }
  return normalizedDigits;
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDiallableCharsOnlyWithJavaLangCharSequence_(id<JavaLangCharSequence> number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithJavaLangCharSequence_withJavaUtilMap_withBoolean_(number, ComGoogleI18nPhonenumbersPhoneNumberUtil_DIALLABLE_CHAR_MAPPINGS, true);
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_convertAlphaCharactersInNumberWithJavaLangCharSequence_(id<JavaLangCharSequence> number) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithJavaLangCharSequence_withJavaUtilMap_withBoolean_(number, ComGoogleI18nPhonenumbersPhoneNumberUtil_ALPHA_PHONE_MAPPINGS, false);
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryMobileTokenWithInt_(jint countryCallingCode) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  if ([((id<JavaUtilMap>) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_MOBILE_TOKEN_MAPPINGS)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)]) {
    return [ComGoogleI18nPhonenumbersPhoneNumberUtil_MOBILE_TOKEN_MAPPINGS getWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)];
  }
  return @"";
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeHelperWithJavaLangCharSequence_withJavaUtilMap_withBoolean_(id<JavaLangCharSequence> number, id<JavaUtilMap> normalizationReplacements, jboolean removeNonMatches) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  JavaLangStringBuilder *normalizedNumber = create_JavaLangStringBuilder_initWithInt_([((id<JavaLangCharSequence>) nil_chk(number)) java_length]);
  for (jint i = 0; i < [number java_length]; i++) {
    jchar character = [number charAtWithInt:i];
    JavaLangCharacter *newDigit = [((id<JavaUtilMap>) nil_chk(normalizationReplacements)) getWithId:JavaLangCharacter_valueOfWithChar_(JavaLangCharacter_toUpperCaseWithChar_(character))];
    if (newDigit != nil) {
      [normalizedNumber appendWithId:newDigit];
    }
    else if (!removeNonMatches) {
      [normalizedNumber appendWithChar:character];
    }
  }
  return [normalizedNumber description];
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_setInstanceWithComGoogleI18nPhonenumbersPhoneNumberUtil_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  @synchronized(ComGoogleI18nPhonenumbersPhoneNumberUtil_class_()) {
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberUtil_instance, util);
  }
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_descHasPossibleNumberDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_(ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *desc) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *) nil_chk(desc)) getPossibleLengthCount] != 1 || [desc getPossibleLengthWithInt:0] != -1;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_descHasDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_(ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *desc) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *) nil_chk(desc)) hasExampleNumber] || ComGoogleI18nPhonenumbersPhoneNumberUtil_descHasPossibleNumberDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_(desc) || [desc hasNationalNumberPattern];
}

id<JavaUtilSet> ComGoogleI18nPhonenumbersPhoneNumberUtil_getSupportedTypesForMetadataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata) {
  id<JavaUtilSet> types = create_JavaUtilTreeSet_init();
  {
    IOSObjectArray *a__ = ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values();
    ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *type = *b__++;
      if (type == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE) || type == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN)) {
        continue;
      }
      if (ComGoogleI18nPhonenumbersPhoneNumberUtil_descHasDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_([self getNumberDescByTypeWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:metadata withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:type])) {
        [types addWithId:type];
      }
    }
  }
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(types);
}

ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_getInstance() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  @synchronized(ComGoogleI18nPhonenumbersPhoneNumberUtil_class_()) {
    if (ComGoogleI18nPhonenumbersPhoneNumberUtil_instance == nil) {
      ComGoogleI18nPhonenumbersPhoneNumberUtil_setInstanceWithComGoogleI18nPhonenumbersPhoneNumberUtil_(ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataLoader_(JreLoadStatic(ComGoogleI18nPhonenumbersMetadataManager, DEFAULT_METADATA_LOADER)));
    }
    return JreRetainedLocalValue(ComGoogleI18nPhonenumbersPhoneNumberUtil_instance);
  }
}

ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataLoader_(id<ComGoogleI18nPhonenumbersMetadataLoader> metadataLoader) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  if (metadataLoader == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"metadataLoader could not be null.");
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataSource_(create_ComGoogleI18nPhonenumbersMultiFileMetadataSourceImpl_initWithComGoogleI18nPhonenumbersMetadataLoader_(metadataLoader));
}

ComGoogleI18nPhonenumbersPhoneNumberUtil *ComGoogleI18nPhonenumbersPhoneNumberUtil_createInstanceWithComGoogleI18nPhonenumbersMetadataSource_(id<ComGoogleI18nPhonenumbersMetadataSource> metadataSource) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  if (metadataSource == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"metadataSource could not be null.");
  }
  return create_ComGoogleI18nPhonenumbersPhoneNumberUtil_initWithComGoogleI18nPhonenumbersMetadataSource_withJavaUtilMap_(metadataSource, ComGoogleI18nPhonenumbersCountryCodeToRegionCodeMap_getCountryCodeToRegionCodeMap());
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_formattingRuleHasFirstGroupOnlyWithNSString_(NSString *nationalPrefixFormattingRule) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  return [((NSString *) nil_chk(nationalPrefixFormattingRule)) java_length] == 0 || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_ONLY_PREFIX_PATTERN)) matcherWithJavaLangCharSequence:nationalPrefixFormattingRule])) matches];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *regionCode) {
  return regionCode != nil && [((id<JavaUtilSet>) nil_chk(self->supportedRegions_)) containsWithId:regionCode];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_hasValidCountryCallingCodeWithInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode) {
  return [((id<JavaUtilMap>) nil_chk(self->countryCallingCodeToRegionCodeMap_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(countryCallingCode)];
}

ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode, NSString *regionCode) {
  return [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY)) isEqual:regionCode] ? [self getMetadataForNonGeographicalRegionWithInt:countryCallingCode] : [self getMetadataForRegionWithNSString:regionCode];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_rawInputContainsNationalPrefixWithNSString_withNSString_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *rawInput, NSString *nationalPrefix, NSString *regionCode) {
  NSString *normalizedNationalNumber = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithJavaLangCharSequence_(rawInput);
  if ([((NSString *) nil_chk(normalizedNationalNumber)) java_hasPrefix:nationalPrefix]) {
    @try {
      return [self isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:[self parseWithJavaLangCharSequence:[normalizedNationalNumber java_substring:[((NSString *) nil_chk(nationalPrefix)) java_length]] withNSString:regionCode]];
    }
    @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
      return false;
    }
  }
  return false;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_hasFormattingPatternForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number) {
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode];
  NSString *phoneNumberRegion = [self getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCallingCode, phoneNumberRegion);
  if (metadata == nil) {
    return false;
  }
  NSString *nationalNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *formatRule = [self chooseFormattingPatternForNumberWithJavaUtilList:[metadata numberFormats] withNSString:nationalNumber];
  return formatRule != nil;
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_prefixNumberWithCountryCallingCodeWithInt_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, jint countryCallingCode, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, JavaLangStringBuilder *formattedNumber) {
  switch ([numberFormat ordinal]) {
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_Enum_E164:
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) insertWithInt:0 withInt:countryCallingCode])) insertWithInt:0 withChar:ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN];
    return;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_Enum_INTERNATIONAL:
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) insertWithInt:0 withNSString:@" "])) insertWithInt:0 withInt:countryCallingCode])) insertWithInt:0 withChar:ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN];
    return;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_Enum_RFC3966:
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) insertWithInt:0 withNSString:@"-"])) insertWithInt:0 withInt:countryCallingCode])) insertWithInt:0 withChar:ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN])) insertWithInt:0 withNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PREFIX];
    return;
    case ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_Enum_NATIONAL:
    default:
    return;
  }
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *number, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat) {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangCharSequence_(self, number, metadata, numberFormat, nil);
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangCharSequence_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *number, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, id<JavaLangCharSequence> carrierCode) {
  id<JavaUtilList> intlNumberFormats = [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) intlNumberFormats];
  id<JavaUtilList> availableFormats = ([((id<JavaUtilList>) nil_chk(intlNumberFormats)) size] == 0 || numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL)) ? [metadata numberFormats] : [metadata intlNumberFormats];
  ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *formattingPattern = [self chooseFormattingPatternForNumberWithJavaUtilList:availableFormats withNSString:number];
  return (formattingPattern == nil) ? number : ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnUsingPatternWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangCharSequence_(self, number, formattingPattern, numberFormat, carrierCode);
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_formatNsnUsingPatternWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangCharSequence_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *nationalNumber, ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *formattingPattern, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, id<JavaLangCharSequence> carrierCode) {
  NSString *numberFormatRule = [((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *) nil_chk(formattingPattern)) getFormat];
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:[formattingPattern getPattern]])) matcherWithJavaLangCharSequence:nationalNumber];
  NSString *formattedNationalNumber = @"";
  if (numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL) && carrierCode != nil && [carrierCode java_length] > 0 && [((NSString *) nil_chk([formattingPattern getDomesticCarrierCodeFormattingRule])) java_length] > 0) {
    NSString *carrierCodeFormattingRule = [formattingPattern getDomesticCarrierCodeFormattingRule];
    carrierCodeFormattingRule = [((NSString *) nil_chk(carrierCodeFormattingRule)) java_replace:ComGoogleI18nPhonenumbersPhoneNumberUtil_CC_STRING withSequence:carrierCode];
    numberFormatRule = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_PATTERN)) matcherWithJavaLangCharSequence:numberFormatRule])) replaceFirstWithNSString:carrierCodeFormattingRule];
    formattedNationalNumber = [((JavaUtilRegexMatcher *) nil_chk(m)) replaceAllWithNSString:numberFormatRule];
  }
  else {
    NSString *nationalPrefixFormattingRule = [formattingPattern getNationalPrefixFormattingRule];
    if (numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL) && nationalPrefixFormattingRule != nil && [nationalPrefixFormattingRule java_length] > 0) {
      JavaUtilRegexMatcher *firstGroupMatcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_FIRST_GROUP_PATTERN)) matcherWithJavaLangCharSequence:numberFormatRule];
      formattedNationalNumber = [((JavaUtilRegexMatcher *) nil_chk(m)) replaceAllWithNSString:[((JavaUtilRegexMatcher *) nil_chk(firstGroupMatcher)) replaceFirstWithNSString:nationalPrefixFormattingRule]];
    }
    else {
      formattedNationalNumber = [((JavaUtilRegexMatcher *) nil_chk(m)) replaceAllWithNSString:numberFormatRule];
    }
  }
  if (numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, RFC3966)) {
    JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_SEPARATOR_PATTERN)) matcherWithJavaLangCharSequence:formattedNationalNumber];
    if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) lookingAt]) {
      formattedNationalNumber = [matcher replaceFirstWithNSString:@""];
    }
    formattedNationalNumber = [((JavaUtilRegexMatcher *) nil_chk([matcher resetWithJavaLangCharSequence:formattedNationalNumber])) replaceAllWithNSString:@"-"];
  }
  return formattedNationalNumber;
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_maybeAppendFormattedExtensionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *numberFormat, JavaLangStringBuilder *formattedNumber) {
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) hasExtension] && [((NSString *) nil_chk([number getExtension])) java_length] > 0) {
    if (numberFormat == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, RFC3966)) {
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) appendWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_EXTN_PREFIX])) appendWithNSString:[number getExtension]];
    }
    else {
      if ([((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) hasPreferredExtnPrefix]) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) appendWithNSString:[metadata getPreferredExtnPrefix]])) appendWithNSString:[number getExtension]];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(formattedNumber)) appendWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_DEFAULT_EXTN_PREFIX])) appendWithNSString:[number getExtension]];
      }
    }
  }
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *nationalNumber, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata) {
  if (![self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getGeneralDesc]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getPremiumRate]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PREMIUM_RATE);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getTollFree]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, TOLL_FREE);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getSharedCost]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, SHARED_COST);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getVoip]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, VOIP);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getPersonalNumber]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PERSONAL_NUMBER);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getPager]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PAGER);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getUan]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UAN);
  }
  if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getVoicemail]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, VOICEMAIL);
  }
  jboolean isFixedLine = [self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getFixedLine]];
  if (isFixedLine) {
    if ([metadata getSameMobileAndFixedLinePattern]) {
      return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE);
    }
    else if ([self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getMobile]]) {
      return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE);
    }
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE);
  }
  if (![metadata getSameMobileAndFixedLinePattern] && [self isNumberMatchingDescWithNSString:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc:[metadata getMobile]]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE);
  }
  return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN);
}

NSString *ComGoogleI18nPhonenumbersPhoneNumberUtil_getRegionCodeForNumberFromRegionListWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilList_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, id<JavaUtilList> regionCodes) {
  NSString *nationalNumber = [self getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  for (NSString * __strong regionCode in nil_chk(regionCodes)) {
    ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:regionCode];
    if ([((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) hasLeadingDigits]) {
      if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:[metadata getLeadingDigits]])) matcherWithJavaLangCharSequence:nationalNumber])) lookingAt]) {
        return regionCode;
      }
    }
    else if (ComGoogleI18nPhonenumbersPhoneNumberUtil_getNumberTypeHelperWithNSString_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, nationalNumber, metadata) != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN)) {
      return regionCode;
    }
  }
  return nil;
}

jint ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryCodeForValidRegionWithNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *regionCode) {
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [self getMetadataForRegionWithNSString:regionCode];
  if (metadata == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid region code: ", regionCode));
  }
  return [metadata getCountryCode];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, id<JavaLangCharSequence> number, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata) {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(self, number, metadata, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN));
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, id<JavaLangCharSequence> number, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *type) {
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *descForType = [self getNumberDescByTypeWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:metadata withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:type];
  id<JavaUtilList> possibleLengths = [((id<JavaUtilList>) nil_chk([((ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *) nil_chk(descForType)) getPossibleLengthList])) isEmpty] ? [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *) nil_chk([((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getGeneralDesc])) getPossibleLengthList] : [descForType getPossibleLengthList];
  id<JavaUtilList> localLengths = [descForType getPossibleLengthLocalOnlyList];
  if (type == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE)) {
    if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_descHasPossibleNumberDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_([self getNumberDescByTypeWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:metadata withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE)])) {
      return ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(self, number, metadata, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE));
    }
    else {
      ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *mobileDesc = [self getNumberDescByTypeWithComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:metadata withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE)];
      if (ComGoogleI18nPhonenumbersPhoneNumberUtil_descHasPossibleNumberDataWithComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc_(mobileDesc)) {
        possibleLengths = create_JavaUtilArrayList_initWithJavaUtilCollection_(possibleLengths);
        [possibleLengths addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk([((ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *) nil_chk(mobileDesc)) getPossibleLengthList])) size] == 0 ? [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneNumberDesc *) nil_chk([((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(metadata)) getGeneralDesc])) getPossibleLengthList] : [mobileDesc getPossibleLengthList]];
        JavaUtilCollections_sortWithJavaUtilList_(possibleLengths);
        if ([((id<JavaUtilList>) nil_chk(localLengths)) isEmpty]) {
          localLengths = [mobileDesc getPossibleLengthLocalOnlyList];
        }
        else {
          localLengths = create_JavaUtilArrayList_initWithJavaUtilCollection_(localLengths);
          [localLengths addAllWithJavaUtilCollection:[mobileDesc getPossibleLengthLocalOnlyList]];
          JavaUtilCollections_sortWithJavaUtilList_(localLengths);
        }
      }
    }
  }
  if ([((JavaLangInteger *) nil_chk([possibleLengths getWithInt:0])) intValue] == -1) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, INVALID_LENGTH);
  }
  jint actualLength = [((id<JavaLangCharSequence>) nil_chk(number)) java_length];
  if ([((id<JavaUtilList>) nil_chk(localLengths)) containsWithId:JavaLangInteger_valueOfWithInt_(actualLength)]) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE_LOCAL_ONLY);
  }
  jint minimumLength = [((JavaLangInteger *) nil_chk([possibleLengths getWithInt:0])) intValue];
  if (minimumLength == actualLength) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE);
  }
  else if (minimumLength > actualLength) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_SHORT);
  }
  else if ([((JavaLangInteger *) nil_chk([possibleLengths getWithInt:[possibleLengths size] - 1])) intValue] < actualLength) {
    return JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_LONG);
  }
  return [((id<JavaUtilList>) nil_chk([possibleLengths subListWithInt:1 withInt:[possibleLengths size]])) containsWithId:JavaLangInteger_valueOfWithInt_(actualLength)] ? JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE) : JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, INVALID_LENGTH);
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_parsePrefixAsIddWithJavaUtilRegexPattern_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, JavaUtilRegexPattern *iddPattern, JavaLangStringBuilder *number) {
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(iddPattern)) matcherWithJavaLangCharSequence:number];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) lookingAt]) {
    jint matchEnd = [m end];
    JavaUtilRegexMatcher *digitMatcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_CAPTURING_DIGIT_PATTERN)) matcherWithJavaLangCharSequence:[((JavaLangStringBuilder *) nil_chk(number)) substringWithInt:matchEnd]];
    if ([((JavaUtilRegexMatcher *) nil_chk(digitMatcher)) find]) {
      NSString *normalizedGroup = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithJavaLangCharSequence_([digitMatcher groupWithInt:1]);
      if ([((NSString *) nil_chk(normalizedGroup)) isEqual:@"0"]) {
        return false;
      }
    }
    [number delete__WithInt:0 withInt:matchEnd];
    return true;
  }
  return false;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_checkRegionForParsingWithJavaLangCharSequence_withNSString_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, id<JavaLangCharSequence> numberToParse, NSString *defaultRegion) {
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isValidRegionCodeWithNSString_(self, defaultRegion)) {
    if ((numberToParse == nil) || ([((id<JavaLangCharSequence>) nil_chk(numberToParse)) java_length] == 0) || ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN)) matcherWithJavaLangCharSequence:numberToParse])) lookingAt]) {
      return false;
    }
  }
  return true;
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_setItalianLeadingZerosForPhoneNumberWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(id<JavaLangCharSequence> nationalNumber, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  if ([((id<JavaLangCharSequence>) nil_chk(nationalNumber)) java_length] > 1 && [nationalNumber charAtWithInt:0] == '0') {
    [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setItalianLeadingZeroWithBoolean:true];
    jint numberOfLeadingZeros = 1;
    while (numberOfLeadingZeros < [nationalNumber java_length] - 1 && [nationalNumber charAtWithInt:numberOfLeadingZeros] == '0') {
      numberOfLeadingZeros++;
    }
    if (numberOfLeadingZeros != 1) {
      [phoneNumber setNumberOfLeadingZerosWithInt:numberOfLeadingZeros];
    }
  }
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_parseHelperWithJavaLangCharSequence_withNSString_withBoolean_withBoolean_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, id<JavaLangCharSequence> numberToParse, NSString *defaultRegion, jboolean keepRawInput, jboolean checkRegion, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber) {
  if (numberToParse == nil) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, NOT_A_NUMBER), @"The phone number supplied was null.");
  }
  else if ([numberToParse java_length] > ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_INPUT_STRING_LENGTH) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, TOO_LONG), @"The string supplied was too long to parse.");
  }
  JavaLangStringBuilder *nationalNumber = create_JavaLangStringBuilder_init();
  NSString *numberBeingParsed = [numberToParse description];
  ComGoogleI18nPhonenumbersPhoneNumberUtil_buildNationalNumberForParsingWithNSString_withJavaLangStringBuilder_(self, numberBeingParsed, nationalNumber);
  if (!ComGoogleI18nPhonenumbersPhoneNumberUtil_isViablePhoneNumberWithJavaLangCharSequence_(nationalNumber)) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, NOT_A_NUMBER), @"The string supplied did not seem to be a phone number.");
  }
  if (checkRegion && !ComGoogleI18nPhonenumbersPhoneNumberUtil_checkRegionForParsingWithJavaLangCharSequence_withNSString_(self, nationalNumber, defaultRegion)) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE), @"Missing or invalid default region.");
  }
  if (keepRawInput) {
    [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setRawInputWithNSString:numberBeingParsed];
  }
  NSString *extension = [self maybeStripExtensionWithJavaLangStringBuilder:nationalNumber];
  if ([((NSString *) nil_chk(extension)) java_length] > 0) {
    [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setExtensionWithNSString:extension];
  }
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *regionMetadata = [self getMetadataForRegionWithNSString:defaultRegion];
  JavaLangStringBuilder *normalizedNationalNumber = create_JavaLangStringBuilder_init();
  jint countryCode = 0;
  @try {
    countryCode = [self maybeExtractCountryCodeWithJavaLangCharSequence:nationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:regionMetadata withJavaLangStringBuilder:normalizedNationalNumber withBoolean:keepRawInput withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:phoneNumber];
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
    JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS_PATTERN)) matcherWithJavaLangCharSequence:nationalNumber];
    if ([e getErrorType] == JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE) && [((JavaUtilRegexMatcher *) nil_chk(matcher)) lookingAt]) {
      countryCode = [self maybeExtractCountryCodeWithJavaLangCharSequence:[nationalNumber substringWithInt:[((JavaUtilRegexMatcher *) nil_chk(matcher)) end]] withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:regionMetadata withJavaLangStringBuilder:normalizedNationalNumber withBoolean:keepRawInput withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:phoneNumber];
      if (countryCode == 0) {
        @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, INVALID_COUNTRY_CODE), @"Could not interpret numbers after plus-sign.");
      }
    }
    else {
      @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_([e getErrorType], [e getMessage]);
    }
  }
  if (countryCode != 0) {
    NSString *phoneNumberRegion = [self getRegionCodeForCountryCodeWithInt:countryCode];
    if (![((NSString *) nil_chk(phoneNumberRegion)) isEqual:defaultRegion]) {
      regionMetadata = ComGoogleI18nPhonenumbersPhoneNumberUtil_getMetadataForRegionOrCallingCodeWithInt_withNSString_(self, countryCode, phoneNumberRegion);
    }
  }
  else {
    [normalizedNationalNumber appendWithJavaLangCharSequence:ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeWithJavaLangStringBuilder_(nationalNumber)];
    if (defaultRegion != nil) {
      countryCode = [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(regionMetadata)) getCountryCode];
      [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setCountryCodeWithInt:countryCode];
    }
    else if (keepRawInput) {
      [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) clearCountryCodeSource];
    }
  }
  if ([normalizedNationalNumber java_length] < ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, TOO_SHORT_NSN), @"The string supplied is too short to be a phone number.");
  }
  if (regionMetadata != nil) {
    JavaLangStringBuilder *carrierCode = create_JavaLangStringBuilder_init();
    JavaLangStringBuilder *potentialNationalNumber = create_JavaLangStringBuilder_initWithJavaLangCharSequence_(normalizedNationalNumber);
    [self maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:potentialNationalNumber withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:regionMetadata withJavaLangStringBuilder:carrierCode];
    ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *validationResult = ComGoogleI18nPhonenumbersPhoneNumberUtil_testNumberLengthWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_(self, potentialNationalNumber, regionMetadata);
    if (validationResult != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_SHORT) && validationResult != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE_LOCAL_ONLY) && validationResult != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, INVALID_LENGTH)) {
      normalizedNationalNumber = potentialNationalNumber;
      if (keepRawInput && [carrierCode java_length] > 0) {
        [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setPreferredDomesticCarrierCodeWithNSString:[carrierCode description]];
      }
    }
  }
  jint lengthOfNationalNumber = [normalizedNationalNumber java_length];
  if (lengthOfNationalNumber < ComGoogleI18nPhonenumbersPhoneNumberUtil_MIN_LENGTH_FOR_NSN) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, TOO_SHORT_NSN), @"The string supplied is too short to be a phone number.");
  }
  if (lengthOfNationalNumber > ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_FOR_NSN) {
    @throw create_ComGoogleI18nPhonenumbersNumberParseException_initWithComGoogleI18nPhonenumbersNumberParseException_ErrorType_withNSString_(JreLoadEnum(ComGoogleI18nPhonenumbersNumberParseException_ErrorType, TOO_LONG), @"The string supplied is too long to be a phone number.");
  }
  ComGoogleI18nPhonenumbersPhoneNumberUtil_setItalianLeadingZerosForPhoneNumberWithJavaLangCharSequence_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(normalizedNationalNumber, phoneNumber);
  [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumber)) setNationalNumberWithLong:JavaLangLong_parseLongWithNSString_([normalizedNationalNumber description])];
}

void ComGoogleI18nPhonenumbersPhoneNumberUtil_buildNationalNumberForParsingWithNSString_withJavaLangStringBuilder_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, NSString *numberToParse, JavaLangStringBuilder *nationalNumber) {
  jint indexOfPhoneContext = [((NSString *) nil_chk(numberToParse)) java_indexOfString:ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PHONE_CONTEXT];
  if (indexOfPhoneContext >= 0) {
    jint phoneContextStart = indexOfPhoneContext + [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PHONE_CONTEXT)) java_length];
    if (phoneContextStart < ([numberToParse java_length] - 1) && [numberToParse charAtWithInt:phoneContextStart] == ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN) {
      jint phoneContextEnd = [numberToParse java_indexOf:';' fromIndex:phoneContextStart];
      if (phoneContextEnd > 0) {
        [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithNSString:[numberToParse java_substring:phoneContextStart endIndex:phoneContextEnd]];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithNSString:[numberToParse java_substring:phoneContextStart]];
      }
    }
    jint indexOfRfc3966Prefix = [numberToParse java_indexOfString:ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PREFIX];
    jint indexOfNationalNumber = (indexOfRfc3966Prefix >= 0) ? indexOfRfc3966Prefix + [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_PREFIX)) java_length] : 0;
    [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithNSString:[numberToParse java_substring:indexOfNationalNumber endIndex:indexOfPhoneContext]];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(nationalNumber)) appendWithJavaLangCharSequence:ComGoogleI18nPhonenumbersPhoneNumberUtil_extractPossibleNumberWithJavaLangCharSequence_(numberToParse)];
  }
  jint indexOfIsdn = [nationalNumber indexOfWithNSString:ComGoogleI18nPhonenumbersPhoneNumberUtil_RFC3966_ISDN_SUBADDRESS];
  if (indexOfIsdn > 0) {
    [nationalNumber delete__WithInt:indexOfIsdn withInt:[nationalNumber java_length]];
  }
}

ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *ComGoogleI18nPhonenumbersPhoneNumberUtil_copyCoreFieldsOnlyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumberIn) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_initialize();
  ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *phoneNumber = create_ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_init();
  [phoneNumber setCountryCodeWithInt:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(phoneNumberIn)) getCountryCode]];
  [phoneNumber setNationalNumberWithLong:[phoneNumberIn getNationalNumber]];
  if ([((NSString *) nil_chk([phoneNumberIn getExtension])) java_length] > 0) {
    [phoneNumber setExtensionWithNSString:[phoneNumberIn getExtension]];
  }
  if ([phoneNumberIn isItalianLeadingZero]) {
    [phoneNumber setItalianLeadingZeroWithBoolean:true];
    [phoneNumber setNumberOfLeadingZerosWithInt:[phoneNumberIn getNumberOfLeadingZeros]];
  }
  return phoneNumber;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberUtil_isNationalNumberSuffixOfTheOtherWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(ComGoogleI18nPhonenumbersPhoneNumberUtil *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *firstNumber, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *secondNumber) {
  NSString *firstNumberNationalNumber = NSString_java_valueOfLong_([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(firstNumber)) getNationalNumber]);
  NSString *secondNumberNationalNumber = NSString_java_valueOfLong_([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(secondNumber)) getNationalNumber]);
  return [((NSString *) nil_chk(firstNumberNationalNumber)) java_hasSuffix:secondNumberNationalNumber] || [((NSString *) nil_chk(secondNumberNationalNumber)) java_hasSuffix:firstNumberNationalNumber];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat)

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values_[4];

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "E164", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "INTERNATIONAL", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "NATIONAL", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "RFC3966", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, E164), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, INTERNATIONAL), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, NATIONAL), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, RFC3966), "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$PhoneNumberFormat;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat = { "PhoneNumberFormat", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initWithNSString_withInt_(e, JreEnumConstantName(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values_ count:4 type:ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initialize();
  for (int i = 0; i < 4; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *e = ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType)

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values_[12];

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIXED_LINE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "MOBILE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "FIXED_LINE_OR_MOBILE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "TOLL_FREE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "PREMIUM_RATE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "SHARED_COST", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "VOIP", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "PERSONAL_NUMBER", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "PAGER", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "UAN", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "VOICEMAIL", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "UNKNOWN", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, TOLL_FREE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PREMIUM_RATE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, SHARED_COST), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, VOIP), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PERSONAL_NUMBER), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, PAGER), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UAN), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, VOICEMAIL), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN), "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$PhoneNumberType;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType = { "PhoneNumberType", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x4019, 2, 12, 14, -1, -1, 15, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 12 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 12; i++) {
      (ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initWithNSString_withInt_(e, JreEnumConstantName(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values_ count:12 type:ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initialize();
  for (int i = 0; i < 12; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *e = ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_initialize();
  if (ordinal >= 12) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType)

ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values_[5];

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_A_NUMBER", "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "NO_MATCH", "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SHORT_NSN_MATCH", "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "NSN_MATCH", "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "EXACT_MATCH", "LComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NOT_A_NUMBER), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NO_MATCH), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, SHORT_NSN_MATCH), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NSN_MATCH), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, EXACT_MATCH), "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$MatchType;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType = { "MatchType", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x4019, 2, 5, 7, -1, -1, 8, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 5; i++) {
      (ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initWithNSString_withInt_(e, JreEnumConstantName(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values_ count:5 type:ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initialize();
  for (int i = 0; i < 5; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *e = ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType *ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult)

ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values_[6];

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IS_POSSIBLE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "IS_POSSIBLE_LOCAL_ONLY", "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "INVALID_COUNTRY_CODE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "TOO_SHORT", "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "INVALID_LENGTH", "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "TOO_LONG", "LComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, IS_POSSIBLE_LOCAL_ONLY), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, INVALID_COUNTRY_CODE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_SHORT), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, INVALID_LENGTH), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult, TOO_LONG), "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$ValidationResult;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult = { "ValidationResult", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x4019, 2, 6, 8, -1, -1, 9, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 6 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 6; i++) {
      (ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initWithNSString_withInt_(e, JreEnumConstantName(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values_ count:6 type:ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initialize();
  for (int i = 0; i < 6; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *e = ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult *ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil_ValidationResult)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency)

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values_[4];

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x400, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangCharSequence:withComGoogleI18nPhonenumbersPhoneNumberUtil:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "POSSIBLE", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "VALID", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "STRICT_GROUPING", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "EXACT_GROUPING", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "verify", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaLangCharSequence;LComGoogleI18nPhonenumbersPhoneNumberUtil;", "valueOf", "LNSString;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, POSSIBLE), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, VALID), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, STRICT_GROUPING), &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, EXACT_GROUPING), "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberUtil$Leniency;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency = { "Leniency", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x4409, 3, 4, 8, -1, -1, 9, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency class]) {
    size_t allocSize = 0;
    size_t objSize_POSSIBLE = class_getInstanceSize([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1 class]);
    allocSize += objSize_POSSIBLE;
    size_t objSize_VALID = class_getInstanceSize([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2 class]);
    allocSize += objSize_VALID;
    size_t objSize_STRICT_GROUPING = class_getInstanceSize([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3 class]);
    allocSize += objSize_STRICT_GROUPING;
    size_t objSize_EXACT_GROUPING = class_getInstanceSize([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4 class]);
    allocSize += objSize_EXACT_GROUPING;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, POSSIBLE) = e = objc_constructInstance([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1 class], (void *)ptr), ptr += objSize_POSSIBLE);
    ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1_initWithNSString_withInt_(e, @"POSSIBLE", 0);
    (JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, VALID) = e = objc_constructInstance([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2 class], (void *)ptr), ptr += objSize_VALID);
    ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2_initWithNSString_withInt_(e, @"VALID", 1);
    (JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, STRICT_GROUPING) = e = objc_constructInstance([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3 class], (void *)ptr), ptr += objSize_STRICT_GROUPING);
    ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_initWithNSString_withInt_(e, @"STRICT_GROUPING", 2);
    (JreEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, EXACT_GROUPING) = e = objc_constructInstance([ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4 class], (void *)ptr), ptr += objSize_EXACT_GROUPING);
    ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_initWithNSString_withInt_(e, @"EXACT_GROUPING", 3);
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values() {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values_ count:4 type:ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initialize();
  for (int i = 0; i < 4; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *e = ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency)

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  return [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isPossibleNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangCharSequence:withComGoogleI18nPhonenumbersPhoneNumberUtil:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verify", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaLangCharSequence;LComGoogleI18nPhonenumbersPhoneNumberUtil;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_1 *self, NSString *__name, jint __ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  if (![((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number] || !ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, [((id<JavaLangCharSequence>) nil_chk(candidate)) description], util)) {
    return false;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, util);
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangCharSequence:withComGoogleI18nPhonenumbersPhoneNumberUtil:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verify", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaLangCharSequence;LComGoogleI18nPhonenumbersPhoneNumberUtil;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_2 *self, NSString *__name, jint __ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  NSString *candidateString = [((id<JavaLangCharSequence>) nil_chk(candidate)) description];
  if (![((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number] || !ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, candidateString, util) || ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_(number, candidateString) || !ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, util)) {
    return false;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangCharSequence_withComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker_(number, candidate, util, create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1_init());
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangCharSequence:withComGoogleI18nPhonenumbersPhoneNumberUtil:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verify", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaLangCharSequence;LComGoogleI18nPhonenumbersPhoneNumberUtil;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3 *self, NSString *__name, jint __ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
               withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                          withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                  withNSStringArray:(IOSObjectArray *)expectedNumberGroups {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(util, number, normalizedCandidate, expectedNumberGroups);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangStringBuilder:withNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkGroups", "LComGoogleI18nPhonenumbersPhoneNumberUtil;LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaLangStringBuilder;[LNSString;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3;", "verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangCharSequence:withComGoogleI18nPhonenumbersPhoneNumberUtil:" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1_init(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1 *self) {
  NSObject_init(self);
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1, init)
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_3_1, init)
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4

- (jboolean)verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                          withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  NSString *candidateString = [((id<JavaLangCharSequence>) nil_chk(candidate)) description];
  if (![((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number] || !ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, candidateString, util) || ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_(number, candidateString) || !ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, util)) {
    return false;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangCharSequence_withComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker_(number, candidate, util, create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1_init());
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangCharSequence:withComGoogleI18nPhonenumbersPhoneNumberUtil:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verify", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaLangCharSequence;LComGoogleI18nPhonenumbersPhoneNumberUtil;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4 *self, NSString *__name, jint __ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
               withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                          withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                  withNSStringArray:(IOSObjectArray *)expectedNumberGroups {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(util, number, normalizedCandidate, expectedNumberGroups);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangStringBuilder:withNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkGroups", "LComGoogleI18nPhonenumbersPhoneNumberUtil;LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaLangStringBuilder;[LNSString;", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4;", "verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangCharSequence:withComGoogleI18nPhonenumbersPhoneNumberUtil:" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, -1, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1_init(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1 *self) {
  NSObject_init(self);
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1, init)
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_4_1, init)
}

@implementation ComGoogleI18nPhonenumbersPhoneNumberUtil_1

- (instancetype)initWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)outer$
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)capture$0
                                                    withNSString:(NSString *)capture$1
           withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)capture$2
                                                        withLong:(jlong)capture$3 {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_1_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(self, outer$, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return create_ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(this$0_, val$text_, val$defaultRegion_, val$leniency_, val$maxTries_);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$text_);
  RELEASE_(val$defaultRegion_);
  RELEASE_(val$leniency_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleI18nPhonenumbersPhoneNumberUtil:withJavaLangCharSequence:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:withLong:);
  methods[1].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleI18nPhonenumbersPhoneNumberUtil;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$text_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$defaultRegion_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$leniency_", "LComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$maxTries_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lcom/google/i18n/phonenumbers/PhoneNumberMatch;>;", "LComGoogleI18nPhonenumbersPhoneNumberUtil;", "findNumbersWithJavaLangCharSequence:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:withLong:", "Ljava/lang/Object;Ljava/lang/Iterable<Lcom/google/i18n/phonenumbers/PhoneNumberMatch;>;" };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberUtil_1 = { "", "com.google.i18n.phonenumbers", ptrTable, methods, fields, 7, 0x8018, 2, 5, 1, -1, 2, 3, -1 };
  return &_ComGoogleI18nPhonenumbersPhoneNumberUtil_1;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberUtil_1_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil_1 *self, ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$text_, capture$0);
  JreStrongAssign(&self->val$defaultRegion_, capture$1);
  JreStrongAssign(&self->val$leniency_, capture$2);
  self->val$maxTries_ = capture$3;
  NSObject_init(self);
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_1 *new_ComGoogleI18nPhonenumbersPhoneNumberUtil_1_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3) {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_1, initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_, outer$, capture$0, capture$1, capture$2, capture$3)
}

ComGoogleI18nPhonenumbersPhoneNumberUtil_1 *create_ComGoogleI18nPhonenumbersPhoneNumberUtil_1_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *outer$, id<JavaLangCharSequence> capture$0, NSString *capture$1, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *capture$2, jlong capture$3) {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersPhoneNumberUtil_1, initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_, outer$, capture$0, capture$1, capture$2, capture$3)
}
