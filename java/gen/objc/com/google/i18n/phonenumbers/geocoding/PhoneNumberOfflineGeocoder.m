//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/libphonenumber/java/geocoder/src/main/java/com/google/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/i18n/phonenumbers/NumberParseException.h"
#include "com/google/i18n/phonenumbers/PhoneNumberUtil.h"
#include "com/google/i18n/phonenumbers/Phonenumber.h"
#include "com/google/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder.h"
#include "com/google/i18n/phonenumbers/prefixmapper/PrefixFileReader.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder () {
 @public
  ComGoogleI18nPhonenumbersPrefixmapperPrefixFileReader *prefixFileReader_;
  ComGoogleI18nPhonenumbersPhoneNumberUtil *phoneUtil_;
}

/*!
 @brief Returns the customary display name in the given language for the given territory the phone
 number is from.
 If it could be from many territories, nothing is returned.
 */
- (NSString *)getCountryNameForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                       withJavaUtilLocale:(JavaUtilLocale *)language;

/*!
 @brief Returns the customary display name in the given language for the given region.
 */
- (NSString *)getRegionDisplayNameWithNSString:(NSString *)regionCode
                            withJavaUtilLocale:(JavaUtilLocale *)language;

/*!
 @brief A similar method is implemented as PhoneNumberUtil.isNumberGeographical, which performs a
 stricter check, as it determines if a number has a geographical association.
 Also, if new
 phone number types were added, we should check if this other method should be updated too.
 */
- (jboolean)canBeGeocodedWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)numberType;

@end

J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder, prefixFileReader_, ComGoogleI18nPhonenumbersPrefixmapperPrefixFileReader *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder, phoneUtil_, ComGoogleI18nPhonenumbersPhoneNumberUtil *)

inline ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_get_instance();
inline ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_set_instance(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *value);
static ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_instance;
J2OBJC_STATIC_FIELD_OBJ(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder, instance, ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *)

inline NSString *ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_get_MAPPING_DATA_DIRECTORY();
static NSString *ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_MAPPING_DATA_DIRECTORY = @"/com/google/i18n/phonenumbers/geocoding/data/";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder, MAPPING_DATA_DIRECTORY, NSString *)

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getCountryNameForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilLocale_(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, JavaUtilLocale *language);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getRegionDisplayNameWithNSString_withJavaUtilLocale_(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *self, NSString *regionCode, JavaUtilLocale *language);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_canBeGeocodedWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *self, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *numberType);

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder)

@implementation ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder

- (instancetype)initWithNSString:(NSString *)phonePrefixDataDirectory {
  ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_initWithNSString_(self, phonePrefixDataDirectory);
  return self;
}

+ (ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *)getInstance {
  return ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getInstance();
}

- (NSString *)getCountryNameForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                       withJavaUtilLocale:(JavaUtilLocale *)language {
  return ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getCountryNameForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilLocale_(self, number, language);
}

- (NSString *)getRegionDisplayNameWithNSString:(NSString *)regionCode
                            withJavaUtilLocale:(JavaUtilLocale *)language {
  return ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getRegionDisplayNameWithNSString_withJavaUtilLocale_(self, regionCode, language);
}

- (NSString *)getDescriptionForValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                            withJavaUtilLocale:(JavaUtilLocale *)languageCode {
  NSString *langStr = [((JavaUtilLocale *) nil_chk(languageCode)) getLanguage];
  NSString *scriptStr = @"";
  NSString *regionStr = [languageCode getCountry];
  NSString *areaDescription;
  NSString *mobileToken = ComGoogleI18nPhonenumbersPhoneNumberUtil_getCountryMobileTokenWithInt_([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode]);
  NSString *nationalNumber = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(phoneUtil_)) getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (![((NSString *) nil_chk(mobileToken)) isEqual:@""] && [((NSString *) nil_chk(nationalNumber)) hasPrefix:mobileToken]) {
    nationalNumber = [((NSString *) nil_chk(nationalNumber)) substring:((jint) [mobileToken length])];
    NSString *region = [phoneUtil_ getRegionCodeForCountryCodeWithInt:[number getCountryCode]];
    ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *copiedNumber;
    @try {
      copiedNumber = [phoneUtil_ parseWithNSString:nationalNumber withNSString:region];
    }
    @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
      copiedNumber = number;
    }
    areaDescription = [((ComGoogleI18nPhonenumbersPrefixmapperPrefixFileReader *) nil_chk(prefixFileReader_)) getDescriptionForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:copiedNumber withNSString:langStr withNSString:scriptStr withNSString:regionStr];
  }
  else {
    areaDescription = [((ComGoogleI18nPhonenumbersPrefixmapperPrefixFileReader *) nil_chk(prefixFileReader_)) getDescriptionForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:langStr withNSString:scriptStr withNSString:regionStr];
  }
  return (((jint) [((NSString *) nil_chk(areaDescription)) length]) > 0) ? areaDescription : ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getCountryNameForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilLocale_(self, number, languageCode);
}

- (NSString *)getDescriptionForValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                            withJavaUtilLocale:(JavaUtilLocale *)languageCode
                                                                                  withNSString:(NSString *)userRegion {
  NSString *regionCode = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(phoneUtil_)) getRegionCodeForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if ([((NSString *) nil_chk(userRegion)) isEqual:regionCode]) {
    return [self getDescriptionForValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaUtilLocale:languageCode];
  }
  return ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getRegionDisplayNameWithNSString_withJavaUtilLocale_(self, regionCode, languageCode);
}

- (NSString *)getDescriptionForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                       withJavaUtilLocale:(JavaUtilLocale *)languageCode {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *numberType = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(phoneUtil_)) getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN)) {
    return @"";
  }
  else if (!ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_canBeGeocodedWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(self, numberType)) {
    return ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getCountryNameForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilLocale_(self, number, languageCode);
  }
  return [self getDescriptionForValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaUtilLocale:languageCode];
}

- (NSString *)getDescriptionForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                       withJavaUtilLocale:(JavaUtilLocale *)languageCode
                                                                             withNSString:(NSString *)userRegion {
  ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *numberType = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(phoneUtil_)) getNumberTypeWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  if (numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, UNKNOWN)) {
    return @"";
  }
  else if (!ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_canBeGeocodedWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(self, numberType)) {
    return ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getCountryNameForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilLocale_(self, number, languageCode);
  }
  return [self getDescriptionForValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaUtilLocale:languageCode withNSString:userRegion];
}

- (jboolean)canBeGeocodedWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *)numberType {
  return ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_canBeGeocodedWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(self, numberType);
}

- (void)dealloc {
  RELEASE_(prefixFileReader_);
  RELEASE_(phoneUtil_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder;", 0x29, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(getCountryNameForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaUtilLocale:);
  methods[3].selector = @selector(getRegionDisplayNameWithNSString:withJavaUtilLocale:);
  methods[4].selector = @selector(getDescriptionForValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaUtilLocale:);
  methods[5].selector = @selector(getDescriptionForValidNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaUtilLocale:withNSString:);
  methods[6].selector = @selector(getDescriptionForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaUtilLocale:);
  methods[7].selector = @selector(getDescriptionForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaUtilLocale:withNSString:);
  methods[8].selector = @selector(canBeGeocodedWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "instance", "LComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder;", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
    { "MAPPING_DATA_DIRECTORY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "prefixFileReader_", "LComGoogleI18nPhonenumbersPrefixmapperPrefixFileReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "phoneUtil_", "LComGoogleI18nPhonenumbersPhoneNumberUtil;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "getCountryNameForNumber", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaUtilLocale;", "getRegionDisplayName", "LNSString;LJavaUtilLocale;", "getDescriptionForValidNumber", "LComGoogleI18nPhonenumbersPhonenumber_PhoneNumber;LJavaUtilLocale;LNSString;", "getDescriptionForNumber", "canBeGeocoded", "LComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType;", &ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_instance, &ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_MAPPING_DATA_DIRECTORY };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder = { "PhoneNumberOfflineGeocoder", "com.google.i18n.phonenumbers.geocoding", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, -1 };
  return &_ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder class]) {
    JreStrongAssign(&ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_instance, nil);
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder)
  }
}

@end

void ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_initWithNSString_(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *self, NSString *phonePrefixDataDirectory) {
  NSObject_init(self);
  JreStrongAssign(&self->prefixFileReader_, nil);
  JreStrongAssign(&self->phoneUtil_, ComGoogleI18nPhonenumbersPhoneNumberUtil_getInstance());
  JreStrongAssignAndConsume(&self->prefixFileReader_, new_ComGoogleI18nPhonenumbersPrefixmapperPrefixFileReader_initWithNSString_(phonePrefixDataDirectory));
}

ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *new_ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_initWithNSString_(NSString *phonePrefixDataDirectory) {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder, initWithNSString_, phonePrefixDataDirectory)
}

ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *create_ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_initWithNSString_(NSString *phonePrefixDataDirectory) {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder, initWithNSString_, phonePrefixDataDirectory)
}

ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getInstance() {
  ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_initialize();
  @synchronized(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_class_()) {
    if (ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_instance == nil) {
      JreStrongAssignAndConsume(&ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_instance, new_ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_initWithNSString_(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_MAPPING_DATA_DIRECTORY));
    }
    return ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_instance;
  }
}

NSString *ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getCountryNameForNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaUtilLocale_(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *self, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, JavaUtilLocale *language) {
  id<JavaUtilList> regionCodes = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(self->phoneUtil_)) getRegionCodesForCountryCodeWithInt:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode]];
  if ([((id<JavaUtilList>) nil_chk(regionCodes)) size] == 1) {
    return ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getRegionDisplayNameWithNSString_withJavaUtilLocale_(self, [regionCodes getWithInt:0], language);
  }
  else {
    NSString *regionWhereNumberIsValid = @"ZZ";
    for (NSString * __strong regionCode in regionCodes) {
      if ([self->phoneUtil_ isValidNumberForRegionWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:regionCode]) {
        if (![((NSString *) nil_chk(regionWhereNumberIsValid)) isEqual:@"ZZ"]) {
          return @"";
        }
        regionWhereNumberIsValid = regionCode;
      }
    }
    return ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getRegionDisplayNameWithNSString_withJavaUtilLocale_(self, regionWhereNumberIsValid, language);
  }
}

NSString *ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_getRegionDisplayNameWithNSString_withJavaUtilLocale_(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *self, NSString *regionCode, JavaUtilLocale *language) {
  return (regionCode == nil || [regionCode isEqual:@"ZZ"] || [regionCode isEqual:ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY]) ? @"" : [create_JavaUtilLocale_initWithNSString_withNSString_(@"", regionCode) getDisplayCountryWithJavaUtilLocale:language];
}

jboolean ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder_canBeGeocodedWithComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType_(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder *self, ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType *numberType) {
  return (numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE) || numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, MOBILE) || numberType == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberType, FIXED_LINE_OR_MOBILE));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersGeocodingPhoneNumberOfflineGeocoder)
