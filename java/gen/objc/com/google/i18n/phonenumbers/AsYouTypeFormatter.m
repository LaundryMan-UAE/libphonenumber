//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/libphonenumber/java/libphonenumber/src/main/java/com/google/i18n/phonenumbers/AsYouTypeFormatter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/i18n/phonenumbers/AsYouTypeFormatter.h"
#include "com/google/i18n/phonenumbers/PhoneNumberUtil.h"
#include "com/google/i18n/phonenumbers/RegexCache.h"
#include "com/google/i18n/phonenumbers/nano/Phonemetadata.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#define ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER ' '
#define ComGoogleI18nPhonenumbersAsYouTypeFormatter_MIN_LEADING_DIGITS_LENGTH 3

@interface ComGoogleI18nPhonenumbersAsYouTypeFormatter () {
 @public
  NSString *currentOutput_;
  JavaLangStringBuilder *formattingTemplate_;
  NSString *currentFormattingPattern_;
  JavaLangStringBuilder *accruedInput_;
  JavaLangStringBuilder *accruedInputWithoutFormatting_;
  jboolean ableToFormat_;
  jboolean inputHasFormatting_;
  jboolean isCompleteNumber_;
  jboolean isExpectingCountryCallingCode_;
  ComGoogleI18nPhonenumbersPhoneNumberUtil *phoneUtil_;
  NSString *defaultCountry_;
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *defaultMetadata_;
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *currentMetadata_;
  jint lastMatchPosition_;
  jint originalPosition_;
  jint positionToRemember_;
  JavaLangStringBuilder *prefixBeforeNationalNumber_;
  jboolean shouldAddSpaceAfterNationalPrefix_;
  NSString *extractedNationalPrefix_;
  JavaLangStringBuilder *nationalNumber_;
  id<JavaUtilList> possibleFormats_;
  ComGoogleI18nPhonenumbersRegexCache *regexCache_;
}

- (ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)getMetadataForRegionWithNSString:(NSString *)regionCode;

- (jboolean)maybeCreateNewTemplate;

- (void)getAvailableFormatsWithNSString:(NSString *)leadingDigits;

- (jboolean)isFormatEligibleWithNSString:(NSString *)format;

- (void)narrowDownPossibleFormatsWithNSString:(NSString *)leadingDigits;

- (jboolean)createFormattingTemplateWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)format;

- (NSString *)getFormattingTemplateWithNSString:(NSString *)numberPattern
                                   withNSString:(NSString *)numberFormat;

- (NSString *)inputDigitWithOptionToRememberPositionWithChar:(jchar)nextChar
                                                 withBoolean:(jboolean)rememberPosition;

- (NSString *)attemptToChoosePatternWithPrefixExtracted;

- (jboolean)ableToExtractLongerNdd;

- (jboolean)isDigitOrLeadingPlusSignWithChar:(jchar)nextChar;

/**
 @brief Combines the national number with any prefix (IDD/+ and country code or national prefix) that was collected.
 A space will be inserted between them if the current formatting template indicates this to be suitable.
 */
- (NSString *)appendNationalNumberWithNSString:(NSString *)nationalNumber;

/**
 @brief Attempts to set the formatting template and returns a string which contains the formatted version of the digits entered so far.
 */
- (NSString *)attemptToChooseFormattingPattern;

/**
 @brief Invokes inputDigitHelper on each digit of the national number accrued, and returns a formatted string in the end.
 */
- (NSString *)inputAccruedNationalNumber;

/**
 @brief Returns true if the current country is a NANPA country and the national number begins with the national prefix.
 */
- (jboolean)isNanpaNumberWithNationalPrefix;

- (NSString *)removeNationalPrefixFromNationalNumber;

/**
 @brief Extracts IDD and plus sign to prefixBeforeNationalNumber when they are available, and places the remaining input into nationalNumber.
 @return true when accruedInputWithoutFormatting begins with the plus sign or valid IDD for defaultCountry.
 */
- (jboolean)attemptToExtractIdd;

/**
 @brief Extracts the country calling code from the beginning of nationalNumber to prefixBeforeNationalNumber when they are available, and places the remaining input into nationalNumber.
 @return true when a valid country calling code can be found.
 */
- (jboolean)attemptToExtractCountryCallingCode;

- (jchar)normalizeAndAccrueDigitsAndPlusSignWithChar:(jchar)nextChar
                                         withBoolean:(jboolean)rememberPosition;

- (NSString *)inputDigitHelperWithChar:(jchar)nextChar;

@end

J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, currentOutput_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, formattingTemplate_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, currentFormattingPattern_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, accruedInput_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, accruedInputWithoutFormatting_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, phoneUtil_, ComGoogleI18nPhonenumbersPhoneNumberUtil *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, defaultCountry_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, defaultMetadata_, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, currentMetadata_, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, prefixBeforeNationalNumber_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, extractedNationalPrefix_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, nationalNumber_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, possibleFormats_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, regexCache_, ComGoogleI18nPhonenumbersRegexCache *)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, SEPARATOR_BEFORE_NATIONAL_NUMBER, jchar)

static ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersAsYouTypeFormatter_EMPTY_METADATA_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, EMPTY_METADATA_, ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_CHARACTER_CLASS_PATTERN_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, CHARACTER_CLASS_PATTERN_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_STANDALONE_DIGIT_PATTERN_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, STANDALONE_DIGIT_PATTERN_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_ELIGIBLE_FORMAT_PATTERN_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, ELIGIBLE_FORMAT_PATTERN_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_NATIONAL_PREFIX_SEPARATORS_PATTERN_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, NATIONAL_PREFIX_SEPARATORS_PATTERN_, JavaUtilRegexPattern *)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, MIN_LEADING_DIGITS_LENGTH, jint)

static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PLACEHOLDER_ = @"\u2008";
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, DIGIT_PLACEHOLDER_, NSString *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PATTERN_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, DIGIT_PATTERN_, JavaUtilRegexPattern *)

__attribute__((unused)) static ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *regionCode);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_maybeCreateNewTemplate(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersAsYouTypeFormatter_getAvailableFormatsWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *leadingDigits);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isFormatEligibleWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *format);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersAsYouTypeFormatter_narrowDownPossibleFormatsWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *leadingDigits);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_createFormattingTemplateWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *format);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_getFormattingTemplateWithNSString_withNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *numberPattern, NSString *numberFormat);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitWithOptionToRememberPositionWithChar_withBoolean_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar, jboolean rememberPosition);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChoosePatternWithPrefixExtracted(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_ableToExtractLongerNdd(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isDigitOrLeadingPlusSignWithChar_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *nationalNumber);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputAccruedNationalNumber(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isNanpaNumberWithNationalPrefix(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_removeNationalPrefixFromNationalNumber(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractIdd(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractCountryCallingCode(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jchar ComGoogleI18nPhonenumbersAsYouTypeFormatter_normalizeAndAccrueDigitsAndPlusSignWithChar_withBoolean_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar, jboolean rememberPosition);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitHelperWithChar_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar);

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersAsYouTypeFormatter)

@implementation ComGoogleI18nPhonenumbersAsYouTypeFormatter

- (instancetype)initWithNSString:(NSString *)regionCode {
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_initWithNSString_(self, regionCode);
  return self;
}

- (ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *)getMetadataForRegionWithNSString:(NSString *)regionCode {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(self, regionCode);
}

- (jboolean)maybeCreateNewTemplate {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_maybeCreateNewTemplate(self);
}

- (void)getAvailableFormatsWithNSString:(NSString *)leadingDigits {
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_getAvailableFormatsWithNSString_(self, leadingDigits);
}

- (jboolean)isFormatEligibleWithNSString:(NSString *)format {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_isFormatEligibleWithNSString_(self, format);
}

- (void)narrowDownPossibleFormatsWithNSString:(NSString *)leadingDigits {
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_narrowDownPossibleFormatsWithNSString_(self, leadingDigits);
}

- (jboolean)createFormattingTemplateWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)format {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_createFormattingTemplateWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(self, format);
}

- (NSString *)getFormattingTemplateWithNSString:(NSString *)numberPattern
                                   withNSString:(NSString *)numberFormat {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_getFormattingTemplateWithNSString_withNSString_(self, numberPattern, numberFormat);
}

- (void)clear {
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentOutput_(self, @"");
  [((JavaLangStringBuilder *) nil_chk(accruedInput_)) setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(accruedInputWithoutFormatting_)) setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(formattingTemplate_)) setLengthWithInt:0];
  lastMatchPosition_ = 0;
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentFormattingPattern_(self, @"");
  [((JavaLangStringBuilder *) nil_chk(prefixBeforeNationalNumber_)) setLengthWithInt:0];
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_extractedNationalPrefix_(self, @"");
  [((JavaLangStringBuilder *) nil_chk(nationalNumber_)) setLengthWithInt:0];
  ableToFormat_ = YES;
  inputHasFormatting_ = NO;
  positionToRemember_ = 0;
  originalPosition_ = 0;
  isCompleteNumber_ = NO;
  isExpectingCountryCallingCode_ = NO;
  [((id<JavaUtilList>) nil_chk(possibleFormats_)) clear];
  shouldAddSpaceAfterNationalPrefix_ = NO;
  if (![((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(currentMetadata_)) isEqual:defaultMetadata_]) {
    ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentMetadata_(self, ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(self, defaultCountry_));
  }
}

- (NSString *)inputDigitWithChar:(jchar)nextChar {
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentOutput_(self, ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitWithOptionToRememberPositionWithChar_withBoolean_(self, nextChar, NO));
  return currentOutput_;
}

- (NSString *)inputDigitAndRememberPositionWithChar:(jchar)nextChar {
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentOutput_(self, ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitWithOptionToRememberPositionWithChar_withBoolean_(self, nextChar, YES));
  return currentOutput_;
}

- (NSString *)inputDigitWithOptionToRememberPositionWithChar:(jchar)nextChar
                                                 withBoolean:(jboolean)rememberPosition {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitWithOptionToRememberPositionWithChar_withBoolean_(self, nextChar, rememberPosition);
}

- (NSString *)attemptToChoosePatternWithPrefixExtracted {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChoosePatternWithPrefixExtracted(self);
}

- (NSString *)getExtractedNationalPrefix {
  return extractedNationalPrefix_;
}

- (jboolean)ableToExtractLongerNdd {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_ableToExtractLongerNdd(self);
}

- (jboolean)isDigitOrLeadingPlusSignWithChar:(jchar)nextChar {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_isDigitOrLeadingPlusSignWithChar_(self, nextChar);
}

- (NSString *)attemptToFormatAccruedDigits {
  for (ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat * __strong numberFormat in nil_chk(possibleFormats_)) {
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(numberFormat))->pattern_])) matcherWithJavaLangCharSequence:nationalNumber_];
    if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
      shouldAddSpaceAfterNationalPrefix_ = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_NATIONAL_PREFIX_SEPARATORS_PATTERN_)) matcherWithJavaLangCharSequence:numberFormat->nationalPrefixFormattingRule_])) find];
      NSString *formattedNumber = [m replaceAllWithNSString:numberFormat->format_];
      return ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(self, formattedNumber);
    }
  }
  return @"";
}

- (jint)getRememberedPosition {
  if (!ableToFormat_) {
    return originalPosition_;
  }
  jint accruedInputIndex = 0, currentOutputIndex = 0;
  while (accruedInputIndex < positionToRemember_ && currentOutputIndex < ((jint) [((NSString *) nil_chk(currentOutput_)) length])) {
    if ([((JavaLangStringBuilder *) nil_chk(accruedInputWithoutFormatting_)) charAtWithInt:accruedInputIndex] == [((NSString *) nil_chk(currentOutput_)) charAtWithInt:currentOutputIndex]) {
      accruedInputIndex++;
    }
    currentOutputIndex++;
  }
  return currentOutputIndex;
}

- (NSString *)appendNationalNumberWithNSString:(NSString *)nationalNumber {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(self, nationalNumber);
}

- (NSString *)attemptToChooseFormattingPattern {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(self);
}

- (NSString *)inputAccruedNationalNumber {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputAccruedNationalNumber(self);
}

- (jboolean)isNanpaNumberWithNationalPrefix {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_isNanpaNumberWithNationalPrefix(self);
}

- (NSString *)removeNationalPrefixFromNationalNumber {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_removeNationalPrefixFromNationalNumber(self);
}

- (jboolean)attemptToExtractIdd {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractIdd(self);
}

- (jboolean)attemptToExtractCountryCallingCode {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractCountryCallingCode(self);
}

- (jchar)normalizeAndAccrueDigitsAndPlusSignWithChar:(jchar)nextChar
                                         withBoolean:(jboolean)rememberPosition {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_normalizeAndAccrueDigitsAndPlusSignWithChar_withBoolean_(self, nextChar, rememberPosition);
}

- (NSString *)inputDigitHelperWithChar:(jchar)nextChar {
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitHelperWithChar_(self, nextChar);
}

- (void)dealloc {
  RELEASE_(currentOutput_);
  RELEASE_(formattingTemplate_);
  RELEASE_(currentFormattingPattern_);
  RELEASE_(accruedInput_);
  RELEASE_(accruedInputWithoutFormatting_);
  RELEASE_(phoneUtil_);
  RELEASE_(defaultCountry_);
  RELEASE_(defaultMetadata_);
  RELEASE_(currentMetadata_);
  RELEASE_(prefixBeforeNationalNumber_);
  RELEASE_(extractedNationalPrefix_);
  RELEASE_(nationalNumber_);
  RELEASE_(possibleFormats_);
  RELEASE_(regexCache_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersAsYouTypeFormatter class]) {
    {
      JreStrongAssignAndConsume(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_EMPTY_METADATA_, nil, new_ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_init());
      ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata_set_internationalPrefix_(ComGoogleI18nPhonenumbersAsYouTypeFormatter_EMPTY_METADATA_, @"NA");
    }
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_CHARACTER_CLASS_PATTERN_, nil, JavaUtilRegexPattern_compileWithNSString_(@"\\[([^\\[\\]])*\\]"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_STANDALONE_DIGIT_PATTERN_, nil, JavaUtilRegexPattern_compileWithNSString_(@"\\d(?=[^,}][^,}])"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_ELIGIBLE_FORMAT_PATTERN_, nil, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$$$$", '[', ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_PUNCTUATION_(), @"]*(\\$\\d[", ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_PUNCTUATION_(), @"]*)+")));
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_NATIONAL_PREFIX_SEPARATORS_PATTERN_, nil, JavaUtilRegexPattern_compileWithNSString_(@"[- ]"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PATTERN_, nil, JavaUtilRegexPattern_compileWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PLACEHOLDER_));
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersAsYouTypeFormatter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "AsYouTypeFormatter", NULL, 0x0, NULL, NULL },
    { "getMetadataForRegionWithNSString:", "getMetadataForRegion", "Lcom.google.i18n.phonenumbers.nano.Phonemetadata$PhoneMetadata;", 0x2, NULL, NULL },
    { "maybeCreateNewTemplate", NULL, "Z", 0x2, NULL, NULL },
    { "getAvailableFormatsWithNSString:", "getAvailableFormats", "V", 0x2, NULL, NULL },
    { "isFormatEligibleWithNSString:", "isFormatEligible", "Z", 0x2, NULL, NULL },
    { "narrowDownPossibleFormatsWithNSString:", "narrowDownPossibleFormats", "V", 0x2, NULL, NULL },
    { "createFormattingTemplateWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:", "createFormattingTemplate", "Z", 0x2, NULL, NULL },
    { "getFormattingTemplateWithNSString:withNSString:", "getFormattingTemplate", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "inputDigitWithChar:", "inputDigit", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "inputDigitAndRememberPositionWithChar:", "inputDigitAndRememberPosition", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "inputDigitWithOptionToRememberPositionWithChar:withBoolean:", "inputDigitWithOptionToRememberPosition", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "attemptToChoosePatternWithPrefixExtracted", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getExtractedNationalPrefix", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "ableToExtractLongerNdd", NULL, "Z", 0x2, NULL, NULL },
    { "isDigitOrLeadingPlusSignWithChar:", "isDigitOrLeadingPlusSign", "Z", 0x2, NULL, NULL },
    { "attemptToFormatAccruedDigits", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getRememberedPosition", NULL, "I", 0x1, NULL, NULL },
    { "appendNationalNumberWithNSString:", "appendNationalNumber", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "attemptToChooseFormattingPattern", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "inputAccruedNationalNumber", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "isNanpaNumberWithNationalPrefix", NULL, "Z", 0x2, NULL, NULL },
    { "removeNationalPrefixFromNationalNumber", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "attemptToExtractIdd", NULL, "Z", 0x2, NULL, NULL },
    { "attemptToExtractCountryCallingCode", NULL, "Z", 0x2, NULL, NULL },
    { "normalizeAndAccrueDigitsAndPlusSignWithChar:withBoolean:", "normalizeAndAccrueDigitsAndPlusSign", "C", 0x2, NULL, NULL },
    { "inputDigitHelperWithChar:", "inputDigitHelper", "Ljava.lang.String;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "currentOutput_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "formattingTemplate_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "currentFormattingPattern_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "accruedInput_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "accruedInputWithoutFormatting_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "ableToFormat_", NULL, 0x2, "Z", NULL, NULL,  },
    { "inputHasFormatting_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isCompleteNumber_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isExpectingCountryCallingCode_", NULL, 0x2, "Z", NULL, NULL,  },
    { "phoneUtil_", NULL, 0x12, "Lcom.google.i18n.phonenumbers.PhoneNumberUtil;", NULL, NULL,  },
    { "defaultCountry_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "SEPARATOR_BEFORE_NATIONAL_NUMBER", "SEPARATOR_BEFORE_NATIONAL_NUMBER", 0x1a, "C", NULL, NULL, .constantValue.asUnichar = ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER },
    { "EMPTY_METADATA_", NULL, 0x1a, "Lcom.google.i18n.phonenumbers.nano.Phonemetadata$PhoneMetadata;", &ComGoogleI18nPhonenumbersAsYouTypeFormatter_EMPTY_METADATA_, NULL,  },
    { "defaultMetadata_", NULL, 0x2, "Lcom.google.i18n.phonenumbers.nano.Phonemetadata$PhoneMetadata;", NULL, NULL,  },
    { "currentMetadata_", NULL, 0x2, "Lcom.google.i18n.phonenumbers.nano.Phonemetadata$PhoneMetadata;", NULL, NULL,  },
    { "CHARACTER_CLASS_PATTERN_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersAsYouTypeFormatter_CHARACTER_CLASS_PATTERN_, NULL,  },
    { "STANDALONE_DIGIT_PATTERN_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersAsYouTypeFormatter_STANDALONE_DIGIT_PATTERN_, NULL,  },
    { "ELIGIBLE_FORMAT_PATTERN_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersAsYouTypeFormatter_ELIGIBLE_FORMAT_PATTERN_, NULL,  },
    { "NATIONAL_PREFIX_SEPARATORS_PATTERN_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersAsYouTypeFormatter_NATIONAL_PREFIX_SEPARATORS_PATTERN_, NULL,  },
    { "MIN_LEADING_DIGITS_LENGTH", "MIN_LEADING_DIGITS_LENGTH", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleI18nPhonenumbersAsYouTypeFormatter_MIN_LEADING_DIGITS_LENGTH },
    { "DIGIT_PLACEHOLDER_", NULL, 0x1a, "Ljava.lang.String;", &ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PLACEHOLDER_, NULL,  },
    { "DIGIT_PATTERN_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PATTERN_, NULL,  },
    { "lastMatchPosition_", NULL, 0x2, "I", NULL, NULL,  },
    { "originalPosition_", NULL, 0x2, "I", NULL, NULL,  },
    { "positionToRemember_", NULL, 0x2, "I", NULL, NULL,  },
    { "prefixBeforeNationalNumber_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "shouldAddSpaceAfterNationalPrefix_", NULL, 0x2, "Z", NULL, NULL,  },
    { "extractedNationalPrefix_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "nationalNumber_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "possibleFormats_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lcom/google/i18n/phonenumbers/nano/Phonemetadata$NumberFormat;>;",  },
    { "regexCache_", NULL, 0x2, "Lcom.google.i18n.phonenumbers.RegexCache;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersAsYouTypeFormatter = { 2, "AsYouTypeFormatter", "com.google.i18n.phonenumbers", NULL, 0x1, 27, methods, 31, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleI18nPhonenumbersAsYouTypeFormatter;
}

@end

void ComGoogleI18nPhonenumbersAsYouTypeFormatter_initWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *regionCode) {
  NSObject_init(self);
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentOutput_(self, @"");
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_setAndConsume_formattingTemplate_(self, new_JavaLangStringBuilder_init());
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentFormattingPattern_(self, @"");
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_setAndConsume_accruedInput_(self, new_JavaLangStringBuilder_init());
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_setAndConsume_accruedInputWithoutFormatting_(self, new_JavaLangStringBuilder_init());
  self->ableToFormat_ = YES;
  self->inputHasFormatting_ = NO;
  self->isCompleteNumber_ = NO;
  self->isExpectingCountryCallingCode_ = NO;
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_phoneUtil_(self, ComGoogleI18nPhonenumbersPhoneNumberUtil_getInstance());
  self->lastMatchPosition_ = 0;
  self->originalPosition_ = 0;
  self->positionToRemember_ = 0;
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_setAndConsume_prefixBeforeNationalNumber_(self, new_JavaLangStringBuilder_init());
  self->shouldAddSpaceAfterNationalPrefix_ = NO;
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_extractedNationalPrefix_(self, @"");
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_setAndConsume_nationalNumber_(self, new_JavaLangStringBuilder_init());
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_setAndConsume_possibleFormats_(self, new_JavaUtilArrayList_init());
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_setAndConsume_regexCache_(self, new_ComGoogleI18nPhonenumbersRegexCache_initWithInt_(64));
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_defaultCountry_(self, regionCode);
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentMetadata_(self, ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(self, self->defaultCountry_));
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_defaultMetadata_(self, self->currentMetadata_);
}

ComGoogleI18nPhonenumbersAsYouTypeFormatter *new_ComGoogleI18nPhonenumbersAsYouTypeFormatter_initWithNSString_(NSString *regionCode) {
  ComGoogleI18nPhonenumbersAsYouTypeFormatter *self = [ComGoogleI18nPhonenumbersAsYouTypeFormatter alloc];
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_initWithNSString_(self, regionCode);
  return self;
}

ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *regionCode) {
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(self->phoneUtil_)) getCountryCodeForRegionWithNSString:regionCode];
  NSString *mainCountry = [self->phoneUtil_ getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = [self->phoneUtil_ getMetadataForRegionWithNSString:mainCountry];
  if (metadata != nil) {
    return metadata;
  }
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_EMPTY_METADATA_;
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_maybeCreateNewTemplate(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->possibleFormats_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *numberFormat = [it next];
    NSString *pattern = ((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(numberFormat))->pattern_;
    if ([((NSString *) nil_chk(self->currentFormattingPattern_)) isEqual:pattern]) {
      return NO;
    }
    if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_createFormattingTemplateWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(self, numberFormat)) {
      ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentFormattingPattern_(self, pattern);
      self->shouldAddSpaceAfterNationalPrefix_ = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_NATIONAL_PREFIX_SEPARATORS_PATTERN_)) matcherWithJavaLangCharSequence:numberFormat->nationalPrefixFormattingRule_])) find];
      self->lastMatchPosition_ = 0;
      return YES;
    }
    else {
      [it remove];
    }
  }
  self->ableToFormat_ = NO;
  return NO;
}

void ComGoogleI18nPhonenumbersAsYouTypeFormatter_getAvailableFormatsWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *leadingDigits) {
  IOSObjectArray *numberFormats = (self->isCompleteNumber_ && ((IOSObjectArray *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_))->intlNumberFormat_))->size_ > 0) ? self->currentMetadata_->intlNumberFormat_ : ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_))->numberFormat_;
  jboolean nationalPrefixIsUsedByCountry = (![((NSString *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_))->nationalPrefix_)) isEqual:@""]);
  {
    IOSObjectArray *a__ = numberFormats;
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat * const *b__ = a__->buffer_;
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *format = *b__++;
      if (!nationalPrefixIsUsedByCountry || self->isCompleteNumber_ || ((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(format))->nationalPrefixOptionalWhenFormatting_ || ComGoogleI18nPhonenumbersPhoneNumberUtil_formattingRuleHasFirstGroupOnlyWithNSString_(format->nationalPrefixFormattingRule_)) {
        if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_isFormatEligibleWithNSString_(self, ((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(format))->format_)) {
          [((id<JavaUtilList>) nil_chk(self->possibleFormats_)) addWithId:format];
        }
      }
    }
  }
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_narrowDownPossibleFormatsWithNSString_(self, leadingDigits);
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isFormatEligibleWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *format) {
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_ELIGIBLE_FORMAT_PATTERN_)) matcherWithJavaLangCharSequence:format])) matches];
}

void ComGoogleI18nPhonenumbersAsYouTypeFormatter_narrowDownPossibleFormatsWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *leadingDigits) {
  jint indexOfLeadingDigitsPattern = ((jint) [((NSString *) nil_chk(leadingDigits)) length]) - ComGoogleI18nPhonenumbersAsYouTypeFormatter_MIN_LEADING_DIGITS_LENGTH;
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->possibleFormats_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *format = [it next];
    if (((IOSObjectArray *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(format))->leadingDigitsPattern_))->size_ == 0) {
      continue;
    }
    jint lastLeadingDigitsPattern = JavaLangMath_minWithInt_withInt_(indexOfLeadingDigitsPattern, format->leadingDigitsPattern_->size_ - 1);
    JavaUtilRegexPattern *leadingDigitsPattern = [((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:IOSObjectArray_Get(format->leadingDigitsPattern_, lastLeadingDigitsPattern)];
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(leadingDigitsPattern)) matcherWithJavaLangCharSequence:leadingDigits];
    if (![((JavaUtilRegexMatcher *) nil_chk(m)) lookingAt]) {
      [it remove];
    }
  }
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_createFormattingTemplateWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *format) {
  NSString *numberPattern = ((ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *) nil_chk(format))->pattern_;
  if ([((NSString *) nil_chk(numberPattern)) indexOf:'|'] != -1) {
    return NO;
  }
  numberPattern = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_CHARACTER_CLASS_PATTERN_)) matcherWithJavaLangCharSequence:numberPattern])) replaceAllWithNSString:@"\\\\d"];
  numberPattern = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_STANDALONE_DIGIT_PATTERN_)) matcherWithJavaLangCharSequence:numberPattern])) replaceAllWithNSString:@"\\\\d"];
  [((JavaLangStringBuilder *) nil_chk(self->formattingTemplate_)) setLengthWithInt:0];
  NSString *tempTemplate = ComGoogleI18nPhonenumbersAsYouTypeFormatter_getFormattingTemplateWithNSString_withNSString_(self, numberPattern, format->format_);
  if (((jint) [((NSString *) nil_chk(tempTemplate)) length]) > 0) {
    [self->formattingTemplate_ appendWithNSString:tempTemplate];
    return YES;
  }
  return NO;
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_getFormattingTemplateWithNSString_withNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *numberPattern, NSString *numberFormat) {
  NSString *longestPhoneNumber = @"999999999999999";
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:numberPattern])) matcherWithJavaLangCharSequence:longestPhoneNumber];
  [((JavaUtilRegexMatcher *) nil_chk(m)) find];
  NSString *aPhoneNumber = [m group];
  if (((jint) [((NSString *) nil_chk(aPhoneNumber)) length]) < [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) length]) {
    return @"";
  }
  NSString *template_ = [aPhoneNumber replaceAll:numberPattern withReplacement:numberFormat];
  template_ = [((NSString *) nil_chk(template_)) replaceAll:@"9" withReplacement:ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PLACEHOLDER_];
  return template_;
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitWithOptionToRememberPositionWithChar_withBoolean_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar, jboolean rememberPosition) {
  [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) appendWithChar:nextChar];
  if (rememberPosition) {
    self->originalPosition_ = [self->accruedInput_ length];
  }
  if (!ComGoogleI18nPhonenumbersAsYouTypeFormatter_isDigitOrLeadingPlusSignWithChar_(self, nextChar)) {
    self->ableToFormat_ = NO;
    self->inputHasFormatting_ = YES;
  }
  else {
    nextChar = ComGoogleI18nPhonenumbersAsYouTypeFormatter_normalizeAndAccrueDigitsAndPlusSignWithChar_withBoolean_(self, nextChar, rememberPosition);
  }
  if (!self->ableToFormat_) {
    if (self->inputHasFormatting_) {
      return [self->accruedInput_ description];
    }
    else if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractIdd(self)) {
      if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractCountryCallingCode(self)) {
        return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChoosePatternWithPrefixExtracted(self);
      }
    }
    else if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_ableToExtractLongerNdd(self)) {
      [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) appendWithChar:ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER];
      return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChoosePatternWithPrefixExtracted(self);
    }
    return [self->accruedInput_ description];
  }
  switch ([((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) length]) {
    case 0:
    case 1:
    case 2:
    return [self->accruedInput_ description];
    case 3:
    if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractIdd(self)) {
      self->isExpectingCountryCallingCode_ = YES;
    }
    else {
      ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_extractedNationalPrefix_(self, ComGoogleI18nPhonenumbersAsYouTypeFormatter_removeNationalPrefixFromNationalNumber(self));
      return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(self);
    }
    default:
    if (self->isExpectingCountryCallingCode_) {
      if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractCountryCallingCode(self)) {
        self->isExpectingCountryCallingCode_ = NO;
      }
      return JreStrcat("@$", self->prefixBeforeNationalNumber_, [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) description]);
    }
    if ([((id<JavaUtilList>) nil_chk(self->possibleFormats_)) size] > 0) {
      NSString *tempNationalNumber = ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitHelperWithChar_(self, nextChar);
      NSString *formattedNumber = [self attemptToFormatAccruedDigits];
      if (((jint) [((NSString *) nil_chk(formattedNumber)) length]) > 0) {
        return formattedNumber;
      }
      ComGoogleI18nPhonenumbersAsYouTypeFormatter_narrowDownPossibleFormatsWithNSString_(self, [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) description]);
      if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_maybeCreateNewTemplate(self)) {
        return ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputAccruedNationalNumber(self);
      }
      return self->ableToFormat_ ? ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(self, tempNationalNumber) : [self->accruedInput_ description];
    }
    else {
      return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(self);
    }
  }
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChoosePatternWithPrefixExtracted(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  self->ableToFormat_ = YES;
  self->isExpectingCountryCallingCode_ = NO;
  [((id<JavaUtilList>) nil_chk(self->possibleFormats_)) clear];
  self->lastMatchPosition_ = 0;
  [((JavaLangStringBuilder *) nil_chk(self->formattingTemplate_)) setLengthWithInt:0];
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentFormattingPattern_(self, @"");
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(self);
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_ableToExtractLongerNdd(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  if (((jint) [((NSString *) nil_chk(self->extractedNationalPrefix_)) length]) > 0) {
    [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) insertWithInt:0 withNSString:self->extractedNationalPrefix_];
    jint indexOfPreviousNdd = [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) lastIndexOfWithNSString:self->extractedNationalPrefix_];
    [self->prefixBeforeNationalNumber_ setLengthWithInt:indexOfPreviousNdd];
  }
  return ![self->extractedNationalPrefix_ isEqual:ComGoogleI18nPhonenumbersAsYouTypeFormatter_removeNationalPrefixFromNationalNumber(self)];
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isDigitOrLeadingPlusSignWithChar_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar) {
  return JavaLangCharacter_isDigitWithChar_(nextChar) || ([((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) length] == 1 && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_get_PLUS_CHARS_PATTERN_())) matcherWithJavaLangCharSequence:JavaLangCharacter_toStringWithChar_(nextChar)])) matches]);
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *nationalNumber) {
  jint prefixBeforeNationalNumberLength = [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) length];
  if (self->shouldAddSpaceAfterNationalPrefix_ && prefixBeforeNationalNumberLength > 0 && [self->prefixBeforeNationalNumber_ charAtWithInt:prefixBeforeNationalNumberLength - 1] != ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER) {
    return JreStrcat("$C$", [NSString stringWithJavaLangStringBuilder:self->prefixBeforeNationalNumber_], ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER, nationalNumber);
  }
  else {
    return JreStrcat("@$", self->prefixBeforeNationalNumber_, nationalNumber);
  }
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  if ([((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) length] >= ComGoogleI18nPhonenumbersAsYouTypeFormatter_MIN_LEADING_DIGITS_LENGTH) {
    ComGoogleI18nPhonenumbersAsYouTypeFormatter_getAvailableFormatsWithNSString_(self, [self->nationalNumber_ description]);
    NSString *formattedNumber = [self attemptToFormatAccruedDigits];
    if (((jint) [((NSString *) nil_chk(formattedNumber)) length]) > 0) {
      return formattedNumber;
    }
    return ComGoogleI18nPhonenumbersAsYouTypeFormatter_maybeCreateNewTemplate(self) ? ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputAccruedNationalNumber(self) : [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) description];
  }
  else {
    return ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(self, [self->nationalNumber_ description]);
  }
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputAccruedNationalNumber(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  jint lengthOfNationalNumber = [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) length];
  if (lengthOfNationalNumber > 0) {
    NSString *tempNationalNumber = @"";
    for (jint i = 0; i < lengthOfNationalNumber; i++) {
      tempNationalNumber = ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitHelperWithChar_(self, [self->nationalNumber_ charAtWithInt:i]);
    }
    return self->ableToFormat_ ? ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(self, tempNationalNumber) : [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) description];
  }
  else {
    return [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) description];
  }
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isNanpaNumberWithNationalPrefix(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  return (((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_))->countryCode_ == 1) && ([((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) charAtWithInt:0] == '1') && ([self->nationalNumber_ charAtWithInt:1] != '0') && ([self->nationalNumber_ charAtWithInt:1] != '1');
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_removeNationalPrefixFromNationalNumber(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  jint startOfNationalNumber = 0;
  if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_isNanpaNumberWithNationalPrefix(self)) {
    startOfNationalNumber = 1;
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) appendWithChar:'1'])) appendWithChar:ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER];
    self->isCompleteNumber_ = YES;
  }
  else if (![((NSString *) nil_chk(((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_))->nationalPrefixForParsing_)) isEqual:@""]) {
    JavaUtilRegexPattern *nationalPrefixForParsing = [((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:self->currentMetadata_->nationalPrefixForParsing_];
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(nationalPrefixForParsing)) matcherWithJavaLangCharSequence:self->nationalNumber_];
    if ([((JavaUtilRegexMatcher *) nil_chk(m)) lookingAt] && [m end] > 0) {
      self->isCompleteNumber_ = YES;
      startOfNationalNumber = [m end];
      [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) appendWithNSString:[((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) substringWithInt:0 withInt:startOfNationalNumber]];
    }
  }
  NSString *nationalPrefix = [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) substringWithInt:0 withInt:startOfNationalNumber];
  [self->nationalNumber_ delete__WithInt:0 withInt:startOfNationalNumber];
  return nationalPrefix;
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractIdd(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  JavaUtilRegexPattern *internationalPrefix = [((ComGoogleI18nPhonenumbersRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:JreStrcat("CCC$", '\\', ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN, '|', ((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_))->internationalPrefix_)];
  JavaUtilRegexMatcher *iddMatcher = [((JavaUtilRegexPattern *) nil_chk(internationalPrefix)) matcherWithJavaLangCharSequence:self->accruedInputWithoutFormatting_];
  if ([((JavaUtilRegexMatcher *) nil_chk(iddMatcher)) lookingAt]) {
    self->isCompleteNumber_ = YES;
    jint startOfCountryCallingCode = [iddMatcher end];
    [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) setLengthWithInt:0];
    [self->nationalNumber_ appendWithNSString:[((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) substringWithInt:startOfCountryCallingCode]];
    [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) setLengthWithInt:0];
    [self->prefixBeforeNationalNumber_ appendWithNSString:[self->accruedInputWithoutFormatting_ substringWithInt:0 withInt:startOfCountryCallingCode]];
    if ([self->accruedInputWithoutFormatting_ charAtWithInt:0] != ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN) {
      [self->prefixBeforeNationalNumber_ appendWithChar:ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER];
    }
    return YES;
  }
  return NO;
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractCountryCallingCode(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  if ([((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) length] == 0) {
    return NO;
  }
  JavaLangStringBuilder *numberWithoutCountryCallingCode = [new_JavaLangStringBuilder_init() autorelease];
  jint countryCode = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(self->phoneUtil_)) extractCountryCodeWithJavaLangStringBuilder:self->nationalNumber_ withJavaLangStringBuilder:numberWithoutCountryCallingCode];
  if (countryCode == 0) {
    return NO;
  }
  [self->nationalNumber_ setLengthWithInt:0];
  [self->nationalNumber_ appendWithJavaLangCharSequence:numberWithoutCountryCallingCode];
  NSString *newRegionCode = [self->phoneUtil_ getRegionCodeForCountryCodeWithInt:countryCode];
  if ([((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_get_REGION_CODE_FOR_NON_GEO_ENTITY_())) isEqual:newRegionCode]) {
    ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentMetadata_(self, [self->phoneUtil_ getMetadataForNonGeographicalRegionWithInt:countryCode]);
  }
  else if (![((NSString *) nil_chk(newRegionCode)) isEqual:self->defaultCountry_]) {
    ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentMetadata_(self, ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(self, newRegionCode));
  }
  NSString *countryCodeString = JavaLangInteger_toStringWithInt_(countryCode);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) appendWithNSString:countryCodeString])) appendWithChar:ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER];
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_extractedNationalPrefix_(self, @"");
  return YES;
}

jchar ComGoogleI18nPhonenumbersAsYouTypeFormatter_normalizeAndAccrueDigitsAndPlusSignWithChar_withBoolean_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar, jboolean rememberPosition) {
  jchar normalizedChar;
  if (nextChar == ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN) {
    normalizedChar = nextChar;
    [((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) appendWithChar:nextChar];
  }
  else {
    jint radix = 10;
    normalizedChar = JavaLangCharacter_forDigitWithInt_withInt_(JavaLangCharacter_digitWithChar_withInt_(nextChar, radix), radix);
    [((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) appendWithChar:normalizedChar];
    [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) appendWithChar:normalizedChar];
  }
  if (rememberPosition) {
    self->positionToRemember_ = [((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) length];
  }
  return normalizedChar;
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitHelperWithChar_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar) {
  JavaUtilRegexMatcher *digitMatcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PATTERN_)) matcherWithJavaLangCharSequence:self->formattingTemplate_];
  if ([((JavaUtilRegexMatcher *) nil_chk(digitMatcher)) findWithInt:self->lastMatchPosition_]) {
    NSString *tempTemplate = [digitMatcher replaceFirstWithNSString:JavaLangCharacter_toStringWithChar_(nextChar)];
    [((JavaLangStringBuilder *) nil_chk(self->formattingTemplate_)) replaceWithInt:0 withInt:((jint) [((NSString *) nil_chk(tempTemplate)) length]) withNSString:tempTemplate];
    self->lastMatchPosition_ = [digitMatcher start];
    return [self->formattingTemplate_ substringWithInt:0 withInt:self->lastMatchPosition_ + 1];
  }
  else {
    if ([((id<JavaUtilList>) nil_chk(self->possibleFormats_)) size] == 1) {
      self->ableToFormat_ = NO;
    }
    ComGoogleI18nPhonenumbersAsYouTypeFormatter_set_currentFormattingPattern_(self, @"");
    return [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) description];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersAsYouTypeFormatter)
