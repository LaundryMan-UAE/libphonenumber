//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/libphonenumber/java/libphonenumber/src/main/java/com/google/i18n/phonenumbers/AsYouTypeFormatter.java
//

#include "J2ObjC_source.h"
#include "com/google/i18n/phonenumbers/AsYouTypeFormatter.h"
#include "com/google/i18n/phonenumbers/PhoneNumberUtil.h"
#include "com/google/i18n/phonenumbers/Phonemetadata.h"
#include "com/google/i18n/phonenumbers/internal/RegexCache.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface ComGoogleI18nPhonenumbersAsYouTypeFormatter () {
 @public
  NSString *currentOutput_;
  JavaLangStringBuilder *formattingTemplate_;
  NSString *currentFormattingPattern_;
  JavaLangStringBuilder *accruedInput_;
  JavaLangStringBuilder *accruedInputWithoutFormatting_;
  jboolean ableToFormat_;
  jboolean inputHasFormatting_;
  jboolean isCompleteNumber_;
  jboolean isExpectingCountryCallingCode_;
  ComGoogleI18nPhonenumbersPhoneNumberUtil *phoneUtil_;
  NSString *defaultCountry_;
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *defaultMetadata_;
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *currentMetadata_;
  jint lastMatchPosition_;
  jint originalPosition_;
  jint positionToRemember_;
  JavaLangStringBuilder *prefixBeforeNationalNumber_;
  jboolean shouldAddSpaceAfterNationalPrefix_;
  NSString *extractedNationalPrefix_;
  JavaLangStringBuilder *nationalNumber_;
  id<JavaUtilList> possibleFormats_;
  ComGoogleI18nPhonenumbersInternalRegexCache *regexCache_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, currentOutput_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, formattingTemplate_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, currentFormattingPattern_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, accruedInput_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, accruedInputWithoutFormatting_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, phoneUtil_, ComGoogleI18nPhonenumbersPhoneNumberUtil *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, defaultCountry_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, defaultMetadata_, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, currentMetadata_, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, prefixBeforeNationalNumber_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, extractedNationalPrefix_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, nationalNumber_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, possibleFormats_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersAsYouTypeFormatter, regexCache_, ComGoogleI18nPhonenumbersInternalRegexCache *)

inline jchar ComGoogleI18nPhonenumbersAsYouTypeFormatter_get_SEPARATOR_BEFORE_NATIONAL_NUMBER(void);
#define ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER ' '
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleI18nPhonenumbersAsYouTypeFormatter, SEPARATOR_BEFORE_NATIONAL_NUMBER, jchar)

inline ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersAsYouTypeFormatter_get_EMPTY_METADATA(void);
static ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersAsYouTypeFormatter_EMPTY_METADATA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersAsYouTypeFormatter, EMPTY_METADATA, ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_get_CHARACTER_CLASS_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_CHARACTER_CLASS_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersAsYouTypeFormatter, CHARACTER_CLASS_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_get_STANDALONE_DIGIT_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_STANDALONE_DIGIT_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersAsYouTypeFormatter, STANDALONE_DIGIT_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_get_ELIGIBLE_FORMAT_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_ELIGIBLE_FORMAT_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersAsYouTypeFormatter, ELIGIBLE_FORMAT_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_get_NATIONAL_PREFIX_SEPARATORS_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_NATIONAL_PREFIX_SEPARATORS_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersAsYouTypeFormatter, NATIONAL_PREFIX_SEPARATORS_PATTERN, JavaUtilRegexPattern *)

inline jint ComGoogleI18nPhonenumbersAsYouTypeFormatter_get_MIN_LEADING_DIGITS_LENGTH(void);
#define ComGoogleI18nPhonenumbersAsYouTypeFormatter_MIN_LEADING_DIGITS_LENGTH 3
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleI18nPhonenumbersAsYouTypeFormatter, MIN_LEADING_DIGITS_LENGTH, jint)

inline NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_get_DIGIT_PLACEHOLDER(void);
static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PLACEHOLDER = @"\u2008";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersAsYouTypeFormatter, DIGIT_PLACEHOLDER, NSString *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_get_DIGIT_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersAsYouTypeFormatter, DIGIT_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *regionCode);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_maybeCreateNewTemplate(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersAsYouTypeFormatter_getAvailableFormatsWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *leadingDigits);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isFormatEligibleWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *format);

__attribute__((unused)) static void ComGoogleI18nPhonenumbersAsYouTypeFormatter_narrowDownPossibleFormatsWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *leadingDigits);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_createFormattingTemplateWithComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *format);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_getFormattingTemplateWithNSString_withNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *numberPattern, NSString *numberFormat);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitWithOptionToRememberPositionWithChar_withBoolean_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar, jboolean rememberPosition);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChoosePatternWithPrefixExtracted(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_ableToExtractLongerNdd(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isDigitOrLeadingPlusSignWithChar_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *nationalNumber);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputAccruedNationalNumber(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isNanpaNumberWithNationalPrefix(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_removeNationalPrefixFromNationalNumber(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractIdd(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractCountryCallingCode(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self);

__attribute__((unused)) static jchar ComGoogleI18nPhonenumbersAsYouTypeFormatter_normalizeAndAccrueDigitsAndPlusSignWithChar_withBoolean_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar, jboolean rememberPosition);

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitHelperWithChar_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar);

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersAsYouTypeFormatter)

@implementation ComGoogleI18nPhonenumbersAsYouTypeFormatter

- (instancetype)initWithNSString:(NSString *)regionCode {
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_initWithNSString_(self, regionCode);
  return self;
}

- (void)clear {
  JreStrongAssign(&currentOutput_, @"");
  [((JavaLangStringBuilder *) nil_chk(accruedInput_)) setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(accruedInputWithoutFormatting_)) setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(formattingTemplate_)) setLengthWithInt:0];
  lastMatchPosition_ = 0;
  JreStrongAssign(&currentFormattingPattern_, @"");
  [((JavaLangStringBuilder *) nil_chk(prefixBeforeNationalNumber_)) setLengthWithInt:0];
  JreStrongAssign(&extractedNationalPrefix_, @"");
  [((JavaLangStringBuilder *) nil_chk(nationalNumber_)) setLengthWithInt:0];
  ableToFormat_ = true;
  inputHasFormatting_ = false;
  positionToRemember_ = 0;
  originalPosition_ = 0;
  isCompleteNumber_ = false;
  isExpectingCountryCallingCode_ = false;
  [((id<JavaUtilList>) nil_chk(possibleFormats_)) clear];
  shouldAddSpaceAfterNationalPrefix_ = false;
  if (![((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(currentMetadata_)) isEqual:defaultMetadata_]) {
    JreStrongAssign(&currentMetadata_, ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(self, defaultCountry_));
  }
}

- (NSString *)inputDigitWithChar:(jchar)nextChar {
  JreStrongAssign(&currentOutput_, ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitWithOptionToRememberPositionWithChar_withBoolean_(self, nextChar, false));
  return currentOutput_;
}

- (NSString *)inputDigitAndRememberPositionWithChar:(jchar)nextChar {
  JreStrongAssign(&currentOutput_, ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitWithOptionToRememberPositionWithChar_withBoolean_(self, nextChar, true));
  return currentOutput_;
}

- (NSString *)getExtractedNationalPrefix {
  return extractedNationalPrefix_;
}

- (NSString *)attemptToFormatAccruedDigits {
  for (ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat * __strong numberFormat in nil_chk(possibleFormats_)) {
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(regexCache_)) getPatternForRegexWithNSString:[((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *) nil_chk(numberFormat)) getPattern]])) matcherWithJavaLangCharSequence:nationalNumber_];
    if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
      shouldAddSpaceAfterNationalPrefix_ = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_NATIONAL_PREFIX_SEPARATORS_PATTERN)) matcherWithJavaLangCharSequence:[numberFormat getNationalPrefixFormattingRule]])) find];
      NSString *formattedNumber = [m replaceAllWithNSString:[numberFormat getFormat]];
      return ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(self, formattedNumber);
    }
  }
  return @"";
}

- (jint)getRememberedPosition {
  if (!ableToFormat_) {
    return originalPosition_;
  }
  jint accruedInputIndex = 0;
  jint currentOutputIndex = 0;
  while (accruedInputIndex < positionToRemember_ && currentOutputIndex < [((NSString *) nil_chk(currentOutput_)) java_length]) {
    if ([((JavaLangStringBuilder *) nil_chk(accruedInputWithoutFormatting_)) charAtWithInt:accruedInputIndex] == [((NSString *) nil_chk(currentOutput_)) charAtWithInt:currentOutputIndex]) {
      accruedInputIndex++;
    }
    currentOutputIndex++;
  }
  return currentOutputIndex;
}

- (void)dealloc {
  RELEASE_(currentOutput_);
  RELEASE_(formattingTemplate_);
  RELEASE_(currentFormattingPattern_);
  RELEASE_(accruedInput_);
  RELEASE_(accruedInputWithoutFormatting_);
  RELEASE_(phoneUtil_);
  RELEASE_(defaultCountry_);
  RELEASE_(defaultMetadata_);
  RELEASE_(currentMetadata_);
  RELEASE_(prefixBeforeNationalNumber_);
  RELEASE_(extractedNationalPrefix_);
  RELEASE_(nationalNumber_);
  RELEASE_(possibleFormats_);
  RELEASE_(regexCache_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersAsYouTypeFormatter class]) {
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_EMPTY_METADATA, [create_ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata_init() setInternationalPrefixWithNSString:@"NA"]);
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_CHARACTER_CLASS_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"\\[([^\\[\\]])*\\]"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_STANDALONE_DIGIT_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"\\d(?=[^,}][^,}])"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_ELIGIBLE_FORMAT_PATTERN, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$$$$", '[', ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, @"]*(\\$\\d[", ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, @"]*)+")));
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_NATIONAL_PREFIX_SEPARATORS_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"[- ]"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PATTERN, JavaUtilRegexPattern_compileWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PLACEHOLDER));
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersAsYouTypeFormatter)
  }
}

@end

void ComGoogleI18nPhonenumbersAsYouTypeFormatter_initWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *regionCode) {
  NSObject_init(self);
  JreStrongAssign(&self->currentOutput_, @"");
  JreStrongAssignAndConsume(&self->formattingTemplate_, new_JavaLangStringBuilder_init());
  JreStrongAssign(&self->currentFormattingPattern_, @"");
  JreStrongAssignAndConsume(&self->accruedInput_, new_JavaLangStringBuilder_init());
  JreStrongAssignAndConsume(&self->accruedInputWithoutFormatting_, new_JavaLangStringBuilder_init());
  self->ableToFormat_ = true;
  self->inputHasFormatting_ = false;
  self->isCompleteNumber_ = false;
  self->isExpectingCountryCallingCode_ = false;
  JreStrongAssign(&self->phoneUtil_, ComGoogleI18nPhonenumbersPhoneNumberUtil_getInstance());
  self->lastMatchPosition_ = 0;
  self->originalPosition_ = 0;
  self->positionToRemember_ = 0;
  JreStrongAssignAndConsume(&self->prefixBeforeNationalNumber_, new_JavaLangStringBuilder_init());
  self->shouldAddSpaceAfterNationalPrefix_ = false;
  JreStrongAssign(&self->extractedNationalPrefix_, @"");
  JreStrongAssignAndConsume(&self->nationalNumber_, new_JavaLangStringBuilder_init());
  JreStrongAssignAndConsume(&self->possibleFormats_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->regexCache_, new_ComGoogleI18nPhonenumbersInternalRegexCache_initWithInt_(64));
  JreStrongAssign(&self->defaultCountry_, regionCode);
  JreStrongAssign(&self->currentMetadata_, ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(self, self->defaultCountry_));
  JreStrongAssign(&self->defaultMetadata_, self->currentMetadata_);
}

ComGoogleI18nPhonenumbersAsYouTypeFormatter *new_ComGoogleI18nPhonenumbersAsYouTypeFormatter_initWithNSString_(NSString *regionCode) {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersAsYouTypeFormatter, initWithNSString_, regionCode)
}

ComGoogleI18nPhonenumbersAsYouTypeFormatter *create_ComGoogleI18nPhonenumbersAsYouTypeFormatter_initWithNSString_(NSString *regionCode) {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersAsYouTypeFormatter, initWithNSString_, regionCode)
}

ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *regionCode) {
  jint countryCallingCode = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(self->phoneUtil_)) getCountryCodeForRegionWithNSString:regionCode];
  NSString *mainCountry = [self->phoneUtil_ getRegionCodeForCountryCodeWithInt:countryCallingCode];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [self->phoneUtil_ getMetadataForRegionWithNSString:mainCountry];
  if (metadata != nil) {
    return metadata;
  }
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_EMPTY_METADATA;
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_maybeCreateNewTemplate(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->possibleFormats_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *numberFormat = [it next];
    NSString *pattern = [((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *) nil_chk(numberFormat)) getPattern];
    if ([((NSString *) nil_chk(self->currentFormattingPattern_)) isEqual:pattern]) {
      return false;
    }
    if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_createFormattingTemplateWithComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_(self, numberFormat)) {
      JreStrongAssign(&self->currentFormattingPattern_, pattern);
      self->shouldAddSpaceAfterNationalPrefix_ = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_NATIONAL_PREFIX_SEPARATORS_PATTERN)) matcherWithJavaLangCharSequence:[numberFormat getNationalPrefixFormattingRule]])) find];
      self->lastMatchPosition_ = 0;
      return true;
    }
    else {
      [it remove];
    }
  }
  self->ableToFormat_ = false;
  return false;
}

void ComGoogleI18nPhonenumbersAsYouTypeFormatter_getAvailableFormatsWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *leadingDigits) {
  id<JavaUtilList> formatList = (self->isCompleteNumber_ && [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_)) intlNumberFormatSize] > 0) ? [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_)) intlNumberFormats] : [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_)) numberFormats];
  jboolean nationalPrefixIsUsedByCountry = [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_)) hasNationalPrefix];
  for (ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat * __strong format in formatList) {
    if (!nationalPrefixIsUsedByCountry || self->isCompleteNumber_ || [((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *) nil_chk(format)) getNationalPrefixOptionalWhenFormatting] || ComGoogleI18nPhonenumbersPhoneNumberUtil_formattingRuleHasFirstGroupOnlyWithNSString_([format getNationalPrefixFormattingRule])) {
      if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_isFormatEligibleWithNSString_(self, [((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *) nil_chk(format)) getFormat])) {
        [((id<JavaUtilList>) nil_chk(self->possibleFormats_)) addWithId:format];
      }
    }
  }
  ComGoogleI18nPhonenumbersAsYouTypeFormatter_narrowDownPossibleFormatsWithNSString_(self, leadingDigits);
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isFormatEligibleWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *format) {
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_ELIGIBLE_FORMAT_PATTERN)) matcherWithJavaLangCharSequence:format])) matches];
}

void ComGoogleI18nPhonenumbersAsYouTypeFormatter_narrowDownPossibleFormatsWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *leadingDigits) {
  jint indexOfLeadingDigitsPattern = [((NSString *) nil_chk(leadingDigits)) java_length] - ComGoogleI18nPhonenumbersAsYouTypeFormatter_MIN_LEADING_DIGITS_LENGTH;
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->possibleFormats_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *format = [it next];
    if ([((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *) nil_chk(format)) leadingDigitsPatternSize] == 0) {
      continue;
    }
    jint lastLeadingDigitsPattern = JavaLangMath_minWithInt_withInt_(indexOfLeadingDigitsPattern, [format leadingDigitsPatternSize] - 1);
    JavaUtilRegexPattern *leadingDigitsPattern = [((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:[format getLeadingDigitsPatternWithInt:lastLeadingDigitsPattern]];
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(leadingDigitsPattern)) matcherWithJavaLangCharSequence:leadingDigits];
    if (![((JavaUtilRegexMatcher *) nil_chk(m)) lookingAt]) {
      [it remove];
    }
  }
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_createFormattingTemplateWithComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *format) {
  NSString *numberPattern = [((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *) nil_chk(format)) getPattern];
  if ([((NSString *) nil_chk(numberPattern)) java_indexOf:'|'] != -1) {
    return false;
  }
  numberPattern = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_CHARACTER_CLASS_PATTERN)) matcherWithJavaLangCharSequence:numberPattern])) replaceAllWithNSString:@"\\\\d"];
  numberPattern = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_STANDALONE_DIGIT_PATTERN)) matcherWithJavaLangCharSequence:numberPattern])) replaceAllWithNSString:@"\\\\d"];
  [((JavaLangStringBuilder *) nil_chk(self->formattingTemplate_)) setLengthWithInt:0];
  NSString *tempTemplate = ComGoogleI18nPhonenumbersAsYouTypeFormatter_getFormattingTemplateWithNSString_withNSString_(self, numberPattern, [format getFormat]);
  if ([((NSString *) nil_chk(tempTemplate)) java_length] > 0) {
    [((JavaLangStringBuilder *) nil_chk(self->formattingTemplate_)) appendWithNSString:tempTemplate];
    return true;
  }
  return false;
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_getFormattingTemplateWithNSString_withNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *numberPattern, NSString *numberFormat) {
  NSString *longestPhoneNumber = @"999999999999999";
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk([((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:numberPattern])) matcherWithJavaLangCharSequence:longestPhoneNumber];
  [((JavaUtilRegexMatcher *) nil_chk(m)) find];
  NSString *aPhoneNumber = [m group];
  if ([((NSString *) nil_chk(aPhoneNumber)) java_length] < [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) java_length]) {
    return @"";
  }
  NSString *template_ = [aPhoneNumber java_replaceAll:numberPattern withReplacement:numberFormat];
  template_ = [((NSString *) nil_chk(template_)) java_replaceAll:@"9" withReplacement:ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PLACEHOLDER];
  return template_;
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitWithOptionToRememberPositionWithChar_withBoolean_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar, jboolean rememberPosition) {
  [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) appendWithChar:nextChar];
  if (rememberPosition) {
    self->originalPosition_ = [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) java_length];
  }
  if (!ComGoogleI18nPhonenumbersAsYouTypeFormatter_isDigitOrLeadingPlusSignWithChar_(self, nextChar)) {
    self->ableToFormat_ = false;
    self->inputHasFormatting_ = true;
  }
  else {
    nextChar = ComGoogleI18nPhonenumbersAsYouTypeFormatter_normalizeAndAccrueDigitsAndPlusSignWithChar_withBoolean_(self, nextChar, rememberPosition);
  }
  if (!self->ableToFormat_) {
    if (self->inputHasFormatting_) {
      return [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) description];
    }
    else if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractIdd(self)) {
      if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractCountryCallingCode(self)) {
        return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChoosePatternWithPrefixExtracted(self);
      }
    }
    else if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_ableToExtractLongerNdd(self)) {
      [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) appendWithChar:ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER];
      return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChoosePatternWithPrefixExtracted(self);
    }
    return [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) description];
  }
  switch ([((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) java_length]) {
    case 0:
    case 1:
    case 2:
    return [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) description];
    case 3:
    if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractIdd(self)) {
      self->isExpectingCountryCallingCode_ = true;
    }
    else {
      JreStrongAssign(&self->extractedNationalPrefix_, ComGoogleI18nPhonenumbersAsYouTypeFormatter_removeNationalPrefixFromNationalNumber(self));
      return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(self);
    }
    default:
    if (self->isExpectingCountryCallingCode_) {
      if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractCountryCallingCode(self)) {
        self->isExpectingCountryCallingCode_ = false;
      }
      return JreStrcat("@$", self->prefixBeforeNationalNumber_, [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) description]);
    }
    if ([((id<JavaUtilList>) nil_chk(self->possibleFormats_)) size] > 0) {
      NSString *tempNationalNumber = ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitHelperWithChar_(self, nextChar);
      NSString *formattedNumber = [self attemptToFormatAccruedDigits];
      if ([((NSString *) nil_chk(formattedNumber)) java_length] > 0) {
        return formattedNumber;
      }
      ComGoogleI18nPhonenumbersAsYouTypeFormatter_narrowDownPossibleFormatsWithNSString_(self, [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) description]);
      if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_maybeCreateNewTemplate(self)) {
        return ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputAccruedNationalNumber(self);
      }
      return self->ableToFormat_ ? ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(self, tempNationalNumber) : [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) description];
    }
    else {
      return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(self);
    }
  }
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChoosePatternWithPrefixExtracted(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  self->ableToFormat_ = true;
  self->isExpectingCountryCallingCode_ = false;
  [((id<JavaUtilList>) nil_chk(self->possibleFormats_)) clear];
  self->lastMatchPosition_ = 0;
  [((JavaLangStringBuilder *) nil_chk(self->formattingTemplate_)) setLengthWithInt:0];
  JreStrongAssign(&self->currentFormattingPattern_, @"");
  return ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(self);
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_ableToExtractLongerNdd(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  if ([((NSString *) nil_chk(self->extractedNationalPrefix_)) java_length] > 0) {
    [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) insertWithInt:0 withNSString:self->extractedNationalPrefix_];
    jint indexOfPreviousNdd = [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) lastIndexOfWithNSString:self->extractedNationalPrefix_];
    [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) setLengthWithInt:indexOfPreviousNdd];
  }
  return ![((NSString *) nil_chk(self->extractedNationalPrefix_)) isEqual:ComGoogleI18nPhonenumbersAsYouTypeFormatter_removeNationalPrefixFromNationalNumber(self)];
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isDigitOrLeadingPlusSignWithChar_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar) {
  return JavaLangCharacter_isDigitWithChar_(nextChar) || ([((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) java_length] == 1 && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, PLUS_CHARS_PATTERN))) matcherWithJavaLangCharSequence:JavaLangCharacter_toStringWithChar_(nextChar)])) matches]);
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, NSString *nationalNumber) {
  jint prefixBeforeNationalNumberLength = [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) java_length];
  if (self->shouldAddSpaceAfterNationalPrefix_ && prefixBeforeNationalNumberLength > 0 && [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) charAtWithInt:prefixBeforeNationalNumberLength - 1] != ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER) {
    return JreStrcat("$C$", [NSString java_stringWithJavaLangStringBuilder:self->prefixBeforeNationalNumber_], ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER, nationalNumber);
  }
  else {
    return JreStrcat("@$", self->prefixBeforeNationalNumber_, nationalNumber);
  }
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToChooseFormattingPattern(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  if ([((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) java_length] >= ComGoogleI18nPhonenumbersAsYouTypeFormatter_MIN_LEADING_DIGITS_LENGTH) {
    ComGoogleI18nPhonenumbersAsYouTypeFormatter_getAvailableFormatsWithNSString_(self, [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) description]);
    NSString *formattedNumber = [self attemptToFormatAccruedDigits];
    if ([((NSString *) nil_chk(formattedNumber)) java_length] > 0) {
      return formattedNumber;
    }
    return ComGoogleI18nPhonenumbersAsYouTypeFormatter_maybeCreateNewTemplate(self) ? ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputAccruedNationalNumber(self) : [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) description];
  }
  else {
    return ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(self, [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) description]);
  }
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputAccruedNationalNumber(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  jint lengthOfNationalNumber = [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) java_length];
  if (lengthOfNationalNumber > 0) {
    NSString *tempNationalNumber = @"";
    for (jint i = 0; i < lengthOfNationalNumber; i++) {
      tempNationalNumber = ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitHelperWithChar_(self, [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) charAtWithInt:i]);
    }
    return self->ableToFormat_ ? ComGoogleI18nPhonenumbersAsYouTypeFormatter_appendNationalNumberWithNSString_(self, tempNationalNumber) : [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) description];
  }
  else {
    return [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) description];
  }
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_isNanpaNumberWithNationalPrefix(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  return ([((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_)) getCountryCode] == 1) && ([((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) charAtWithInt:0] == '1') && ([((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) charAtWithInt:1] != '0') && ([((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) charAtWithInt:1] != '1');
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_removeNationalPrefixFromNationalNumber(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  jint startOfNationalNumber = 0;
  if (ComGoogleI18nPhonenumbersAsYouTypeFormatter_isNanpaNumberWithNationalPrefix(self)) {
    startOfNationalNumber = 1;
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) appendWithChar:'1'])) appendWithChar:ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER];
    self->isCompleteNumber_ = true;
  }
  else if ([((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_)) hasNationalPrefixForParsing]) {
    JavaUtilRegexPattern *nationalPrefixForParsing = [((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:[((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_)) getNationalPrefixForParsing]];
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(nationalPrefixForParsing)) matcherWithJavaLangCharSequence:self->nationalNumber_];
    if ([((JavaUtilRegexMatcher *) nil_chk(m)) lookingAt] && [m end] > 0) {
      self->isCompleteNumber_ = true;
      startOfNationalNumber = [m end];
      [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) appendWithNSString:[((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) substringWithInt:0 withInt:startOfNationalNumber]];
    }
  }
  NSString *nationalPrefix = [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) substringWithInt:0 withInt:startOfNationalNumber];
  [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) delete__WithInt:0 withInt:startOfNationalNumber];
  return nationalPrefix;
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractIdd(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  JavaUtilRegexPattern *internationalPrefix = [((ComGoogleI18nPhonenumbersInternalRegexCache *) nil_chk(self->regexCache_)) getPatternForRegexWithNSString:JreStrcat("CCC$", '\\', ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN, '|', [((ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *) nil_chk(self->currentMetadata_)) getInternationalPrefix])];
  JavaUtilRegexMatcher *iddMatcher = [((JavaUtilRegexPattern *) nil_chk(internationalPrefix)) matcherWithJavaLangCharSequence:self->accruedInputWithoutFormatting_];
  if ([((JavaUtilRegexMatcher *) nil_chk(iddMatcher)) lookingAt]) {
    self->isCompleteNumber_ = true;
    jint startOfCountryCallingCode = [iddMatcher end];
    [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) setLengthWithInt:0];
    [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) appendWithNSString:[((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) substringWithInt:startOfCountryCallingCode]];
    [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) setLengthWithInt:0];
    [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) appendWithNSString:[((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) substringWithInt:0 withInt:startOfCountryCallingCode]];
    if ([((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) charAtWithInt:0] != ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN) {
      [((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) appendWithChar:ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER];
    }
    return true;
  }
  return false;
}

jboolean ComGoogleI18nPhonenumbersAsYouTypeFormatter_attemptToExtractCountryCallingCode(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self) {
  if ([((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) java_length] == 0) {
    return false;
  }
  JavaLangStringBuilder *numberWithoutCountryCallingCode = create_JavaLangStringBuilder_init();
  jint countryCode = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(self->phoneUtil_)) extractCountryCodeWithJavaLangStringBuilder:self->nationalNumber_ withJavaLangStringBuilder:numberWithoutCountryCallingCode];
  if (countryCode == 0) {
    return false;
  }
  [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) appendWithJavaLangCharSequence:numberWithoutCountryCallingCode];
  NSString *newRegionCode = [self->phoneUtil_ getRegionCodeForCountryCodeWithInt:countryCode];
  if ([((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_REGION_CODE_FOR_NON_GEO_ENTITY)) isEqual:newRegionCode]) {
    JreStrongAssign(&self->currentMetadata_, [self->phoneUtil_ getMetadataForNonGeographicalRegionWithInt:countryCode]);
  }
  else if (![((NSString *) nil_chk(newRegionCode)) isEqual:self->defaultCountry_]) {
    JreStrongAssign(&self->currentMetadata_, ComGoogleI18nPhonenumbersAsYouTypeFormatter_getMetadataForRegionWithNSString_(self, newRegionCode));
  }
  NSString *countryCodeString = JavaLangInteger_toStringWithInt_(countryCode);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(self->prefixBeforeNationalNumber_)) appendWithNSString:countryCodeString])) appendWithChar:ComGoogleI18nPhonenumbersAsYouTypeFormatter_SEPARATOR_BEFORE_NATIONAL_NUMBER];
  JreStrongAssign(&self->extractedNationalPrefix_, @"");
  return true;
}

jchar ComGoogleI18nPhonenumbersAsYouTypeFormatter_normalizeAndAccrueDigitsAndPlusSignWithChar_withBoolean_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar, jboolean rememberPosition) {
  jchar normalizedChar;
  if (nextChar == ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_SIGN) {
    normalizedChar = nextChar;
    [((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) appendWithChar:nextChar];
  }
  else {
    jint radix = 10;
    normalizedChar = JavaLangCharacter_forDigitWithInt_withInt_(JavaLangCharacter_digitWithChar_withInt_(nextChar, radix), radix);
    [((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) appendWithChar:normalizedChar];
    [((JavaLangStringBuilder *) nil_chk(self->nationalNumber_)) appendWithChar:normalizedChar];
  }
  if (rememberPosition) {
    self->positionToRemember_ = [((JavaLangStringBuilder *) nil_chk(self->accruedInputWithoutFormatting_)) java_length];
  }
  return normalizedChar;
}

NSString *ComGoogleI18nPhonenumbersAsYouTypeFormatter_inputDigitHelperWithChar_(ComGoogleI18nPhonenumbersAsYouTypeFormatter *self, jchar nextChar) {
  JavaUtilRegexMatcher *digitMatcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersAsYouTypeFormatter_DIGIT_PATTERN)) matcherWithJavaLangCharSequence:self->formattingTemplate_];
  if ([((JavaUtilRegexMatcher *) nil_chk(digitMatcher)) findWithInt:self->lastMatchPosition_]) {
    NSString *tempTemplate = [digitMatcher replaceFirstWithNSString:JavaLangCharacter_toStringWithChar_(nextChar)];
    [((JavaLangStringBuilder *) nil_chk(self->formattingTemplate_)) replaceWithInt:0 withInt:[((NSString *) nil_chk(tempTemplate)) java_length] withNSString:tempTemplate];
    self->lastMatchPosition_ = [digitMatcher start];
    return [((JavaLangStringBuilder *) nil_chk(self->formattingTemplate_)) substringWithInt:0 withInt:self->lastMatchPosition_ + 1];
  }
  else {
    if ([((id<JavaUtilList>) nil_chk(self->possibleFormats_)) size] == 1) {
      self->ableToFormat_ = false;
    }
    JreStrongAssign(&self->currentFormattingPattern_, @"");
    return [((JavaLangStringBuilder *) nil_chk(self->accruedInput_)) description];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersAsYouTypeFormatter)
