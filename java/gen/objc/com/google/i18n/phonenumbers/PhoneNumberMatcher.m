//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/libphonenumber/java/libphonenumber/src/main/java/com/google/i18n/phonenumbers/PhoneNumberMatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/i18n/phonenumbers/MetadataManager.h"
#include "com/google/i18n/phonenumbers/NumberParseException.h"
#include "com/google/i18n/phonenumbers/PhoneNumberMatch.h"
#include "com/google/i18n/phonenumbers/PhoneNumberMatcher.h"
#include "com/google/i18n/phonenumbers/PhoneNumberUtil.h"
#include "com/google/i18n/phonenumbers/Phonemetadata.h"
#include "com/google/i18n/phonenumbers/Phonenumber.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@class ComGoogleI18nPhonenumbersPhoneNumberMatcher_State;

@interface ComGoogleI18nPhonenumbersPhoneNumberMatcher () {
 @public
  /*!
   @brief The phone number utility.
   */
  ComGoogleI18nPhonenumbersPhoneNumberUtil *phoneUtil_;
  /*!
   @brief The text searched for phone numbers.
   */
  id<JavaLangCharSequence> text_;
  /*!
   @brief The region (country) to assume for phone numbers without an international prefix, possibly
  null.
   */
  NSString *preferredRegion_;
  /*!
   @brief The degree of validation requested.
   */
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *leniency_;
  /*!
   @brief The maximum number of retries after matching an invalid number.
   */
  jlong maxTries_;
  /*!
   @brief The iteration tristate.
   */
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *state_;
  /*!
   @brief The last successful match, null unless in <code>State.READY</code>.
   */
  ComGoogleI18nPhonenumbersPhoneNumberMatch *lastMatch_;
  /*!
   @brief The next index to start searching at.Undefined in <code>State.DONE</code>.
   */
  jint searchIndex_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, phoneUtil_, ComGoogleI18nPhonenumbersPhoneNumberUtil *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, text_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, preferredRegion_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, leniency_, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, state_, ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, lastMatch_, ComGoogleI18nPhonenumbersPhoneNumberMatch *)

/*!
 @brief The phone number pattern used by <code>find</code>, similar to 
 <code>PhoneNumberUtil.VALID_PHONE_NUMBER</code>, but with the following differences: 
 <ul>
    <li>All captures are limited in order to place an upper bound to the text matched by the
        pattern.
 <ul>
    <li>Leading punctuation / plus signs are limited.
    <li>Consecutive occurrences of punctuation are limited.
    <li>Number of digits is limited. 
 </ul>
    <li>No whitespace is allowed at the start or end.
    <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported. 
 </ul>
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_PATTERN(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, PATTERN, JavaUtilRegexPattern *)

/*!
 @brief Matches strings that look like publication pages.Example:
  @code
Computing Complete Answers to Queries in the Presence of Limited Access Patterns.
 Chen Li. VLDB J. 12(3): 211-227 (2003).
@endcode
  The string "211-227 (2003)" is not a telephone number.
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_PUB_PAGES(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, PUB_PAGES, JavaUtilRegexPattern *)

/*!
 @brief Matches strings that look like dates using "/" as a separator.Examples: 3/10/2011, 31/10/96 or
  08/31/95.
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_SLASH_SEPARATED_DATES(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, SLASH_SEPARATED_DATES, JavaUtilRegexPattern *)

/*!
 @brief Matches timestamps.Examples: "2012-01-02 08:00".
 Note that the reg-ex does not include the
  trailing ":\d\d" -- that is covered by TIME_STAMPS_SUFFIX.
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_TIME_STAMPS(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, TIME_STAMPS, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_TIME_STAMPS_SUFFIX(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, TIME_STAMPS_SUFFIX, JavaUtilRegexPattern *)

/*!
 @brief Pattern to check that brackets match.Opening brackets should be closed within a phone number.
 This also checks that there is something inside the brackets. Having no brackets at all is also
  fine.
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_MATCHING_BRACKETS(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, MATCHING_BRACKETS, JavaUtilRegexPattern *)

/*!
 @brief Patterns used to extract phone numbers from a larger phone-number-like pattern.These are
  ordered according to specificity.
 For example, white-space is last since that is frequently
  used in numbers, not just to separate two numbers. We have separate patterns since we don't
  want to break up the phone-number-like text on more than one different kind of symbol at one
  time, although symbols of the same type (e.g. space) can be safely grouped together.
  Note that if there is a match, we will always check any text found up to the first match as
  well.
 */
inline IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_INNER_MATCHES(void);
static IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, INNER_MATCHES, IOSObjectArray *)

/*!
 @brief Punctuation that may be at the start of a phone number - brackets and plus signs.
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_LEAD_CLASS(void);
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, LEAD_CLASS, JavaUtilRegexPattern *)

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(jint lower, jint upper);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, jint index);

__attribute__((unused)) static id<JavaLangCharSequence> ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JavaUtilRegexPattern *pattern, id<JavaLangCharSequence> candidate);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(jchar character);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, id<JavaLangCharSequence> candidate, jint offset);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithJavaLangCharSequence_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, id<JavaLangCharSequence> candidate, jint offset);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithJavaLangCharSequence_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, id<JavaLangCharSequence> candidate, jint offset);

__attribute__((unused)) static IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *formattingPattern);

typedef NS_ENUM(NSUInteger, ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_Enum) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_Enum_NOT_READY = 0,
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_Enum_READY = 1,
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_Enum_DONE = 2,
};

/*!
 @brief The potential states of a PhoneNumberMatcher.
 */
@interface ComGoogleI18nPhonenumbersPhoneNumberMatcher_State : JavaLangEnum

@end

J2OBJC_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_[];

inline ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_get_NOT_READY(void);
J2OBJC_ENUM_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, NOT_READY)

inline ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_get_READY(void);
J2OBJC_ENUM_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, READY)

inline ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_get_DONE(void);
J2OBJC_ENUM_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, DONE)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values(void);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberMatcher)

@implementation ComGoogleI18nPhonenumbersPhoneNumberMatcher

- (instancetype __nonnull)initWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                              withNSString:(NSString *)country
                     withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)leniency
                                                                  withLong:(jlong)maxTries {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(self, util, text, country, leniency, maxTries);
  return self;
}

+ (jboolean)isLatinLetterWithChar:(jchar)letter {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(letter);
}

+ (jboolean)allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                           withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                                   withNSStringArray:(IOSObjectArray *)formattedNumberGroups {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(util, number, normalizedCandidate, formattedNumberGroups);
}

+ (jboolean)allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                    withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                               withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                                       withNSStringArray:(IOSObjectArray *)formattedNumberGroups {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(util, number, normalizedCandidate, formattedNumberGroups);
}

+ (jboolean)checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                                              withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                     withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker:(id<ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker>)checker {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangCharSequence_withComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker_(number, candidate, util, checker);
}

+ (jboolean)containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                            withNSString:(NSString *)candidate {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_(number, candidate);
}

+ (jboolean)containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                           withNSString:(NSString *)candidate
                                           withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, candidate, util);
}

+ (jboolean)isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                     withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, util);
}

- (jboolean)hasNext {
  if (state_ == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, NOT_READY)) {
    JreStrongAssign(&lastMatch_, ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(self, searchIndex_));
    if (lastMatch_ == nil) {
      JreStrongAssign(&state_, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, DONE));
    }
    else {
      searchIndex_ = [lastMatch_ end];
      JreStrongAssign(&state_, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, READY));
    }
  }
  return state_ == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, READY);
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)next {
  if (![self hasNext]) {
    @throw create_JavaUtilNoSuchElementException_init();
  }
  ComGoogleI18nPhonenumbersPhoneNumberMatch *result = lastMatch_;
  JreStrongAssign(&lastMatch_, nil);
  JreStrongAssign(&state_, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, NOT_READY));
  return result;
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(phoneUtil_);
  RELEASE_(text_);
  RELEASE_(preferredRegion_);
  RELEASE_(leniency_);
  RELEASE_(state_);
  RELEASE_(lastMatch_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberMatcher class]) {
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES, JavaUtilRegexPattern_compileWithNSString_(@"\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES, JavaUtilRegexPattern_compileWithNSString_(@"(?:(?:[0-3]?\\d/[01]?\\d)|(?:[01]?\\d/[0-3]?\\d))/(?:[12]\\d)?\\d{2}"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS, JavaUtilRegexPattern_compileWithNSString_(@"[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX, JavaUtilRegexPattern_compileWithNSString_(@":[0-5]\\d"));
    JreStrongAssignAndConsume(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES, [IOSObjectArray newArrayWithObjects:(id[]){ JavaUtilRegexPattern_compileWithNSString_(@"/+(.*)"), JavaUtilRegexPattern_compileWithNSString_(@"(\\([^(]*)"), JavaUtilRegexPattern_compileWithNSString_(@"(?:\\p{Z}-|-\\p{Z})\\p{Z}*(.+)"), JavaUtilRegexPattern_compileWithNSString_(@"[\u2012-\u2015\uff0d]\\p{Z}*(.+)"), JavaUtilRegexPattern_compileWithNSString_(@"\\.+\\p{Z}*([^.]+)"), JavaUtilRegexPattern_compileWithNSString_(@"\\p{Z}+(\\P{Z}+)") } count:6 type:JavaUtilRegexPattern_class_()]);
    {
      NSString *openingParens = @"(\\[\uff08\uff3b";
      NSString *closingParens = @")\\]\uff09\uff3d";
      NSString *nonParens = JreStrcat("$$$C", @"[^", openingParens, closingParens, ']');
      NSString *bracketPairLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, 3);
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$$$$$$$$C$$$$$$C", @"(?:[", openingParens, @"])?(?:", nonParens, @"+[", closingParens, @"])?", nonParens, @"+(?:[", openingParens, ']', nonParens, @"+[", closingParens, @"])", bracketPairLimit, nonParens, '*')));
      NSString *leadLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, 2);
      NSString *punctuationLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, 4);
      jint digitBlockLimit = ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_FOR_NSN + ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_COUNTRY_CODE;
      NSString *blockLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, digitBlockLimit);
      NSString *punctuation = JreStrcat("C$C$", '[', ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, ']', punctuationLimit);
      NSString *digitSequence = JreStrcat("$$", @"\\p{Nd}", ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(1, digitBlockLimit));
      NSString *leadClassChars = JreStrcat("$$", openingParens, ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS);
      NSString *leadClass = JreStrcat("C$C", '[', leadClassChars, ']');
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS, JavaUtilRegexPattern_compileWithNSString_(leadClass));
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN, JavaUtilRegexPattern_compileWithNSString_withInt_(JreStrcat("$$$C$$$$$C$$$$", @"(?:", leadClass, punctuation, ')', leadLimit, digitSequence, @"(?:", punctuation, digitSequence, ')', blockLimit, @"(?:", JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, EXTN_PATTERNS_FOR_MATCHING), @")?"), ComGoogleI18nPhonenumbersPhoneNumberUtil_REGEX_FLAGS));
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberMatcher)
  }
}

@end

NSString *ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(jint lower, jint upper) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if ((lower < 0) || (upper <= 0) || (upper < lower)) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  return JreStrcat("CICIC", '{', lower, ',', upper, '}');
}

void ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, ComGoogleI18nPhonenumbersPhoneNumberUtil *util, id<JavaLangCharSequence> text, NSString *country, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *leniency, jlong maxTries) {
  NSObject_init(self);
  JreStrongAssign(&self->state_, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, NOT_READY));
  JreStrongAssign(&self->lastMatch_, nil);
  self->searchIndex_ = 0;
  if ((util == nil) || (leniency == nil)) {
    @throw create_JavaLangNullPointerException_init();
  }
  if (maxTries < 0) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  JreStrongAssign(&self->phoneUtil_, util);
  JreStrongAssign(&self->text_, (text != nil) ? text : (id) @"");
  JreStrongAssign(&self->preferredRegion_, country);
  JreStrongAssign(&self->leniency_, leniency);
  self->maxTries_ = maxTries;
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher *new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, id<JavaLangCharSequence> text, NSString *country, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *leniency, jlong maxTries) {
  J2OBJC_NEW_IMPL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_, util, text, country, leniency, maxTries)
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher *create_ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, id<JavaLangCharSequence> text, NSString *country, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *leniency, jlong maxTries) {
  J2OBJC_CREATE_IMPL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_, util, text, country, leniency, maxTries)
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, jint index) {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN)) matcherWithJavaLangCharSequence:self->text_];
  while ((self->maxTries_ > 0) && [((JavaUtilRegexMatcher *) nil_chk(matcher)) findWithInt:index]) {
    jint start = [((JavaUtilRegexMatcher *) nil_chk(matcher)) start];
    id<JavaLangCharSequence> candidate = [((id<JavaLangCharSequence>) nil_chk(self->text_)) subSequenceFrom:start to:[matcher end]];
    candidate = ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, SECOND_NUMBER_START_PATTERN), candidate);
    ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(self, candidate, start);
    if (match != nil) {
      return match;
    }
    index = start + [((id<JavaLangCharSequence>) nil_chk(candidate)) java_length];
    self->maxTries_--;
  }
  return nil;
}

id<JavaLangCharSequence> ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JavaUtilRegexPattern *pattern, id<JavaLangCharSequence> candidate) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  JavaUtilRegexMatcher *trailingCharsMatcher = [((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:candidate];
  if ([((JavaUtilRegexMatcher *) nil_chk(trailingCharsMatcher)) find]) {
    candidate = [((id<JavaLangCharSequence>) nil_chk(candidate)) subSequenceFrom:0 to:[trailingCharsMatcher start]];
  }
  return candidate;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(jchar letter) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if (!JavaLangCharacter_isLetterWithChar_(letter) && JavaLangCharacter_getTypeWithChar_(letter) != JavaLangCharacter_NON_SPACING_MARK) {
    return false;
  }
  JavaLangCharacter_UnicodeBlock *block = JavaLangCharacter_UnicodeBlock_ofWithChar_(letter);
  return [((JavaLangCharacter_UnicodeBlock *) nil_chk(block)) isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, BASIC_LATIN)] || [block isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, LATIN_1_SUPPLEMENT)] || [block isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_A)] || [block isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_ADDITIONAL)] || [block isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_B)] || [block isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, COMBINING_DIACRITICAL_MARKS)];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(jchar character) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  return character == '%' || JavaLangCharacter_getTypeWithChar_(character) == JavaLangCharacter_CURRENCY_SYMBOL;
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, id<JavaLangCharSequence> candidate, jint offset) {
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES)) matcherWithJavaLangCharSequence:candidate])) find]) {
    return nil;
  }
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS)) matcherWithJavaLangCharSequence:candidate])) find]) {
    NSString *followingText = [((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(self->text_)) description])) java_substring:offset + [((id<JavaLangCharSequence>) nil_chk(candidate)) java_length]];
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX)) matcherWithJavaLangCharSequence:followingText])) lookingAt]) {
      return nil;
    }
  }
  ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithJavaLangCharSequence_withInt_(self, candidate, offset);
  if (match != nil) {
    return match;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithJavaLangCharSequence_withInt_(self, candidate, offset);
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithJavaLangCharSequence_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, id<JavaLangCharSequence> candidate, jint offset) {
  {
    IOSObjectArray *a__ = ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES;
    JavaUtilRegexPattern * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaUtilRegexPattern * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaUtilRegexPattern *possibleInnerMatch = *b__++;
      JavaUtilRegexMatcher *groupMatcher = [((JavaUtilRegexPattern *) nil_chk(possibleInnerMatch)) matcherWithJavaLangCharSequence:candidate];
      jboolean isFirstMatch = true;
      while ([((JavaUtilRegexMatcher *) nil_chk(groupMatcher)) find] && self->maxTries_ > 0) {
        if (isFirstMatch) {
          id<JavaLangCharSequence> group = ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, UNWANTED_END_CHAR_PATTERN), [((id<JavaLangCharSequence>) nil_chk(candidate)) subSequenceFrom:0 to:[groupMatcher start]]);
          ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithJavaLangCharSequence_withInt_(self, group, offset);
          if (match != nil) {
            return match;
          }
          self->maxTries_--;
          isFirstMatch = false;
        }
        id<JavaLangCharSequence> group = ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, UNWANTED_END_CHAR_PATTERN), [groupMatcher groupWithInt:1]);
        ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithJavaLangCharSequence_withInt_(self, group, offset + [groupMatcher startWithInt:1]);
        if (match != nil) {
          return match;
        }
        self->maxTries_--;
      }
    }
  }
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithJavaLangCharSequence_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, id<JavaLangCharSequence> candidate, jint offset) {
  @try {
    if (![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS)) matcherWithJavaLangCharSequence:candidate])) matches] || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES)) matcherWithJavaLangCharSequence:candidate])) find]) {
      return nil;
    }
    if ([((ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *) nil_chk(self->leniency_)) compareToWithId:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, VALID)] >= 0) {
      if (offset > 0 && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS)) matcherWithJavaLangCharSequence:candidate])) lookingAt]) {
        jchar previousChar = [((id<JavaLangCharSequence>) nil_chk(self->text_)) charAtWithInt:offset - 1];
        if (ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(previousChar) || ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(previousChar)) {
          return nil;
        }
      }
      jint lastCharIndex = offset + [((id<JavaLangCharSequence>) nil_chk(candidate)) java_length];
      if (lastCharIndex < [((id<JavaLangCharSequence>) nil_chk(self->text_)) java_length]) {
        jchar nextChar = [self->text_ charAtWithInt:lastCharIndex];
        if (ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(nextChar) || ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(nextChar)) {
          return nil;
        }
      }
    }
    ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(self->phoneUtil_)) parseAndKeepRawInputWithJavaLangCharSequence:candidate withNSString:self->preferredRegion_];
    if ([((NSString *) nil_chk([self->phoneUtil_ getRegionCodeForCountryCodeWithInt:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode]])) isEqual:@"IL"] && [((NSString *) nil_chk([self->phoneUtil_ getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number])) java_length] == 4 && (offset == 0 || (offset > 0 && [((id<JavaLangCharSequence>) nil_chk(self->text_)) charAtWithInt:offset - 1] != '*'))) {
      return nil;
    }
    if ([self->leniency_ verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaLangCharSequence:candidate withComGoogleI18nPhonenumbersPhoneNumberUtil:self->phoneUtil_]) {
      [number clearCountryCodeSource];
      [number clearRawInput];
      [number clearPreferredDomesticCarrierCode];
      return create_ComGoogleI18nPhonenumbersPhoneNumberMatch_initWithInt_withNSString_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(offset, [((id<JavaLangCharSequence>) nil_chk(candidate)) description], number);
    }
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
  }
  return nil;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, JavaLangStringBuilder *normalizedCandidate, IOSObjectArray *formattedNumberGroups) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  jint fromIndex = 0;
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCodeSource] != JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_DEFAULT_COUNTRY)) {
    NSString *countryCode = JavaLangInteger_toStringWithInt_([number getCountryCode]);
    fromIndex = [((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) indexOfWithNSString:countryCode] + [((NSString *) nil_chk(countryCode)) java_length];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(formattedNumberGroups))->size_; i++) {
    fromIndex = [((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) indexOfWithNSString:IOSObjectArray_Get(formattedNumberGroups, i) withInt:fromIndex];
    if (fromIndex < 0) {
      return false;
    }
    fromIndex += [((NSString *) nil_chk(IOSObjectArray_Get(formattedNumberGroups, i))) java_length];
    if (i == 0 && fromIndex < [normalizedCandidate java_length]) {
      NSString *region = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getRegionCodeForCountryCodeWithInt:[number getCountryCode]];
      if ([util getNddPrefixForRegionWithNSString:region withBoolean:true] != nil && JavaLangCharacter_isDigitWithChar_([normalizedCandidate charAtWithInt:fromIndex])) {
        NSString *nationalSignificantNumber = [util getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
        return [((NSString *) nil_chk([normalizedCandidate substringWithInt:fromIndex - [((NSString *) nil_chk(IOSObjectArray_Get(formattedNumberGroups, i))) java_length]])) java_hasPrefix:nationalSignificantNumber];
      }
    }
  }
  return [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) substringWithInt:fromIndex])) java_contains:[number getExtension]];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, JavaLangStringBuilder *normalizedCandidate, IOSObjectArray *formattedNumberGroups) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  IOSObjectArray *candidateGroups = [((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, NON_DIGITS_PATTERN))) splitWithJavaLangCharSequence:[((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) description]];
  jint candidateNumberGroupIndex = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) hasExtension] ? ((IOSObjectArray *) nil_chk(candidateGroups))->size_ - 2 : ((IOSObjectArray *) nil_chk(candidateGroups))->size_ - 1;
  if (candidateGroups->size_ == 1 || [((NSString *) nil_chk(IOSObjectArray_Get(candidateGroups, candidateNumberGroupIndex))) java_contains:[((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number]]) {
    return true;
  }
  for (jint formattedNumberGroupIndex = (((IOSObjectArray *) nil_chk(formattedNumberGroups))->size_ - 1); formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0; formattedNumberGroupIndex--, candidateNumberGroupIndex--) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(candidateGroups, candidateNumberGroupIndex))) isEqual:IOSObjectArray_Get(formattedNumberGroups, formattedNumberGroupIndex)]) {
      return false;
    }
  }
  return (candidateNumberGroupIndex >= 0 && [((NSString *) nil_chk(IOSObjectArray_Get(candidateGroups, candidateNumberGroupIndex))) java_hasSuffix:IOSObjectArray_Get(formattedNumberGroups, 0)]);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *formattingPattern) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if (formattingPattern == nil) {
    NSString *rfc3966Format = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, RFC3966)];
    jint endIndex = [((NSString *) nil_chk(rfc3966Format)) java_indexOf:';'];
    if (endIndex < 0) {
      endIndex = [rfc3966Format java_length];
    }
    jint startIndex = [rfc3966Format java_indexOf:'-'] + 1;
    return [((NSString *) nil_chk([rfc3966Format java_substring:startIndex endIndex:endIndex])) java_split:@"-"];
  }
  else {
    NSString *nationalSignificantNumber = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
    return [((NSString *) nil_chk([util formatNsnUsingPatternWithNSString:nationalSignificantNumber withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat:formattingPattern withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, RFC3966)])) java_split:@"-"];
  }
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangCharSequence_withComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, id<JavaLangCharSequence> candidate, ComGoogleI18nPhonenumbersPhoneNumberUtil *util, id<ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker> checker) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  JavaLangStringBuilder *normalizedCandidate = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsWithJavaLangCharSequence_withBoolean_(candidate, true);
  IOSObjectArray *formattedNumberGroups = ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_(util, number, nil);
  if ([((id<ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker>) nil_chk(checker)) checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:util withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaLangStringBuilder:normalizedCandidate withNSStringArray:formattedNumberGroups]) {
    return true;
  }
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *alternateFormats = ComGoogleI18nPhonenumbersMetadataManager_getAlternateFormatsForCountryWithInt_([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode]);
  if (alternateFormats != nil) {
    for (ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat * __strong alternateFormat in nil_chk([alternateFormats numberFormats])) {
      formattedNumberGroups = ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhonemetadata_NumberFormat_(util, number, alternateFormat);
      if ([checker checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:util withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaLangStringBuilder:normalizedCandidate withNSStringArray:formattedNumberGroups]) {
        return true;
      }
    }
  }
  return false;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, NSString *candidate) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  jint firstSlashInBodyIndex = [((NSString *) nil_chk(candidate)) java_indexOf:'/'];
  if (firstSlashInBodyIndex < 0) {
    return false;
  }
  jint secondSlashInBodyIndex = [candidate java_indexOf:'/' fromIndex:firstSlashInBodyIndex + 1];
  if (secondSlashInBodyIndex < 0) {
    return false;
  }
  jboolean candidateHasCountryCode = ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCodeSource] == JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_NUMBER_WITH_PLUS_SIGN) || [number getCountryCodeSource] == JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_NUMBER_WITHOUT_PLUS_SIGN));
  if (candidateHasCountryCode && [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithJavaLangCharSequence_([candidate java_substring:0 endIndex:firstSlashInBodyIndex]))) isEqual:JavaLangInteger_toStringWithInt_([number getCountryCode])]) {
    return [((NSString *) nil_chk([candidate java_substring:secondSlashInBodyIndex + 1])) java_contains:@"/"];
  }
  return true;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, NSString *candidate, ComGoogleI18nPhonenumbersPhoneNumberUtil *util) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  for (jint index = 0; index < [((NSString *) nil_chk(candidate)) java_length] - 1; index++) {
    jchar charAtIndex = [candidate charAtWithInt:index];
    if (charAtIndex == 'x' || charAtIndex == 'X') {
      jchar charAtNextIndex = [candidate charAtWithInt:index + 1];
      if (charAtNextIndex == 'x' || charAtNextIndex == 'X') {
        index++;
        if ([((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaLangCharSequence:[candidate java_substring:index]] != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NSN_MATCH)) {
          return false;
        }
      }
      else if (![((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithJavaLangCharSequence_([candidate java_substring:index]))) isEqual:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getExtension]]) {
        return false;
      }
    }
  }
  return true;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersPhoneNumberUtil *util) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCodeSource] != JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_DEFAULT_COUNTRY)) {
    return true;
  }
  NSString *phoneNumberRegion = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getRegionCodeForCountryCodeWithInt:[number getCountryCode]];
  ComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata *metadata = [util getMetadataForRegionWithNSString:phoneNumberRegion];
  if (metadata == nil) {
    return true;
  }
  NSString *nationalNumber = [util getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *formatRule = [util chooseFormattingPatternForNumberWithJavaUtilList:[metadata numberFormats] withNSString:nationalNumber];
  if ((formatRule != nil) && [((NSString *) nil_chk([((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *) nil_chk(formatRule)) getNationalPrefixFormattingRule])) java_length] > 0) {
    if ([((ComGoogleI18nPhonenumbersPhonemetadata_NumberFormat *) nil_chk(formatRule)) getNationalPrefixOptionalWhenFormatting]) {
      return true;
    }
    if (ComGoogleI18nPhonenumbersPhoneNumberUtil_formattingRuleHasFirstGroupOnlyWithNSString_([formatRule getNationalPrefixFormattingRule])) {
      return true;
    }
    NSString *rawInputCopy = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithJavaLangCharSequence_([number getRawInput]);
    JavaLangStringBuilder *rawInput = create_JavaLangStringBuilder_initWithNSString_(rawInputCopy);
    return [util maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:rawInput withComGoogleI18nPhonenumbersPhonemetadata_PhoneMetadata:metadata withJavaLangStringBuilder:nil];
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberMatcher)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State)

ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_[3];

@implementation ComGoogleI18nPhonenumbersPhoneNumberMatcher_State

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberMatcher_State class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"NOT_READY", @"READY", @"DONE",
    };
    for (jint i = 0; i < 3; i++) {
      ((void)(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State)
  }
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values() {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_ count:3 type:ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initialize();
  for (int i = 0; i < 3; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *e = ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State)

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker)
