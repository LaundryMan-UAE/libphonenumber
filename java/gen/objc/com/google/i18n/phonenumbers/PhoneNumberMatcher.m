//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/libphonenumber/java/libphonenumber/src/main/java/com/google/i18n/phonenumbers/PhoneNumberMatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/i18n/phonenumbers/MetadataManager.h"
#include "com/google/i18n/phonenumbers/NumberParseException.h"
#include "com/google/i18n/phonenumbers/PhoneNumberMatch.h"
#include "com/google/i18n/phonenumbers/PhoneNumberMatcher.h"
#include "com/google/i18n/phonenumbers/PhoneNumberUtil.h"
#include "com/google/i18n/phonenumbers/Phonenumber.h"
#include "com/google/i18n/phonenumbers/nano/Phonemetadata.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@class ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum;

@interface ComGoogleI18nPhonenumbersPhoneNumberMatcher () {
 @public
  /**
   @brief The phone number utility.
   */
  ComGoogleI18nPhonenumbersPhoneNumberUtil *phoneUtil_;
  /**
   @brief The text searched for phone numbers.
   */
  id<JavaLangCharSequence> text_;
  /**
   @brief The region (country) to assume for phone numbers without an international prefix, possibly null.
   */
  NSString *preferredRegion_;
  /**
   @brief The degree of validation requested.
   */
  ComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum *leniency_;
  /**
   @brief The maximum number of retries after matching an invalid number.
   */
  jlong maxTries_;
  /**
   @brief The iteration tristate.
   */
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *state_;
  /**
   @brief The last successful match, null unless in State#READY .
   */
  ComGoogleI18nPhonenumbersPhoneNumberMatch *lastMatch_;
  /**
   @brief The next index to start searching at.
   Undefined in State#DONE .
   */
  jint searchIndex_;
}

/**
 @brief Returns a regular expression quantifier with an upper and lower limit.
 */
+ (NSString *)limitWithInt:(jint)lower
                   withInt:(jint)upper;

/**
 @brief Attempts to find the next subsequence in the searched sequence on or after <code>searchIndex</code> that represents a phone number.
 Returns the next match, null if none was found.
 @param index the search index to start searching at
 @return the phone number match found, null if none can be found
 */
- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)findWithInt:(jint)index;

/**
 @brief Trims away any characters after the first match of <code>pattern</code> in <code>candidate</code> , returning the trimmed version.
 */
+ (id<JavaLangCharSequence>)trimAfterFirstMatchWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                               withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate;

+ (jboolean)isInvalidPunctuationSymbolWithChar:(jchar)character;

/**
 @brief Attempts to extract a match from a <code>candidate</code> character sequence.
 @param candidate the candidate text that might contain a phone number
 @param offset the offset of <code>candidate</code> within #text
 @return the match found, null if none can be found
 */
- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)extractMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                                                                            withInt:(jint)offset;

/**
 @brief Attempts to extract a match from <code>candidate</code> if the whole candidate does not qualify as a match.
 @param candidate the candidate text that might contain a phone number
 @param offset the current offset of <code>candidate</code> within #text
 @return the match found, null if none can be found
 */
- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)extractInnerMatchWithNSString:(NSString *)candidate
                                                                     withInt:(jint)offset;

/**
 @brief Parses a phone number from the <code>candidate</code> using PhoneNumberUtil#parse and verifies it matches the requested #leniency .
 If parsing and verification succeed, a corresponding PhoneNumberMatch is returned, otherwise this method returns null.
 @param candidate the candidate match
 @param offset the offset of <code>candidate</code> within #text
 @return the parsed and validated phone number match, or null
 */
- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)parseAndVerifyWithNSString:(NSString *)candidate
                                                                  withInt:(jint)offset;

/**
 @brief Helper method to get the national-number part of a number, formatted without any national prefix, and return it as a set of digit blocks that would be formatted together.
 */
+ (IOSObjectArray *)getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                   withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                            withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)formattingPattern;

@end

J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, phoneUtil_, ComGoogleI18nPhonenumbersPhoneNumberUtil *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, text_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, preferredRegion_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, leniency_, ComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, state_, ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, lastMatch_, ComGoogleI18nPhonenumbersPhoneNumberMatch *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, PATTERN_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, PUB_PAGES_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, SLASH_SEPARATED_DATES_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, TIME_STAMPS_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, TIME_STAMPS_SUFFIX_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, MATCHING_BRACKETS_, JavaUtilRegexPattern *)

static IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, INNER_MATCHES_, IOSObjectArray *)

static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, LEAD_CLASS_, JavaUtilRegexPattern *)

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(jint lower, jint upper);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, jint index);

__attribute__((unused)) static id<JavaLangCharSequence> ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JavaUtilRegexPattern *pattern, id<JavaLangCharSequence> candidate);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(jchar character);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, id<JavaLangCharSequence> candidate, jint offset);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, NSString *candidate, jint offset);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, NSString *candidate, jint offset);

__attribute__((unused)) static IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formattingPattern);

typedef NS_ENUM(NSUInteger, ComGoogleI18nPhonenumbersPhoneNumberMatcher_State) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_NOT_READY = 0,
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_READY = 1,
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_DONE = 2,
};

/**
 @brief The potential states of a PhoneNumberMatcher.
 */
@interface ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_values();

+ (ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum)

FOUNDATION_EXPORT ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_values_[];

#define ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_NOT_READY ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_values_[ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_NOT_READY]
J2OBJC_ENUM_CONSTANT_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum, NOT_READY)

#define ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_READY ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_values_[ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_READY]
J2OBJC_ENUM_CONSTANT_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum, READY)

#define ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_DONE ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_values_[ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_DONE]
J2OBJC_ENUM_CONSTANT_GETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum, DONE)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum)

@interface ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker : NSObject

@end

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberMatcher)

@implementation ComGoogleI18nPhonenumbersPhoneNumberMatcher

+ (NSString *)limitWithInt:(jint)lower
                   withInt:(jint)upper {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(lower, upper);
}

- (instancetype)initWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                    withNSString:(NSString *)country
       withComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum:(ComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum *)leniency
                                                        withLong:(jlong)maxTries {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum_withLong_(self, util, text, country, leniency, maxTries);
  return self;
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)findWithInt:(jint)index {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(self, index);
}

+ (id<JavaLangCharSequence>)trimAfterFirstMatchWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                               withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(pattern, candidate);
}

+ (jboolean)isLatinLetterWithChar:(jchar)letter {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(letter);
}

+ (jboolean)isInvalidPunctuationSymbolWithChar:(jchar)character {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(character);
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)extractMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                                                                            withInt:(jint)offset {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(self, candidate, offset);
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)extractInnerMatchWithNSString:(NSString *)candidate
                                                                     withInt:(jint)offset {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithNSString_withInt_(self, candidate, offset);
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)parseAndVerifyWithNSString:(NSString *)candidate
                                                                  withInt:(jint)offset {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(self, candidate, offset);
}

+ (jboolean)allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                           withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                                   withNSStringArray:(IOSObjectArray *)formattedNumberGroups {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(util, number, normalizedCandidate, formattedNumberGroups);
}

+ (jboolean)allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                    withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                               withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                                       withNSStringArray:(IOSObjectArray *)formattedNumberGroups {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(util, number, normalizedCandidate, formattedNumberGroups);
}

+ (IOSObjectArray *)getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                   withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                            withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)formattingPattern {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(util, number, formattingPattern);
}

+ (jboolean)checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                              withNSString:(NSString *)candidate
                                              withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                     withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker:(id<ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker>)checker {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker_(number, candidate, util, checker);
}

+ (jboolean)containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                            withNSString:(NSString *)candidate {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_(number, candidate);
}

+ (jboolean)containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                           withNSString:(NSString *)candidate
                                           withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, candidate, util);
}

+ (jboolean)isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                     withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, util);
}

- (jboolean)hasNext {
  if (state_ == ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_get_NOT_READY()) {
    ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_lastMatch_(self, ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(self, searchIndex_));
    if (lastMatch_ == nil) {
      ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_state_(self, ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_get_DONE());
    }
    else {
      searchIndex_ = [lastMatch_ end];
      ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_state_(self, ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_get_READY());
    }
  }
  return state_ == ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_get_READY();
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)next {
  if (![self hasNext]) {
    @throw [new_JavaUtilNoSuchElementException_init() autorelease];
  }
  ComGoogleI18nPhonenumbersPhoneNumberMatch *result = lastMatch_;
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_lastMatch_(self, nil);
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_state_(self, ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_get_NOT_READY());
  return result;
}

- (void)remove {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (void)dealloc {
  RELEASE_(phoneUtil_);
  RELEASE_(text_);
  RELEASE_(preferredRegion_);
  RELEASE_(leniency_);
  RELEASE_(state_);
  RELEASE_(lastMatch_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberMatcher class]) {
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES_, nil, JavaUtilRegexPattern_compileWithNSString_(@"\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES_, nil, JavaUtilRegexPattern_compileWithNSString_(@"(?:(?:[0-3]?\\d/[01]?\\d)|(?:[01]?\\d/[0-3]?\\d))/(?:[12]\\d)?\\d{2}"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_, nil, JavaUtilRegexPattern_compileWithNSString_(@"[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX_, nil, JavaUtilRegexPattern_compileWithNSString_(@":[0-5]\\d"));
    JreStrongAssignAndConsume(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ JavaUtilRegexPattern_compileWithNSString_(@"/+(.*)"), JavaUtilRegexPattern_compileWithNSString_(@"(\\([^(]*)"), JavaUtilRegexPattern_compileWithNSString_(@"(?:\\p{Z}-|-\\p{Z})\\p{Z}*(.+)"), JavaUtilRegexPattern_compileWithNSString_(@"[\u2012-\u2015\uff0d]\\p{Z}*(.+)"), JavaUtilRegexPattern_compileWithNSString_(@"\\.+\\p{Z}*([^.]+)"), JavaUtilRegexPattern_compileWithNSString_(@"\\p{Z}+(\\P{Z}+)") } count:6 type:JavaUtilRegexPattern_class_()]);
    {
      NSString *openingParens = @"(\\[\uff08\uff3b";
      NSString *closingParens = @")\\]\uff09\uff3d";
      NSString *nonParens = JreStrcat("$$$C", @"[^", openingParens, closingParens, ']');
      NSString *bracketPairLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, 3);
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS_, nil, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$$$$$$$$C$$$$$$C", @"(?:[", openingParens, @"])?(?:", nonParens, @"+[", closingParens, @"])?", nonParens, @"+(?:[", openingParens, ']', nonParens, @"+[", closingParens, @"])", bracketPairLimit, nonParens, '*')));
      NSString *leadLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, 2);
      NSString *punctuationLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, 4);
      jint digitBlockLimit = ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_FOR_NSN + ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_COUNTRY_CODE;
      NSString *blockLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, digitBlockLimit);
      NSString *punctuation = JreStrcat("C$C$", '[', ComGoogleI18nPhonenumbersPhoneNumberUtil_get_VALID_PUNCTUATION_(), ']', punctuationLimit);
      NSString *digitSequence = JreStrcat("$$", @"\\p{Nd}", ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(1, digitBlockLimit));
      NSString *leadClassChars = JreStrcat("$$", openingParens, ComGoogleI18nPhonenumbersPhoneNumberUtil_get_PLUS_CHARS_());
      NSString *leadClass = JreStrcat("C$C", '[', leadClassChars, ']');
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS_, nil, JavaUtilRegexPattern_compileWithNSString_(leadClass));
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN_, nil, JavaUtilRegexPattern_compileWithNSString_withInt_(JreStrcat("$$$C$$$$$C$$$$", @"(?:", leadClass, punctuation, ')', leadLimit, digitSequence, @"(?:", punctuation, digitSequence, ')', blockLimit, @"(?:", ComGoogleI18nPhonenumbersPhoneNumberUtil_get_EXTN_PATTERNS_FOR_MATCHING_(), @")?"), ComGoogleI18nPhonenumbersPhoneNumberUtil_REGEX_FLAGS));
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberMatcher)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "limitWithInt:withInt:", "limit", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "initWithComGoogleI18nPhonenumbersPhoneNumberUtil:withJavaLangCharSequence:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum:withLong:", "PhoneNumberMatcher", NULL, 0x0, NULL, NULL },
    { "findWithInt:", "find", "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", 0x2, NULL, NULL },
    { "trimAfterFirstMatchWithJavaUtilRegexPattern:withJavaLangCharSequence:", "trimAfterFirstMatch", "Ljava.lang.CharSequence;", 0xa, NULL, NULL },
    { "isLatinLetterWithChar:", "isLatinLetter", "Z", 0x8, NULL, NULL },
    { "isInvalidPunctuationSymbolWithChar:", "isInvalidPunctuationSymbol", "Z", 0xa, NULL, NULL },
    { "extractMatchWithJavaLangCharSequence:withInt:", "extractMatch", "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", 0x2, NULL, NULL },
    { "extractInnerMatchWithNSString:withInt:", "extractInnerMatch", "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", 0x2, NULL, NULL },
    { "parseAndVerifyWithNSString:withInt:", "parseAndVerify", "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", 0x2, NULL, NULL },
    { "allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangStringBuilder:withNSStringArray:", "allNumberGroupsRemainGrouped", "Z", 0x8, NULL, NULL },
    { "allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangStringBuilder:withNSStringArray:", "allNumberGroupsAreExactlyPresent", "Z", 0x8, NULL, NULL },
    { "getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:", "getNationalNumberGroups", "[Ljava.lang.String;", 0xa, NULL, NULL },
    { "checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker:", "checkNumberGroupingIsValid", "Z", 0x8, NULL, NULL },
    { "containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:", "containsMoreThanOneSlashInNationalNumber", "Z", 0x8, NULL, NULL },
    { "containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:", "containsOnlyValidXChars", "Z", 0x8, NULL, NULL },
    { "isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhoneNumberUtil:", "isNationalPrefixPresentIfRequired", "Z", 0x8, NULL, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PATTERN_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN_, NULL,  },
    { "PUB_PAGES_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES_, NULL,  },
    { "SLASH_SEPARATED_DATES_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES_, NULL,  },
    { "TIME_STAMPS_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_, NULL,  },
    { "TIME_STAMPS_SUFFIX_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX_, NULL,  },
    { "MATCHING_BRACKETS_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS_, NULL,  },
    { "INNER_MATCHES_", NULL, 0x1a, "[Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES_, NULL,  },
    { "LEAD_CLASS_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS_, NULL,  },
    { "phoneUtil_", NULL, 0x12, "Lcom.google.i18n.phonenumbers.PhoneNumberUtil;", NULL, NULL,  },
    { "text_", NULL, 0x12, "Ljava.lang.CharSequence;", NULL, NULL,  },
    { "preferredRegion_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "leniency_", NULL, 0x12, "Lcom.google.i18n.phonenumbers.PhoneNumberUtil$Leniency;", NULL, NULL,  },
    { "maxTries_", NULL, 0x2, "J", NULL, NULL,  },
    { "state_", NULL, 0x2, "Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;", NULL, NULL,  },
    { "lastMatch_", NULL, 0x2, "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", NULL, NULL,  },
    { "searchIndex_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;", "Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$NumberGroupingChecker;"};
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberMatcher = { 2, "PhoneNumberMatcher", "com.google.i18n.phonenumbers", NULL, 0x10, 19, methods, 16, fields, 0, NULL, 2, inner_classes, NULL, "Ljava/lang/Object;Ljava/util/Iterator<Lcom/google/i18n/phonenumbers/PhoneNumberMatch;>;" };
  return &_ComGoogleI18nPhonenumbersPhoneNumberMatcher;
}

@end

NSString *ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(jint lower, jint upper) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if ((lower < 0) || (upper <= 0) || (upper < lower)) {
    @throw [new_JavaLangIllegalArgumentException_init() autorelease];
  }
  return JreStrcat("CICIC", '{', lower, ',', upper, '}');
}

void ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum_withLong_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, ComGoogleI18nPhonenumbersPhoneNumberUtil *util, id<JavaLangCharSequence> text, NSString *country, ComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum *leniency, jlong maxTries) {
  NSObject_init(self);
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_state_(self, ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_get_NOT_READY());
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_lastMatch_(self, nil);
  self->searchIndex_ = 0;
  if ((util == nil) || (leniency == nil)) {
    @throw [new_JavaLangNullPointerException_init() autorelease];
  }
  if (maxTries < 0) {
    @throw [new_JavaLangIllegalArgumentException_init() autorelease];
  }
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_phoneUtil_(self, util);
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_text_(self, (text != nil) ? ((id) text) : @"");
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_preferredRegion_(self, country);
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_set_leniency_(self, leniency);
  self->maxTries_ = maxTries;
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher *new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, id<JavaLangCharSequence> text, NSString *country, ComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum *leniency, jlong maxTries) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher *self = [ComGoogleI18nPhonenumbersPhoneNumberMatcher alloc];
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum_withLong_(self, util, text, country, leniency, maxTries);
  return self;
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, jint index) {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN_)) matcherWithJavaLangCharSequence:self->text_];
  while ((self->maxTries_ > 0) && [((JavaUtilRegexMatcher *) nil_chk(matcher)) findWithInt:index]) {
    jint start = [((JavaUtilRegexMatcher *) nil_chk(matcher)) start];
    id<JavaLangCharSequence> candidate = [((id<JavaLangCharSequence>) nil_chk(self->text_)) subSequenceFrom:start to:[matcher end]];
    candidate = ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(ComGoogleI18nPhonenumbersPhoneNumberUtil_get_SECOND_NUMBER_START_PATTERN_(), candidate);
    ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(self, candidate, start);
    if (match != nil) {
      return match;
    }
    index = start + [((id<JavaLangCharSequence>) nil_chk(candidate)) length];
    self->maxTries_--;
  }
  return nil;
}

id<JavaLangCharSequence> ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JavaUtilRegexPattern *pattern, id<JavaLangCharSequence> candidate) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  JavaUtilRegexMatcher *trailingCharsMatcher = [((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:candidate];
  if ([((JavaUtilRegexMatcher *) nil_chk(trailingCharsMatcher)) find]) {
    candidate = [((id<JavaLangCharSequence>) nil_chk(candidate)) subSequenceFrom:0 to:[trailingCharsMatcher start]];
  }
  return candidate;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(jchar letter) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if (!JavaLangCharacter_isLetterWithChar_(letter) && JavaLangCharacter_getTypeWithChar_(letter) != JavaLangCharacter_NON_SPACING_MARK) {
    return NO;
  }
  JavaLangCharacter_UnicodeBlock *block = JavaLangCharacter_UnicodeBlock_ofWithChar_(letter);
  return [((JavaLangCharacter_UnicodeBlock *) nil_chk(block)) isEqual:JavaLangCharacter_UnicodeBlock_get_BASIC_LATIN_()] || [block isEqual:JavaLangCharacter_UnicodeBlock_get_LATIN_1_SUPPLEMENT_()] || [block isEqual:JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_A_()] || [block isEqual:JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_ADDITIONAL_()] || [block isEqual:JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_B_()] || [block isEqual:JavaLangCharacter_UnicodeBlock_get_COMBINING_DIACRITICAL_MARKS_()];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(jchar character) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  return character == '%' || JavaLangCharacter_getTypeWithChar_(character) == JavaLangCharacter_CURRENCY_SYMBOL;
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, id<JavaLangCharSequence> candidate, jint offset) {
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES_)) matcherWithJavaLangCharSequence:candidate])) find]) {
    return nil;
  }
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_)) matcherWithJavaLangCharSequence:candidate])) find]) {
    NSString *followingText = [((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(self->text_)) description])) substring:offset + [((id<JavaLangCharSequence>) nil_chk(candidate)) length]];
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX_)) matcherWithJavaLangCharSequence:followingText])) lookingAt]) {
      return nil;
    }
  }
  NSString *rawString = [((id<JavaLangCharSequence>) nil_chk(candidate)) description];
  ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(self, rawString, offset);
  if (match != nil) {
    return match;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithNSString_withInt_(self, rawString, offset);
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, NSString *candidate, jint offset) {
  {
    IOSObjectArray *a__ = ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES_;
    JavaUtilRegexPattern * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaUtilRegexPattern * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaUtilRegexPattern *possibleInnerMatch = *b__++;
      JavaUtilRegexMatcher *groupMatcher = [((JavaUtilRegexPattern *) nil_chk(possibleInnerMatch)) matcherWithJavaLangCharSequence:candidate];
      jboolean isFirstMatch = YES;
      while ([((JavaUtilRegexMatcher *) nil_chk(groupMatcher)) find] && self->maxTries_ > 0) {
        if (isFirstMatch) {
          id<JavaLangCharSequence> group = ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(ComGoogleI18nPhonenumbersPhoneNumberUtil_get_UNWANTED_END_CHAR_PATTERN_(), [((NSString *) nil_chk(candidate)) substring:0 endIndex:[groupMatcher start]]);
          ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(self, [((id<JavaLangCharSequence>) nil_chk(group)) description], offset);
          if (match != nil) {
            return match;
          }
          self->maxTries_--;
          isFirstMatch = NO;
        }
        id<JavaLangCharSequence> group = ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(ComGoogleI18nPhonenumbersPhoneNumberUtil_get_UNWANTED_END_CHAR_PATTERN_(), [groupMatcher groupWithInt:1]);
        ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(self, [((id<JavaLangCharSequence>) nil_chk(group)) description], offset + [groupMatcher startWithInt:1]);
        if (match != nil) {
          return match;
        }
        self->maxTries_--;
      }
    }
  }
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, NSString *candidate, jint offset) {
  @try {
    if (![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS_)) matcherWithJavaLangCharSequence:candidate])) matches] || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES_)) matcherWithJavaLangCharSequence:candidate])) find]) {
      return nil;
    }
    if ([((ComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum *) nil_chk(self->leniency_)) compareToWithId:ComGoogleI18nPhonenumbersPhoneNumberUtil_LeniencyEnum_get_VALID()] >= 0) {
      if (offset > 0 && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS_)) matcherWithJavaLangCharSequence:candidate])) lookingAt]) {
        jchar previousChar = [((id<JavaLangCharSequence>) nil_chk(self->text_)) charAtWithInt:offset - 1];
        if (ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(previousChar) || ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(previousChar)) {
          return nil;
        }
      }
      jint lastCharIndex = offset + ((jint) [((NSString *) nil_chk(candidate)) length]);
      if (lastCharIndex < [((id<JavaLangCharSequence>) nil_chk(self->text_)) length]) {
        jchar nextChar = [self->text_ charAtWithInt:lastCharIndex];
        if (ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(nextChar) || ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(nextChar)) {
          return nil;
        }
      }
    }
    ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(self->phoneUtil_)) parseAndKeepRawInputWithNSString:candidate withNSString:self->preferredRegion_];
    if ([((NSString *) nil_chk([self->phoneUtil_ getRegionCodeForCountryCodeWithInt:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode]])) isEqual:@"IL"] && ((jint) [((NSString *) nil_chk([self->phoneUtil_ getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number])) length]) == 4 && (offset == 0 || (offset > 0 && [((id<JavaLangCharSequence>) nil_chk(self->text_)) charAtWithInt:offset - 1] != '*'))) {
      return nil;
    }
    if ([self->leniency_ verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:candidate withComGoogleI18nPhonenumbersPhoneNumberUtil:self->phoneUtil_]) {
      [number clearCountryCodeSource];
      [number clearRawInput];
      [number clearPreferredDomesticCarrierCode];
      return [new_ComGoogleI18nPhonenumbersPhoneNumberMatch_initWithInt_withNSString_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(offset, candidate, number) autorelease];
    }
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
  }
  return nil;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, JavaLangStringBuilder *normalizedCandidate, IOSObjectArray *formattedNumberGroups) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  jint fromIndex = 0;
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCodeSource] != ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSourceEnum_get_FROM_DEFAULT_COUNTRY()) {
    NSString *countryCode = JavaLangInteger_toStringWithInt_([number getCountryCode]);
    fromIndex = [((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) indexOfWithNSString:countryCode] + ((jint) [((NSString *) nil_chk(countryCode)) length]);
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(formattedNumberGroups))->size_; i++) {
    fromIndex = [((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) indexOfWithNSString:IOSObjectArray_Get(formattedNumberGroups, i) withInt:fromIndex];
    if (fromIndex < 0) {
      return NO;
    }
    fromIndex += ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(formattedNumberGroups, i))) length]);
    if (i == 0 && fromIndex < [normalizedCandidate length]) {
      NSString *region = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getRegionCodeForCountryCodeWithInt:[number getCountryCode]];
      if ([util getNddPrefixForRegionWithNSString:region withBoolean:YES] != nil && JavaLangCharacter_isDigitWithChar_([normalizedCandidate charAtWithInt:fromIndex])) {
        NSString *nationalSignificantNumber = [util getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
        return [((NSString *) nil_chk([normalizedCandidate substringWithInt:fromIndex - ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(formattedNumberGroups, i))) length])])) hasPrefix:nationalSignificantNumber];
      }
    }
  }
  return [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) substringWithInt:fromIndex])) contains:[number getExtension]];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, JavaLangStringBuilder *normalizedCandidate, IOSObjectArray *formattedNumberGroups) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  IOSObjectArray *candidateGroups = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_get_NON_DIGITS_PATTERN_())) splitWithJavaLangCharSequence:[((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) description]];
  jint candidateNumberGroupIndex = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) hasExtension] ? ((IOSObjectArray *) nil_chk(candidateGroups))->size_ - 2 : ((IOSObjectArray *) nil_chk(candidateGroups))->size_ - 1;
  if (((IOSObjectArray *) nil_chk(candidateGroups))->size_ == 1 || [((NSString *) nil_chk(IOSObjectArray_Get(candidateGroups, candidateNumberGroupIndex))) contains:[((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number]]) {
    return YES;
  }
  for (jint formattedNumberGroupIndex = (((IOSObjectArray *) nil_chk(formattedNumberGroups))->size_ - 1); formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0; formattedNumberGroupIndex--, candidateNumberGroupIndex--) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(candidateGroups, candidateNumberGroupIndex))) isEqual:IOSObjectArray_Get(formattedNumberGroups, formattedNumberGroupIndex)]) {
      return NO;
    }
  }
  return (candidateNumberGroupIndex >= 0 && [((NSString *) nil_chk(IOSObjectArray_Get(candidateGroups, candidateNumberGroupIndex))) hasSuffix:IOSObjectArray_Get(formattedNumberGroups, 0)]);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formattingPattern) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if (formattingPattern == nil) {
    NSString *rfc3966Format = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormatEnum:ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormatEnum_get_RFC3966()];
    jint endIndex = [((NSString *) nil_chk(rfc3966Format)) indexOf:';'];
    if (endIndex < 0) {
      endIndex = ((jint) [rfc3966Format length]);
    }
    jint startIndex = [rfc3966Format indexOf:'-'] + 1;
    return [((NSString *) nil_chk([rfc3966Format substring:startIndex endIndex:endIndex])) split:@"-"];
  }
  else {
    NSString *nationalSignificantNumber = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
    return [((NSString *) nil_chk([util formatNsnUsingPatternWithNSString:nationalSignificantNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:formattingPattern withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormatEnum:ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormatEnum_get_RFC3966()])) split:@"-"];
  }
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, NSString *candidate, ComGoogleI18nPhonenumbersPhoneNumberUtil *util, id<ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker> checker) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  JavaLangStringBuilder *normalizedCandidate = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsWithNSString_withBoolean_(candidate, YES);
  IOSObjectArray *formattedNumberGroups = ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(util, number, nil);
  if ([((id<ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker>) nil_chk(checker)) checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:util withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaLangStringBuilder:normalizedCandidate withNSStringArray:formattedNumberGroups]) {
    return YES;
  }
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *alternateFormats = ComGoogleI18nPhonenumbersMetadataManager_getAlternateFormatsForCountryWithInt_([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode]);
  if (alternateFormats != nil) {
    {
      IOSObjectArray *a__ = alternateFormats->numberFormat_;
      ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *alternateFormat = *b__++;
        formattedNumberGroups = ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(util, number, alternateFormat);
        if ([checker checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:util withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaLangStringBuilder:normalizedCandidate withNSStringArray:formattedNumberGroups]) {
          return YES;
        }
      }
    }
  }
  return NO;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, NSString *candidate) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  jint firstSlashInBodyIndex = [((NSString *) nil_chk(candidate)) indexOf:'/'];
  if (firstSlashInBodyIndex < 0) {
    return NO;
  }
  jint secondSlashInBodyIndex = [candidate indexOf:'/' fromIndex:firstSlashInBodyIndex + 1];
  if (secondSlashInBodyIndex < 0) {
    return NO;
  }
  jboolean candidateHasCountryCode = ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCodeSource] == ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSourceEnum_get_FROM_NUMBER_WITH_PLUS_SIGN() || [number getCountryCodeSource] == ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSourceEnum_get_FROM_NUMBER_WITHOUT_PLUS_SIGN());
  if (candidateHasCountryCode && [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_([candidate substring:0 endIndex:firstSlashInBodyIndex]))) isEqual:JavaLangInteger_toStringWithInt_([number getCountryCode])]) {
    return [((NSString *) nil_chk([candidate substring:secondSlashInBodyIndex + 1])) contains:@"/"];
  }
  return YES;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, NSString *candidate, ComGoogleI18nPhonenumbersPhoneNumberUtil *util) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  for (jint index = 0; index < ((jint) [((NSString *) nil_chk(candidate)) length]) - 1; index++) {
    jchar charAtIndex = [candidate charAtWithInt:index];
    if (charAtIndex == 'x' || charAtIndex == 'X') {
      jchar charAtNextIndex = [candidate charAtWithInt:index + 1];
      if (charAtNextIndex == 'x' || charAtNextIndex == 'X') {
        index++;
        if ([((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:[candidate substring:index]] != ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchTypeEnum_get_NSN_MATCH()) {
          return NO;
        }
      }
      else if (![((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_([candidate substring:index]))) isEqual:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getExtension]]) {
        return NO;
      }
    }
  }
  return YES;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersPhoneNumberUtil *util) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCodeSource] != ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSourceEnum_get_FROM_DEFAULT_COUNTRY()) {
    return YES;
  }
  NSString *phoneNumberRegion = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getRegionCodeForCountryCodeWithInt:[number getCountryCode]];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = [util getMetadataForRegionWithNSString:phoneNumberRegion];
  if (metadata == nil) {
    return YES;
  }
  NSString *nationalNumber = [util getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formatRule = [util chooseFormattingPatternForNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormatArray:((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->numberFormat_ withNSString:nationalNumber];
  if ((formatRule != nil) && ((jint) [((NSString *) nil_chk(formatRule->nationalPrefixFormattingRule_)) length]) > 0) {
    if (formatRule->nationalPrefixOptionalWhenFormatting_) {
      return YES;
    }
    if (ComGoogleI18nPhonenumbersPhoneNumberUtil_formattingRuleHasFirstGroupOnlyWithNSString_(formatRule->nationalPrefixFormattingRule_)) {
      return YES;
    }
    NSString *rawInputCopy = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_([number getRawInput]);
    JavaLangStringBuilder *rawInput = [new_JavaLangStringBuilder_initWithNSString_(rawInputCopy) autorelease];
    return [util maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:rawInput withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:metadata withJavaLangStringBuilder:nil];
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberMatcher)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum)

ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_values_[3];

@implementation ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_values() {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_values_ count:3 type:ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_class_()];
}

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_valueOfWithNSString_(name);
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initialize();
  for (int i = 0; i < 3; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *e = ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum class]) {
    ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_NOT_READY = new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initWithNSString_withInt_(@"NOT_READY", 0);
    ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_READY = new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initWithNSString_withInt_(@"READY", 1);
    ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_DONE = new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initWithNSString_withInt_(@"DONE", 2);
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_READY", "NOT_READY", 0x4019, "Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_NOT_READY, NULL,  },
    { "READY", "READY", 0x4019, "Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_READY, NULL,  },
    { "DONE", "DONE", 0x4019, "Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_DONE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;"};
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum = { 2, "State", "com.google.i18n.phonenumbers", "PhoneNumberMatcher", 0x401a, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberMatcher$State;>;" };
  return &_ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum *self = [ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum alloc];
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberMatcher_StateEnum)

@implementation ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangStringBuilder:withNSStringArray:", "checkGroups", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker = { 2, "NumberGroupingChecker", "com.google.i18n.phonenumbers", "PhoneNumberMatcher", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker)
