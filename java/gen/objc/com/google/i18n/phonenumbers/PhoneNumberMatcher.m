//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/libphonenumber/java/libphonenumber/src/main/java/com/google/i18n/phonenumbers/PhoneNumberMatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/i18n/phonenumbers/MetadataManager.h"
#include "com/google/i18n/phonenumbers/NumberParseException.h"
#include "com/google/i18n/phonenumbers/PhoneNumberMatch.h"
#include "com/google/i18n/phonenumbers/PhoneNumberMatcher.h"
#include "com/google/i18n/phonenumbers/PhoneNumberUtil.h"
#include "com/google/i18n/phonenumbers/Phonenumber.h"
#include "com/google/i18n/phonenumbers/nano/Phonemetadata.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@class ComGoogleI18nPhonenumbersPhoneNumberMatcher_State;

@interface ComGoogleI18nPhonenumbersPhoneNumberMatcher () {
 @public
  /*!
   @brief The phone number utility.
   */
  ComGoogleI18nPhonenumbersPhoneNumberUtil *phoneUtil_;
  /*!
   @brief The text searched for phone numbers.
   */
  id<JavaLangCharSequence> text_;
  /*!
   @brief The region (country) to assume for phone numbers without an international prefix, possibly
 null.
   */
  NSString *preferredRegion_;
  /*!
   @brief The degree of validation requested.
   */
  ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *leniency_;
  /*!
   @brief The maximum number of retries after matching an invalid number.
   */
  jlong maxTries_;
  /*!
   @brief The iteration tristate.
   */
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *state_;
  /*!
   @brief The last successful match, null unless in <code>State.READY</code>.
   */
  ComGoogleI18nPhonenumbersPhoneNumberMatch *lastMatch_;
  /*!
   @brief The next index to start searching at.
   Undefined in <code>State.DONE</code>. 
   */
  jint searchIndex_;
}

/*!
 @brief Returns a regular expression quantifier with an upper and lower limit.
 */
+ (NSString *)limitWithInt:(jint)lower
                   withInt:(jint)upper;

/*!
 @brief Attempts to find the next subsequence in the searched sequence on or after <code>searchIndex</code>
 that represents a phone number.
 Returns the next match, null if none was found.
 @param index  the search index to start searching at
 @return the phone number match found, null if none can be found
 */
- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)findWithInt:(jint)index;

/*!
 @brief Trims away any characters after the first match of <code>pattern</code> in <code>candidate</code>,
 returning the trimmed version.
 */
+ (id<JavaLangCharSequence>)trimAfterFirstMatchWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                               withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate;

+ (jboolean)isInvalidPunctuationSymbolWithChar:(jchar)character;

/*!
 @brief Attempts to extract a match from a <code>candidate</code> character sequence.
 @param candidate  the candidate text that might contain a phone number
 @param offset  the offset of <code>candidate</code> within <code>text</code>
 @return the match found, null if none can be found
 */
- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)extractMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                                                                            withInt:(jint)offset;

/*!
 @brief Attempts to extract a match from <code>candidate</code> if the whole candidate does not qualify as a
 match.
 @param candidate  the candidate text that might contain a phone number
 @param offset  the current offset of <code>candidate</code> within <code>text</code>
 @return the match found, null if none can be found
 */
- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)extractInnerMatchWithNSString:(NSString *)candidate
                                                                     withInt:(jint)offset;

/*!
 @brief Parses a phone number from the <code>candidate</code> using <code>PhoneNumberUtil.parse</code> and
 verifies it matches the requested <code>leniency</code>.
 If parsing and verification succeed, a
 corresponding <code>PhoneNumberMatch</code> is returned, otherwise this method returns null.
 @param candidate  the candidate match
 @param offset  the offset of <code>candidate</code> within <code>text</code>
 @return the parsed and validated phone number match, or null
 */
- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)parseAndVerifyWithNSString:(NSString *)candidate
                                                                  withInt:(jint)offset;

/*!
 @brief Helper method to get the national-number part of a number, formatted without any national
 prefix, and return it as a set of digit blocks that would be formatted together.
 */
+ (IOSObjectArray *)getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                   withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                            withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)formattingPattern;

@end

J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, phoneUtil_, ComGoogleI18nPhonenumbersPhoneNumberUtil *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, text_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, preferredRegion_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, leniency_, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, state_, ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *)
J2OBJC_FIELD_SETTER(ComGoogleI18nPhonenumbersPhoneNumberMatcher, lastMatch_, ComGoogleI18nPhonenumbersPhoneNumberMatch *)

/*!
 @brief The phone number pattern used by <code>find</code>, similar to
 <code>PhoneNumberUtil.VALID_PHONE_NUMBER</code>, but with the following differences:
 <ul>
 <li>All captures are limited in order to place an upper bound to the text matched by the
 pattern.
 <ul>
 <li>Leading punctuation / plus signs are limited.
 <li>Consecutive occurrences of punctuation are limited.
 <li>Number of digits is limited.
 </ul>
 <li>No whitespace is allowed at the start or end.
 <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.
 </ul>
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_PATTERN();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, PATTERN, JavaUtilRegexPattern *)

/*!
 @brief Matches strings that look like publication pages.
 Example:
 @code
Computing Complete Answers to Queries in the Presence of Limited Access Patterns.
  
@endcode
 The string "211-227 (2003)" is not a telephone number.
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_PUB_PAGES();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, PUB_PAGES, JavaUtilRegexPattern *)

/*!
 @brief Matches strings that look like dates using "/" as a separator.
 Examples: 3/10/2011, 31/10/96 or
 08/31/95.
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_SLASH_SEPARATED_DATES();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, SLASH_SEPARATED_DATES, JavaUtilRegexPattern *)

/*!
 @brief Matches timestamps.
 Examples: "2012-01-02 08:00". Note that the reg-ex does not include the
 trailing ":\d\d" -- that is covered by TIME_STAMPS_SUFFIX.
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_TIME_STAMPS();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, TIME_STAMPS, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_TIME_STAMPS_SUFFIX();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, TIME_STAMPS_SUFFIX, JavaUtilRegexPattern *)

/*!
 @brief Pattern to check that brackets match.
 Opening brackets should be closed within a phone number.
 This also checks that there is something inside the brackets. Having no brackets at all is also
 fine.
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_MATCHING_BRACKETS();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, MATCHING_BRACKETS, JavaUtilRegexPattern *)

/*!
 @brief Patterns used to extract phone numbers from a larger phone-number-like pattern.
 These are
 ordered according to specificity. For example, white-space is last since that is frequently
 used in numbers, not just to separate two numbers. We have separate patterns since we don't
 want to break up the phone-number-like text on more than one different kind of symbol at one
 time, although symbols of the same type (e.g. space) can be safely grouped together.
 Note that if there is a match, we will always check any text found up to the first match as
 well.
 */
inline IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_INNER_MATCHES();
static IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, INNER_MATCHES, IOSObjectArray *)

/*!
 @brief Punctuation that may be at the start of a phone number - brackets and plus signs.
 */
inline JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_get_LEAD_CLASS();
static JavaUtilRegexPattern *ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleI18nPhonenumbersPhoneNumberMatcher, LEAD_CLASS, JavaUtilRegexPattern *)

__attribute__((unused)) static NSString *ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(jint lower, jint upper);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, jint index);

__attribute__((unused)) static id<JavaLangCharSequence> ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JavaUtilRegexPattern *pattern, id<JavaLangCharSequence> candidate);

__attribute__((unused)) static jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(jchar character);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, id<JavaLangCharSequence> candidate, jint offset);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, NSString *candidate, jint offset);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, NSString *candidate, jint offset);

__attribute__((unused)) static IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formattingPattern);

typedef NS_ENUM(NSUInteger, ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_Enum) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_Enum_NOT_READY = 0,
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_Enum_READY = 1,
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_Enum_DONE = 2,
};

/*!
 @brief The potential states of a PhoneNumberMatcher.
 */
@interface ComGoogleI18nPhonenumbersPhoneNumberMatcher_State : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;

+ (ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_[];

inline ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_get_NOT_READY();
J2OBJC_ENUM_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, NOT_READY)

inline ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_get_READY();
J2OBJC_ENUM_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, READY)

inline ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_get_DONE();
J2OBJC_ENUM_CONSTANT(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, DONE)

__attribute__((unused)) static void ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values();

FOUNDATION_EXPORT ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State)

@interface ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker : NSObject

@end

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberMatcher)

@implementation ComGoogleI18nPhonenumbersPhoneNumberMatcher

+ (NSString *)limitWithInt:(jint)lower
                   withInt:(jint)upper {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(lower, upper);
}

- (instancetype)initWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                    withNSString:(NSString *)country
           withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *)leniency
                                                        withLong:(jlong)maxTries {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(self, util, text, country, leniency, maxTries);
  return self;
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)findWithInt:(jint)index {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(self, index);
}

+ (id<JavaLangCharSequence>)trimAfterFirstMatchWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                               withJavaLangCharSequence:(id<JavaLangCharSequence>)candidate {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(pattern, candidate);
}

+ (jboolean)isLatinLetterWithChar:(jchar)letter {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(letter);
}

+ (jboolean)isInvalidPunctuationSymbolWithChar:(jchar)character {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(character);
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)extractMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)candidate
                                                                            withInt:(jint)offset {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(self, candidate, offset);
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)extractInnerMatchWithNSString:(NSString *)candidate
                                                                     withInt:(jint)offset {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithNSString_withInt_(self, candidate, offset);
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)parseAndVerifyWithNSString:(NSString *)candidate
                                                                  withInt:(jint)offset {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(self, candidate, offset);
}

+ (jboolean)allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                           withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                                   withNSStringArray:(IOSObjectArray *)formattedNumberGroups {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(util, number, normalizedCandidate, formattedNumberGroups);
}

+ (jboolean)allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                    withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                               withJavaLangStringBuilder:(JavaLangStringBuilder *)normalizedCandidate
                                                                       withNSStringArray:(IOSObjectArray *)formattedNumberGroups {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(util, number, normalizedCandidate, formattedNumberGroups);
}

+ (IOSObjectArray *)getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                                   withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                            withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:(ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *)formattingPattern {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(util, number, formattingPattern);
}

+ (jboolean)checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                              withNSString:(NSString *)candidate
                                              withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util
                     withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker:(id<ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker>)checker {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker_(number, candidate, util, checker);
}

+ (jboolean)containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                                            withNSString:(NSString *)candidate {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_(number, candidate);
}

+ (jboolean)containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                                           withNSString:(NSString *)candidate
                                           withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, candidate, util);
}

+ (jboolean)isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *)number
                                                     withComGoogleI18nPhonenumbersPhoneNumberUtil:(ComGoogleI18nPhonenumbersPhoneNumberUtil *)util {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(number, util);
}

- (jboolean)hasNext {
  if (state_ == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, NOT_READY)) {
    JreStrongAssign(&lastMatch_, ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(self, searchIndex_));
    if (lastMatch_ == nil) {
      JreStrongAssign(&state_, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, DONE));
    }
    else {
      searchIndex_ = [lastMatch_ end];
      JreStrongAssign(&state_, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, READY));
    }
  }
  return state_ == JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, READY);
}

- (ComGoogleI18nPhonenumbersPhoneNumberMatch *)next {
  if (![self hasNext]) {
    @throw [new_JavaUtilNoSuchElementException_init() autorelease];
  }
  ComGoogleI18nPhonenumbersPhoneNumberMatch *result = lastMatch_;
  JreStrongAssign(&lastMatch_, nil);
  JreStrongAssign(&state_, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, NOT_READY));
  return result;
}

- (void)remove {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (void)dealloc {
  RELEASE_(phoneUtil_);
  RELEASE_(text_);
  RELEASE_(preferredRegion_);
  RELEASE_(leniency_);
  RELEASE_(state_);
  RELEASE_(lastMatch_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberMatcher class]) {
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES, JavaUtilRegexPattern_compileWithNSString_(@"\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES, JavaUtilRegexPattern_compileWithNSString_(@"(?:(?:[0-3]?\\d/[01]?\\d)|(?:[01]?\\d/[0-3]?\\d))/(?:[12]\\d)?\\d{2}"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS, JavaUtilRegexPattern_compileWithNSString_(@"[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$"));
    JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX, JavaUtilRegexPattern_compileWithNSString_(@":[0-5]\\d"));
    JreStrongAssignAndConsume(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES, [IOSObjectArray newArrayWithObjects:(id[]){ JavaUtilRegexPattern_compileWithNSString_(@"/+(.*)"), JavaUtilRegexPattern_compileWithNSString_(@"(\\([^(]*)"), JavaUtilRegexPattern_compileWithNSString_(@"(?:\\p{Z}-|-\\p{Z})\\p{Z}*(.+)"), JavaUtilRegexPattern_compileWithNSString_(@"[\u2012-\u2015\uff0d]\\p{Z}*(.+)"), JavaUtilRegexPattern_compileWithNSString_(@"\\.+\\p{Z}*([^.]+)"), JavaUtilRegexPattern_compileWithNSString_(@"\\p{Z}+(\\P{Z}+)") } count:6 type:JavaUtilRegexPattern_class_()]);
    {
      NSString *openingParens = @"(\\[\uff08\uff3b";
      NSString *closingParens = @")\\]\uff09\uff3d";
      NSString *nonParens = JreStrcat("$$$C", @"[^", openingParens, closingParens, ']');
      NSString *bracketPairLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, 3);
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$$$$$$$$C$$$$$$C", @"(?:[", openingParens, @"])?(?:", nonParens, @"+[", closingParens, @"])?", nonParens, @"+(?:[", openingParens, ']', nonParens, @"+[", closingParens, @"])", bracketPairLimit, nonParens, '*')));
      NSString *leadLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, 2);
      NSString *punctuationLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, 4);
      jint digitBlockLimit = ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_FOR_NSN + ComGoogleI18nPhonenumbersPhoneNumberUtil_MAX_LENGTH_COUNTRY_CODE;
      NSString *blockLimit = ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(0, digitBlockLimit);
      NSString *punctuation = JreStrcat("C$C$", '[', ComGoogleI18nPhonenumbersPhoneNumberUtil_VALID_PUNCTUATION, ']', punctuationLimit);
      NSString *digitSequence = JreStrcat("$$", @"\\p{Nd}", ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(1, digitBlockLimit));
      NSString *leadClassChars = JreStrcat("$$", openingParens, ComGoogleI18nPhonenumbersPhoneNumberUtil_PLUS_CHARS);
      NSString *leadClass = JreStrcat("C$C", '[', leadClassChars, ']');
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS, JavaUtilRegexPattern_compileWithNSString_(leadClass));
      JreStrongAssign(&ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN, JavaUtilRegexPattern_compileWithNSString_withInt_(JreStrcat("$$$C$$$$$C$$$$", @"(?:", leadClass, punctuation, ')', leadLimit, digitSequence, @"(?:", punctuation, digitSequence, ')', blockLimit, @"(?:", JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, EXTN_PATTERNS_FOR_MATCHING), @")?"), ComGoogleI18nPhonenumbersPhoneNumberUtil_REGEX_FLAGS));
    }
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberMatcher)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "limitWithInt:withInt:", "limit", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "initWithComGoogleI18nPhonenumbersPhoneNumberUtil:withJavaLangCharSequence:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency:withLong:", "PhoneNumberMatcher", NULL, 0x0, NULL, NULL },
    { "findWithInt:", "find", "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", 0x2, NULL, NULL },
    { "trimAfterFirstMatchWithJavaUtilRegexPattern:withJavaLangCharSequence:", "trimAfterFirstMatch", "Ljava.lang.CharSequence;", 0xa, NULL, NULL },
    { "isLatinLetterWithChar:", "isLatinLetter", "Z", 0x8, NULL, NULL },
    { "isInvalidPunctuationSymbolWithChar:", "isInvalidPunctuationSymbol", "Z", 0xa, NULL, NULL },
    { "extractMatchWithJavaLangCharSequence:withInt:", "extractMatch", "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", 0x2, NULL, NULL },
    { "extractInnerMatchWithNSString:withInt:", "extractInnerMatch", "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", 0x2, NULL, NULL },
    { "parseAndVerifyWithNSString:withInt:", "parseAndVerify", "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", 0x2, NULL, NULL },
    { "allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangStringBuilder:withNSStringArray:", "allNumberGroupsRemainGrouped", "Z", 0x8, NULL, NULL },
    { "allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangStringBuilder:withNSStringArray:", "allNumberGroupsAreExactlyPresent", "Z", 0x8, NULL, NULL },
    { "getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:", "getNationalNumberGroups", "[Ljava.lang.String;", 0xa, NULL, NULL },
    { "checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker:", "checkNumberGroupingIsValid", "Z", 0x8, NULL, NULL },
    { "containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:", "containsMoreThanOneSlashInNationalNumber", "Z", 0x8, NULL, NULL },
    { "containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withNSString:withComGoogleI18nPhonenumbersPhoneNumberUtil:", "containsOnlyValidXChars", "Z", 0x8, NULL, NULL },
    { "isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withComGoogleI18nPhonenumbersPhoneNumberUtil:", "isNationalPrefixPresentIfRequired", "Z", 0x8, NULL, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PATTERN", "PATTERN", 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN, NULL, .constantValue.asLong = 0 },
    { "PUB_PAGES", "PUB_PAGES", 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES, NULL, .constantValue.asLong = 0 },
    { "SLASH_SEPARATED_DATES", "SLASH_SEPARATED_DATES", 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES, NULL, .constantValue.asLong = 0 },
    { "TIME_STAMPS", "TIME_STAMPS", 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS, NULL, .constantValue.asLong = 0 },
    { "TIME_STAMPS_SUFFIX", "TIME_STAMPS_SUFFIX", 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX, NULL, .constantValue.asLong = 0 },
    { "MATCHING_BRACKETS", "MATCHING_BRACKETS", 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS, NULL, .constantValue.asLong = 0 },
    { "INNER_MATCHES", "INNER_MATCHES", 0x1a, "[Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES, NULL, .constantValue.asLong = 0 },
    { "LEAD_CLASS", "LEAD_CLASS", 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS, NULL, .constantValue.asLong = 0 },
    { "phoneUtil_", NULL, 0x12, "Lcom.google.i18n.phonenumbers.PhoneNumberUtil;", NULL, NULL, .constantValue.asLong = 0 },
    { "text_", NULL, 0x12, "Ljava.lang.CharSequence;", NULL, NULL, .constantValue.asLong = 0 },
    { "preferredRegion_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "leniency_", NULL, 0x12, "Lcom.google.i18n.phonenumbers.PhoneNumberUtil$Leniency;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxTries_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "state_", NULL, 0x2, "Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastMatch_", NULL, 0x2, "Lcom.google.i18n.phonenumbers.PhoneNumberMatch;", NULL, NULL, .constantValue.asLong = 0 },
    { "searchIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;", "Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$NumberGroupingChecker;"};
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberMatcher = { 2, "PhoneNumberMatcher", "com.google.i18n.phonenumbers", NULL, 0x10, 19, methods, 16, fields, 0, NULL, 2, inner_classes, NULL, "Ljava/lang/Object;Ljava/util/Iterator<Lcom/google/i18n/phonenumbers/PhoneNumberMatch;>;" };
  return &_ComGoogleI18nPhonenumbersPhoneNumberMatcher;
}

@end

NSString *ComGoogleI18nPhonenumbersPhoneNumberMatcher_limitWithInt_withInt_(jint lower, jint upper) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if ((lower < 0) || (upper <= 0) || (upper < lower)) {
    @throw [new_JavaLangIllegalArgumentException_init() autorelease];
  }
  return JreStrcat("CICIC", '{', lower, ',', upper, '}');
}

void ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, ComGoogleI18nPhonenumbersPhoneNumberUtil *util, id<JavaLangCharSequence> text, NSString *country, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *leniency, jlong maxTries) {
  NSObject_init(self);
  JreStrongAssign(&self->state_, JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, NOT_READY));
  JreStrongAssign(&self->lastMatch_, nil);
  self->searchIndex_ = 0;
  if ((util == nil) || (leniency == nil)) {
    @throw [new_JavaLangNullPointerException_init() autorelease];
  }
  if (maxTries < 0) {
    @throw [new_JavaLangIllegalArgumentException_init() autorelease];
  }
  JreStrongAssign(&self->phoneUtil_, util);
  JreStrongAssign(&self->text_, (text != nil) ? ((id) text) : @"");
  JreStrongAssign(&self->preferredRegion_, country);
  JreStrongAssign(&self->leniency_, leniency);
  self->maxTries_ = maxTries;
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher *new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, id<JavaLangCharSequence> text, NSString *country, ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *leniency, jlong maxTries) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher *self = [ComGoogleI18nPhonenumbersPhoneNumberMatcher alloc];
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initWithComGoogleI18nPhonenumbersPhoneNumberUtil_withJavaLangCharSequence_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency_withLong_(self, util, text, country, leniency, maxTries);
  return self;
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_findWithInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, jint index) {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_PATTERN)) matcherWithJavaLangCharSequence:self->text_];
  while ((self->maxTries_ > 0) && [((JavaUtilRegexMatcher *) nil_chk(matcher)) findWithInt:index]) {
    jint start = [((JavaUtilRegexMatcher *) nil_chk(matcher)) start];
    id<JavaLangCharSequence> candidate = [((id<JavaLangCharSequence>) nil_chk(self->text_)) subSequenceFrom:start to:[matcher end]];
    candidate = ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, SECOND_NUMBER_START_PATTERN), candidate);
    ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(self, candidate, start);
    if (match != nil) {
      return match;
    }
    index = start + [((id<JavaLangCharSequence>) nil_chk(candidate)) length];
    self->maxTries_--;
  }
  return nil;
}

id<JavaLangCharSequence> ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JavaUtilRegexPattern *pattern, id<JavaLangCharSequence> candidate) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  JavaUtilRegexMatcher *trailingCharsMatcher = [((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:candidate];
  if ([((JavaUtilRegexMatcher *) nil_chk(trailingCharsMatcher)) find]) {
    candidate = [((id<JavaLangCharSequence>) nil_chk(candidate)) subSequenceFrom:0 to:[trailingCharsMatcher start]];
  }
  return candidate;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(jchar letter) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if (!JavaLangCharacter_isLetterWithChar_(letter) && JavaLangCharacter_getTypeWithChar_(letter) != JavaLangCharacter_NON_SPACING_MARK) {
    return false;
  }
  JavaLangCharacter_UnicodeBlock *block = JavaLangCharacter_UnicodeBlock_ofWithChar_(letter);
  return [((JavaLangCharacter_UnicodeBlock *) nil_chk(block)) isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, BASIC_LATIN)] || [block isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, LATIN_1_SUPPLEMENT)] || [block isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_A)] || [block isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_ADDITIONAL)] || [block isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_B)] || [block isEqual:JreLoadStatic(JavaLangCharacter_UnicodeBlock, COMBINING_DIACRITICAL_MARKS)];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(jchar character) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  return character == '%' || JavaLangCharacter_getTypeWithChar_(character) == JavaLangCharacter_CURRENCY_SYMBOL;
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractMatchWithJavaLangCharSequence_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, id<JavaLangCharSequence> candidate, jint offset) {
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_SLASH_SEPARATED_DATES)) matcherWithJavaLangCharSequence:candidate])) find]) {
    return nil;
  }
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS)) matcherWithJavaLangCharSequence:candidate])) find]) {
    NSString *followingText = [((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(self->text_)) description])) substring:offset + [((id<JavaLangCharSequence>) nil_chk(candidate)) length]];
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_TIME_STAMPS_SUFFIX)) matcherWithJavaLangCharSequence:followingText])) lookingAt]) {
      return nil;
    }
  }
  NSString *rawString = [((id<JavaLangCharSequence>) nil_chk(candidate)) description];
  ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(self, rawString, offset);
  if (match != nil) {
    return match;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithNSString_withInt_(self, rawString, offset);
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_extractInnerMatchWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, NSString *candidate, jint offset) {
  {
    IOSObjectArray *a__ = ComGoogleI18nPhonenumbersPhoneNumberMatcher_INNER_MATCHES;
    JavaUtilRegexPattern * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaUtilRegexPattern * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaUtilRegexPattern *possibleInnerMatch = *b__++;
      JavaUtilRegexMatcher *groupMatcher = [((JavaUtilRegexPattern *) nil_chk(possibleInnerMatch)) matcherWithJavaLangCharSequence:candidate];
      jboolean isFirstMatch = true;
      while ([((JavaUtilRegexMatcher *) nil_chk(groupMatcher)) find] && self->maxTries_ > 0) {
        if (isFirstMatch) {
          id<JavaLangCharSequence> group = ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, UNWANTED_END_CHAR_PATTERN), [((NSString *) nil_chk(candidate)) substring:0 endIndex:[groupMatcher start]]);
          ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(self, [((id<JavaLangCharSequence>) nil_chk(group)) description], offset);
          if (match != nil) {
            return match;
          }
          self->maxTries_--;
          isFirstMatch = false;
        }
        id<JavaLangCharSequence> group = ComGoogleI18nPhonenumbersPhoneNumberMatcher_trimAfterFirstMatchWithJavaUtilRegexPattern_withJavaLangCharSequence_(JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, UNWANTED_END_CHAR_PATTERN), [groupMatcher groupWithInt:1]);
        ComGoogleI18nPhonenumbersPhoneNumberMatch *match = ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(self, [((id<JavaLangCharSequence>) nil_chk(group)) description], offset + [groupMatcher startWithInt:1]);
        if (match != nil) {
          return match;
        }
        self->maxTries_--;
      }
    }
  }
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberMatch *ComGoogleI18nPhonenumbersPhoneNumberMatcher_parseAndVerifyWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher *self, NSString *candidate, jint offset) {
  @try {
    if (![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_MATCHING_BRACKETS)) matcherWithJavaLangCharSequence:candidate])) matches] || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_PUB_PAGES)) matcherWithJavaLangCharSequence:candidate])) find]) {
      return nil;
    }
    if ([((ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency *) nil_chk(self->leniency_)) compareToWithId:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_Leniency, VALID)] >= 0) {
      if (offset > 0 && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberMatcher_LEAD_CLASS)) matcherWithJavaLangCharSequence:candidate])) lookingAt]) {
        jchar previousChar = [((id<JavaLangCharSequence>) nil_chk(self->text_)) charAtWithInt:offset - 1];
        if (ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(previousChar) || ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(previousChar)) {
          return nil;
        }
      }
      jint lastCharIndex = offset + ((jint) [((NSString *) nil_chk(candidate)) length]);
      if (lastCharIndex < [((id<JavaLangCharSequence>) nil_chk(self->text_)) length]) {
        jchar nextChar = [self->text_ charAtWithInt:lastCharIndex];
        if (ComGoogleI18nPhonenumbersPhoneNumberMatcher_isInvalidPunctuationSymbolWithChar_(nextChar) || ComGoogleI18nPhonenumbersPhoneNumberMatcher_isLatinLetterWithChar_(nextChar)) {
          return nil;
        }
      }
    }
    ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(self->phoneUtil_)) parseAndKeepRawInputWithNSString:candidate withNSString:self->preferredRegion_];
    if ([((NSString *) nil_chk([self->phoneUtil_ getRegionCodeForCountryCodeWithInt:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode]])) isEqual:@"IL"] && ((jint) [((NSString *) nil_chk([self->phoneUtil_ getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number])) length]) == 4 && (offset == 0 || (offset > 0 && [((id<JavaLangCharSequence>) nil_chk(self->text_)) charAtWithInt:offset - 1] != '*'))) {
      return nil;
    }
    if ([self->leniency_ verifyWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:candidate withComGoogleI18nPhonenumbersPhoneNumberUtil:self->phoneUtil_]) {
      [number clearCountryCodeSource];
      [number clearRawInput];
      [number clearPreferredDomesticCarrierCode];
      return [new_ComGoogleI18nPhonenumbersPhoneNumberMatch_initWithInt_withNSString_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_(offset, candidate, number) autorelease];
    }
  }
  @catch (ComGoogleI18nPhonenumbersNumberParseException *e) {
  }
  return nil;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsRemainGroupedWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, JavaLangStringBuilder *normalizedCandidate, IOSObjectArray *formattedNumberGroups) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  jint fromIndex = 0;
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCodeSource] != JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_DEFAULT_COUNTRY)) {
    NSString *countryCode = JavaLangInteger_toStringWithInt_([number getCountryCode]);
    fromIndex = [((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) indexOfWithNSString:countryCode] + ((jint) [((NSString *) nil_chk(countryCode)) length]);
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(formattedNumberGroups))->size_; i++) {
    fromIndex = [((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) indexOfWithNSString:IOSObjectArray_Get(formattedNumberGroups, i) withInt:fromIndex];
    if (fromIndex < 0) {
      return false;
    }
    fromIndex += ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(formattedNumberGroups, i))) length]);
    if (i == 0 && fromIndex < [normalizedCandidate length]) {
      NSString *region = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getRegionCodeForCountryCodeWithInt:[number getCountryCode]];
      if ([util getNddPrefixForRegionWithNSString:region withBoolean:true] != nil && JavaLangCharacter_isDigitWithChar_([normalizedCandidate charAtWithInt:fromIndex])) {
        NSString *nationalSignificantNumber = [util getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
        return [((NSString *) nil_chk([normalizedCandidate substringWithInt:fromIndex - ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(formattedNumberGroups, i))) length])])) hasPrefix:nationalSignificantNumber];
      }
    }
  }
  return [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) substringWithInt:fromIndex])) contains:[number getExtension]];
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_allNumberGroupsAreExactlyPresentWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withJavaLangStringBuilder_withNSStringArray_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, JavaLangStringBuilder *normalizedCandidate, IOSObjectArray *formattedNumberGroups) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  IOSObjectArray *candidateGroups = [((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(ComGoogleI18nPhonenumbersPhoneNumberUtil, NON_DIGITS_PATTERN))) splitWithJavaLangCharSequence:[((JavaLangStringBuilder *) nil_chk(normalizedCandidate)) description]];
  jint candidateNumberGroupIndex = [((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) hasExtension] ? ((IOSObjectArray *) nil_chk(candidateGroups))->size_ - 2 : ((IOSObjectArray *) nil_chk(candidateGroups))->size_ - 1;
  if (((IOSObjectArray *) nil_chk(candidateGroups))->size_ == 1 || [((NSString *) nil_chk(IOSObjectArray_Get(candidateGroups, candidateNumberGroupIndex))) contains:[((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number]]) {
    return true;
  }
  for (jint formattedNumberGroupIndex = (((IOSObjectArray *) nil_chk(formattedNumberGroups))->size_ - 1); formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0; formattedNumberGroupIndex--, candidateNumberGroupIndex--) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(candidateGroups, candidateNumberGroupIndex))) isEqual:IOSObjectArray_Get(formattedNumberGroups, formattedNumberGroupIndex)]) {
      return false;
    }
  }
  return (candidateNumberGroupIndex >= 0 && [((NSString *) nil_chk(IOSObjectArray_Get(candidateGroups, candidateNumberGroupIndex))) hasSuffix:IOSObjectArray_Get(formattedNumberGroups, 0)]);
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(ComGoogleI18nPhonenumbersPhoneNumberUtil *util, ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formattingPattern) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if (formattingPattern == nil) {
    NSString *rfc3966Format = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) formatWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, RFC3966)];
    jint endIndex = [((NSString *) nil_chk(rfc3966Format)) indexOf:';'];
    if (endIndex < 0) {
      endIndex = ((jint) [rfc3966Format length]);
    }
    jint startIndex = [rfc3966Format indexOf:'-'] + 1;
    return [((NSString *) nil_chk([rfc3966Format substring:startIndex endIndex:endIndex])) split:@"-"];
  }
  else {
    NSString *nationalSignificantNumber = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
    return [((NSString *) nil_chk([util formatNsnUsingPatternWithNSString:nationalSignificantNumber withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat:formattingPattern withComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat:JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_PhoneNumberFormat, RFC3966)])) split:@"-"];
  }
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_checkNumberGroupingIsValidWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, NSString *candidate, ComGoogleI18nPhonenumbersPhoneNumberUtil *util, id<ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker> checker) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  JavaLangStringBuilder *normalizedCandidate = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsWithNSString_withBoolean_(candidate, true);
  IOSObjectArray *formattedNumberGroups = ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(util, number, nil);
  if ([((id<ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker>) nil_chk(checker)) checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:util withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaLangStringBuilder:normalizedCandidate withNSStringArray:formattedNumberGroups]) {
    return true;
  }
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *alternateFormats = ComGoogleI18nPhonenumbersMetadataManager_getAlternateFormatsForCountryWithInt_([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCode]);
  if (alternateFormats != nil) {
    {
      IOSObjectArray *a__ = alternateFormats->numberFormat_;
      ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *alternateFormat = *b__++;
        formattedNumberGroups = ComGoogleI18nPhonenumbersPhoneNumberMatcher_getNationalNumberGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil_withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat_(util, number, alternateFormat);
        if ([checker checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:util withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withJavaLangStringBuilder:normalizedCandidate withNSStringArray:formattedNumberGroups]) {
          return true;
        }
      }
    }
  }
  return false;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsMoreThanOneSlashInNationalNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, NSString *candidate) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  jint firstSlashInBodyIndex = [((NSString *) nil_chk(candidate)) indexOf:'/'];
  if (firstSlashInBodyIndex < 0) {
    return false;
  }
  jint secondSlashInBodyIndex = [candidate indexOf:'/' fromIndex:firstSlashInBodyIndex + 1];
  if (secondSlashInBodyIndex < 0) {
    return false;
  }
  jboolean candidateHasCountryCode = ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCodeSource] == JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_NUMBER_WITH_PLUS_SIGN) || [number getCountryCodeSource] == JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_NUMBER_WITHOUT_PLUS_SIGN));
  if (candidateHasCountryCode && [((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_([candidate substring:0 endIndex:firstSlashInBodyIndex]))) isEqual:JavaLangInteger_toStringWithInt_([number getCountryCode])]) {
    return [((NSString *) nil_chk([candidate substring:secondSlashInBodyIndex + 1])) contains:@"/"];
  }
  return true;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_containsOnlyValidXCharsWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withNSString_withComGoogleI18nPhonenumbersPhoneNumberUtil_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, NSString *candidate, ComGoogleI18nPhonenumbersPhoneNumberUtil *util) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  for (jint index = 0; index < ((jint) [((NSString *) nil_chk(candidate)) length]) - 1; index++) {
    jchar charAtIndex = [candidate charAtWithInt:index];
    if (charAtIndex == 'x' || charAtIndex == 'X') {
      jchar charAtNextIndex = [candidate charAtWithInt:index + 1];
      if (charAtNextIndex == 'x' || charAtNextIndex == 'X') {
        index++;
        if ([((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) isNumberMatchWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number withNSString:[candidate substring:index]] != JreLoadEnum(ComGoogleI18nPhonenumbersPhoneNumberUtil_MatchType, NSN_MATCH)) {
          return false;
        }
      }
      else if (![((NSString *) nil_chk(ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_([candidate substring:index]))) isEqual:[((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getExtension]]) {
        return false;
      }
    }
  }
  return true;
}

jboolean ComGoogleI18nPhonenumbersPhoneNumberMatcher_isNationalPrefixPresentIfRequiredWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_withComGoogleI18nPhonenumbersPhoneNumberUtil_(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *number, ComGoogleI18nPhonenumbersPhoneNumberUtil *util) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_initialize();
  if ([((ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber *) nil_chk(number)) getCountryCodeSource] != JreLoadEnum(ComGoogleI18nPhonenumbersPhonenumber_PhoneNumber_CountryCodeSource, FROM_DEFAULT_COUNTRY)) {
    return true;
  }
  NSString *phoneNumberRegion = [((ComGoogleI18nPhonenumbersPhoneNumberUtil *) nil_chk(util)) getRegionCodeForCountryCodeWithInt:[number getCountryCode]];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *metadata = [util getMetadataForRegionWithNSString:phoneNumberRegion];
  if (metadata == nil) {
    return true;
  }
  NSString *nationalNumber = [util getNationalSignificantNumberWithComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:number];
  ComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormat *formatRule = [util chooseFormattingPatternForNumberWithComGoogleI18nPhonenumbersNanoPhonemetadata_NumberFormatArray:((ComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata *) nil_chk(metadata))->numberFormat_ withNSString:nationalNumber];
  if ((formatRule != nil) && ((jint) [((NSString *) nil_chk(formatRule->nationalPrefixFormattingRule_)) length]) > 0) {
    if (formatRule->nationalPrefixOptionalWhenFormatting_) {
      return true;
    }
    if (ComGoogleI18nPhonenumbersPhoneNumberUtil_formattingRuleHasFirstGroupOnlyWithNSString_(formatRule->nationalPrefixFormattingRule_)) {
      return true;
    }
    NSString *rawInputCopy = ComGoogleI18nPhonenumbersPhoneNumberUtil_normalizeDigitsOnlyWithNSString_([number getRawInput]);
    JavaLangStringBuilder *rawInput = [new_JavaLangStringBuilder_initWithNSString_(rawInputCopy) autorelease];
    return [util maybeStripNationalPrefixAndCarrierCodeWithJavaLangStringBuilder:rawInput withComGoogleI18nPhonenumbersNanoPhonemetadata_PhoneMetadata:metadata withJavaLangStringBuilder:nil];
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberMatcher)

J2OBJC_INITIALIZED_DEFN(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State)

ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_[3];

@implementation ComGoogleI18nPhonenumbersPhoneNumberMatcher_State

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

+ (IOSObjectArray *)values {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values();
}

+ (ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *)valueOfWithNSString:(NSString *)name {
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [ComGoogleI18nPhonenumbersPhoneNumberMatcher_State class]) {
    JreEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, NOT_READY) = new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(@"NOT_READY", 0);
    JreEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, READY) = new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(@"READY", 1);
    JreEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, DONE) = new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(@"DONE", 2);
    J2OBJC_SET_INITIALIZED(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_READY", "NOT_READY", 0x4019, "Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, NOT_READY), NULL, .constantValue.asLong = 0 },
    { "READY", "READY", 0x4019, "Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, READY), NULL, .constantValue.asLong = 0 },
    { "DONE", "DONE", 0x4019, "Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;", &JreEnum(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State, DONE), NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lcom.google.i18n.phonenumbers.PhoneNumberMatcher$State;"};
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberMatcher_State = { 2, "State", "com.google.i18n.phonenumbers", "PhoneNumberMatcher", 0x401a, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lcom/google/i18n/phonenumbers/PhoneNumberMatcher$State;>;" };
  return &_ComGoogleI18nPhonenumbersPhoneNumberMatcher_State;
}

@end

void ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *new_ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *self = [ComGoogleI18nPhonenumbersPhoneNumberMatcher_State alloc];
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values() {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_ count:3 type:ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_class_()];
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_valueOfWithNSString_(NSString *name) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initialize();
  for (int i = 0; i < 3; i++) {
    ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *e = ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

ComGoogleI18nPhonenumbersPhoneNumberMatcher_State *ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_fromOrdinal(NSUInteger ordinal) {
  ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return ComGoogleI18nPhonenumbersPhoneNumberMatcher_State_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberMatcher_State)

@implementation ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkGroupsWithComGoogleI18nPhonenumbersPhoneNumberUtil:withComGoogleI18nPhonenumbersPhonenumber_PhoneNumber:withJavaLangStringBuilder:withNSStringArray:", "checkGroups", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker = { 2, "NumberGroupingChecker", "com.google.i18n.phonenumbers", "PhoneNumberMatcher", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleI18nPhonenumbersPhoneNumberMatcher_NumberGroupingChecker)
